# The Fern Platform

> Input OpenAPI. Output SDKs and Docs.



Fern allows developers to instantly transform your OpenAPI into SDKs and Docs. Engineering teams build with Fern to offer a best-in-class developer experience.

## Products


  
    Generate client libraries in multiple languages
  

  
    A beautiful, interactive documentation website
  

  
    Let users find answers in your documentation instantly
  


## Motivation

Stripe, Twilio, and AWS have the resources to invest in internal tooling for developer
experience. They provide SDKs (aka client libraries) in multiple languages and developer documentation
that stays up-to-date.

We are building Fern to productize this process and make it accessible to all
software companies.

## Get Support

We love talking to users! Reach out via your preferred support channel so we can help you succeed with Fern.

1. 💬 Message us in your Dedicated Slack Channel (for paid customers)
2. 🤝 [Join our community Slack](https://buildwithfern.com/slack)
3. 🐛 [File a GitHub Issue](https://github.com/fern-api/fern/issues)
4. ✉️ [Email us](mailto:support@buildwithfern.com)

We're lightning-fast with support - you'll typically hear back from us in hours, not days!


  
    Schedule a demo with a product expert
  

  
    View our customer showcase
  



# What is an API Definition?

> Describes the contract between the API provider and API consumer


  An API Definition is a document that defines the structure of the API. It includes the **endpoints**,
  **request and response schemas**, and **authentication** requirements.


Fern integrates with several API definition formats:


  
    Formerly known as Swagger, [OpenAPI](https://swagger.io/specification/) is the most popular API definition format.
    OpenAPI can be used to document RESTful APIs and is defined in a YAML or JSON file.

    Check out an example OpenAPI Specification for the Petstore API [here](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

    ```yaml maxLines={0}
    openapi: 3.0.2
    tags:
      - name: pet
        description: Everything about your Pets
    paths:
      /pet:
        post:
          tags:
            - pet
          summary: Add a new pet to the store
          description: Add a new pet to the store
          operationId: addPet
          requestBody:
            description: Create a new pet in the store
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Pet'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Pet'
              application/x-www-form-urlencoded:
                schema:
                  $ref: '#/components/schemas/Pet'
          responses:
            '200':
              description: Successful operation
              content:
                application/xml:
                  schema:
                    $ref: '#/components/schemas/Pet'
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
            '405':
              description: Invalid input
        components:
          schemas:
            Pet:
              required:
                - name
                - photoUrls
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                name:
                  type: string
                  example: doggie
                category:
                  $ref: '#/components/schemas/Category'
                photoUrls:
                  type: array
                  xml:
                    wrapped: true
                  items:
                    type: string
                    xml:
                      name: photoUrl
                tags:
                  type: array
                  xml:
                    wrapped: true
                  items:
                    $ref: '#/components/schemas/Tag'
                    xml:
                      name: tag
                status:
                  type: string
                  description: pet status in the store
                  enum:
                    - available
                    - pending
                    - sold
              xml:
                name: pet
              type: object
    ```
  

  
    [AsyncAPI](https://v2.asyncapi.com/docs) is a specification for defining event-driven APIs. It is used to document APIs that use
    WebSockets, MQTT, and other messaging protocols.

    Check out an example AsyncAPI spec for a chat application below:

    ```yaml maxLines={0}
    asyncapi: 2.0.0
    info:
      title: Chat server
      version: 1.0.0

    servers:
      Production:
        url: chat.com
        protocol: ws

    channels:
      "/application":
        bindings:
          ws:
            query:
              type: object
              properties:
                apiKey:
                  type: string
                  description: The API key for the client
                  minimum: 1
            bindingVersion: 0.1.0
        subscribe:
          operationId: sendMessage
          message:
            $ref: '#/components/messages/SendMessage'
        publish:
          operationId: receiveMessage
          message:
            $ref: '#/components/messages/ReceiveMessage'

    components:
      messages:
        SendMessage:
          payload:
            message: string
        ReceiveMessage:
          payload:
            message: string
            from: 
              type: string
              description: The userId for the sender of the message
    ```
  

  
    The Fern Definition is our take on a simpler API definition format. It is designed with **best-practices**,
    supports **both RESTful and event-driven APIs**, and is optimized for **SDK generation**.

    
      The Fern Definition is inspired from internal API Definition formats built at companies like
      [Amazon](https://smithy.io/2.0/index.html), [Google](https://grpc.io/), [Palantir](https://blog.palantir.com/introducing-conjure-palantirs-toolchain-for-http-json-apis-2175ec172d32),
      Twilio and Stripe. These companies **rejected** OpenAPI and built their own version.
    

    Check out an example Fern Definition below:

    ```yaml maxLines={0}
    types:
      MovieId: string

      Movie:
        properties:
          id: MovieId
          title: string
          rating:
            type: double
            docs: The rating scale is one to five stars

      CreateMovieRequest:
        properties:
          title: string
          rating: double

    service:
      auth: false
      base-path: /movies
      endpoints:
        createMovie:
          docs: Add a movie to the database
          method: POST
          path: /create-movie
          request: CreateMovieRequest
          response: MovieId

        getMovie:
          method: GET
          path: /{movieId}
          path-parameters:
            movieId: MovieId
          response: Movie
          errors:
            - MovieDoesNotExistError

    errors:
      MovieDoesNotExistError:
        status-code: 404
        type: MovieId
    ```
  


## Why create an API Definition ?

Once you have an API definition, Fern will use it as an input to generate artifacts
like SDKs and API Reference documentation. Every time you update the API definition,
you can regenerate these artifacts and ensure they are always up-to-date.


  
    Client libraries in multiple languages.
  

  
    A Stripe-like API documentation website.
  

  }>
    A published Postman collection, with example request and responses.
  

  }>
    Pydantic models for FastAPI or controllers for your Spring Boot application.
  



# The Fern Folder

> Describes the Fern folder structure

Configuring fern starts with the `fern` folder. The fern folder contains your API definitions,
generators, and your CLI version.

## Directory structure

When you run `fern init`, your Fern folder will be initialized with the following files:

```bash
fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/
    ├─ api.yml
    └─ imdb.yml
```

If you want to initialize Fern with an OpenAPI Specification, run `fern init --openapi path/to/openapi` instead.

```yaml
fern/
  ├─ fern.config.json
  ├─ generators.yml # required on Fern version 0.41.0 and above
  └─ openapi/
    ├─ openapi.yml
```

### `fern.config.json`

Every fern folder has a single `fern.config.json` file. This file stores the organization and
the version of the Fern CLI that you are using.

```json
{
    "organization": "imdb",
    "version": "0.31.2"
}
```

Every time you run a fern CLI command, the CLI downloads itself at the correct version to ensure
determinism.


  To upgrade the CLI, run 

  `fern upgrade`

  . This will update the version field in 

  `fern.config.json`

   


### `generators.yml`

The `generators.yml` file can include information about where your API specification is located, along with which generators you are using, where each package gets published, as well as configuration specific to each generator.


  
    ```yaml
    api: 
      path: ./path/to/openapi.yml
    groups:
      public:
        generators:
          - name: fernapi/fern-python-sdk
            version: 3.0.0
            output:
              location: pypi
              package-name: imdb
              token: ${PYPI_TOKEN}
            github:
              repository: imdb/imdb-python
            config:
              client_class_name: imdb
          - name: fernapi/fern-typescript-node-sdk
            version: 0.31.0
            output:
              location: npm
              package-name: imdb
              token: ${NPM_TOKEN}
            github:
              repository: imdb/imdb-node
            config:
              namespaceExport: imdb
    ```
  

  
    ```yaml
    api: 
      path: ./path/to/openapi.yml
    ```
  


## Multiple APIs

The Fern folder is capable of housing multiple API definitions. Instead of placing your API definition at the top-level, you can nest them within an `apis` folder. Be sure to include a `generators.yml` file within each API folder that specifies the location of the API definition.


  
    ```bash
    fern/
      ├─ fern.config.json
      ├─ generators.yml
      └─ apis/
        └─ imdb/
            ├─ generators.yml
            └─ openapi/
              ├─ openapi.yml
        └─ disney/
            ├─ generators.yml
            └─ openapi/
              ├─ openapi.yml
    ```
  

  
    ```bash
    fern/
      ├─ fern.config.json
      ├─ generators.yml
      └─ apis/
        └─ imdb/
            ├─ generators.yml
            └─ definition/
              ├─ api.yml
              └─ imdb.yml
        └─ disney/
            ├─ generators.yml
            └─ definition/
              ├─ api.yml
              └─ disney.yml
    ```
  



# What is an OpenAPI Specification?

> OpenAPI is a standard for documenting REST APIs

The OpenAPI Specification (OAS) is a framework used by developers to document REST APIs. The specification
written in JSON or YAML and contains all of your endpoints, parameters, schemas, and authentication schemes.
Fern is compatible with the latest OAS release, which is currently [v3.1.1](https://spec.openapis.org/#openapi-specification).


   Considering options to generate an OpenAPI spec? Get live support 

  [here](https://fern-community.slack.com/join/shared_invite/zt-2dpftfmif-MuAegl8AfP_PK8s2tx350Q%EF%BB%BF#/shared-invite/email)

   


Below is an example of an OpenAPI file:

```yaml openapi.yml 
openapi: 3.0.2
info:
  title: Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.
paths:
  "/pet":
    put:
      tags:
      - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Pet"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Pet"
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
      - api_key
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          "$ref": "#/components/schemas/Category"
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            "$ref": "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
```

## Setup your Fern folder

Start by initializing your Fern folder with an OpenAPI spec


  ```sh file
  fern init --openapi ./path/to/openapi
  ```

  ```sh url
  fern init --openapi https://host/path/to/openapi
  ```


This will initialize a directory like the following

```
fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ openapi/
    ├─ openapi.yml
```


# Authentication

> Model auth schemes such as bearer, basic, and api key.

Configuring authentication schemes happens in the `components.securitySchemes` section of OpenAPI.

```yml title="openapi.yml" {2-3}
components: 
  securitySchemes: 
    ...
```


  To apply a security scheme across all endpoints, reference the `securityScheme` within the `security` section of your OpenAPI Specification.

  ```yml title="openapi.yml" {3, 5-6}
  components: 
    securitySchemes: 
      AuthScheme:
        ...
  security: 
    - AuthScheme: []
  ```


## Bearer security scheme

Start by defining a `bearer` security scheme in your `openapi.yml`:

```yml title="openapi.yml" {3-5}
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
```

This will generate an SDK where the user would have to provide
a mandatory argument called `token`.

```ts index.ts
const client = new Client({
  token: "ey34..."
})
```

If you want to control variable naming and the environment variable to scan,
use the configuration below:

```yaml title="openapi.yml" {6-8}
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      x-fern-bearer: 
        name: apiKey
        env: PLANTSTORE_API_KEY
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_API_KEY
let client = new Client(); 

// token has been renamed to apiKey
client = new Client({
  apiKey: "ey34..."
})
```

## Basic security scheme

Start by defining a `basic` security scheme in your `openapi.yml`:

```yaml title="openapi.yml" {3-5}
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
```

This will generate an SDK where the user would have to provide
a mandatory arguments called `username` and `password`.

```ts index.ts
const client = new Client({
  username: "joeschmoe"
  password: "ey34..."
})
```

If you want to control variable naming and environment variables to scan,
use the configuration below:

```yaml title="openapi.yml" {6-12}
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      x-fern-basic:
        username:
          name: clientId
          env: PLANTSTORE_CLIENT_ID
        password:
          name: clientSecret
          env: PLANTSTORE_CLIENT_SECRET
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_CLIENT_ID and process.env.PLANTSTORE_CLIENT_SECRET
let client = new Client(); 

// parameters have been renamed
client = new Client({
  clientId: "joeschmoe", 
  clientSecret: "ey34..."
})
```

## ApiKey security scheme

Start by defining an `apiKey` security scheme in your `openapi.yml`:

```yml title="openapi.yml" {3-5}
components: 
  securitySchemes: 
    ApiKey: 
      type: apiKey
      in: header
      name: X_API_KEY
```

This will generate an SDK where the user would have to provide
a mandatory argument called `apiKey`.

```ts index.ts
const client = new Client({
  apiKey: "ey34..."
})
```

If you want to control variable naming and environment variables to scan,
use the configuration below:

```yaml title="openapi.yml" {7-10}
components: 
  securitySchemes: 
    ApiKey: 
      type: apiKey
      in: header
      name: X_API_KEY
      x-fern-header:
        name: apiToken
        env: PLANTSTORE_API_KEY
        prefix: "Token " # Optional      
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_API_KEY
let client = new Client(); 

// parameters have been renamed
client = new Client({
  apiToken: "ey34..."
})
```

## Multiple security schemes

If you would like to define multiple security schemes, simply
list them under `components.securitySchemes`. For example, if you wanted to support
`basic` and `apiKey` security schemes, see the example below:

```yaml title="openapi.yml" {3,6}
components: 
  securitySchemes: 
    BearerAuth:
      type: http
      scheme: bearer  
    ApiKey: 
      type: apiKey
      in: header
      name: X_API_KEY   
```


# Servers

> Configure server URLs and environments to help users connect to your API.

OpenAPI allows you to specify one or more base URLs under the `servers` key.

```yml openapi.yml 

servers: 
  - url: https://api.yourcompany.com/
  - url: https://api.eu.yourcompany.com/
```

Specifying servers is valuable for both SDKs and Docs:

* For SDKs, your users won't need to manually specify the baseURL at client instantiation
* For Docs, your API playground will automatically hit the correct server

## Naming your servers

If you have more than one server, we recommend specifying an `x-fern-server-name` to name
the server.

```yml openapi.yml {3,5}
servers: 
  - x-fern-server-name: Production
    url: https://api.yourcompany.com/
  - x-fern-server-name: Production_EU
    url: https://api.eu.yourcompany.com/
```

## Multiple Base URLs for a single API

If you have a microservice architecture, it is possible that you may have different endpoints hosted
at different URLs. For example, your AI endpoints might be hosted at `ai.yourcompany.com` and the rest
of your endpoints might be hosted at `api.yourcompany.com`.

To specify this, you will need to add configuration to both your `generators.yml` and OpenAPI spec. The
snippet directly below shows how to configure an environment with multiple urls in your `generators.yml`.

```yml generators.yml {3-8}
api: 
  default-environment: Production
  default-url: api
  environments: 
    Production: 
      api: api.yourcompany.com
      ai: ai.yourcompany.com
  specs: 
    - openapi: ./path/to/your/openapi
      overrides: ./path/to/your/overrides # optional
```

Once you've specified the environments in your `generators.yml`, you can use the `x-fern-server-name`
extension to specify which server the operation belongs to.

```yml openapi.yml {4}
paths: 
  /chat: 
    post: 
      x-fern-server-name: ai 
```

If you have multiple environments like development or staging, you can model those in your `generators.yml`
as well.

```yml generators.yml {7-12}
api: 
  default-environment: Production
  default-url: api
  environments: 
    Production: 
      api: api.yourcompany.com
      ai: ai.yourcompany.com
    Staging: 
      api: api.staging.yourcompany.com
      ai: ai.staging.yourcompany.com    
    Dev: 
      api: api.dev.yourcompany.com
      ai: ai.dev.yourcompany.com          
```


  To see an example of this in production, check out the Chariot 

  [generators.yml](https://github.com/chariot-giving/chariot-openapi/blob/main/fern/apis/2025-02-24/generators.yml)



# HTTP JSON Endpoints

> Document HTTP JSON APIs with the `application/json` content type

Endpoints in OpenAPI are defined underneath the `paths` key. Below is an example of defining
a single endpoint:

```yml title="openapi.yml" maxLines=0 {2-18}
paths:
  /pets:
    post:
      summary: Create a new pet
      description: Creates a new pet with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
```

## Examples

You can provide examples of requests and responses by using the `examples` key.

```yaml title="openapi.yml" {12-17,25-30}
paths:
  /pets:
    post:
      summary: Create a new pet
      description: Creates a new pet with the provided information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            examples:
              PetExample:
                summary: This is an example of a Pet
                value: 
                  name: Markley
                  id: 44
      responses:
        '200':
          description: A Pet object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                PetExample:
                  summary: This is an example of a Pet
                  value: 
                    name: Markley
                    id: 44
```


# Multipart File Upload

> Document endpoints with the `multipart/form-data` content type

Multipart requests combine one or more sets of data into a single body, separated by boundaries.
You typically use these requests for file uploads and for transferring data of several types in a single request
(for example, a file along with a JSON object).

```yml title="openapi.yml" maxLines=0 {12-24}
paths:
  /upload:
    post:
      summary: Upload a file
      description: Upload a file using multipart/form-data encoding
      operationId: uploadFile
      tags:
        - file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                description:
                  type: string
                  description: A description of the file (optional)
              required:
                - file
      responses:
        "200":
          description: Successful upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  fileId:
                    type: string
```

Any request body that is defined with a `multipart/form-data` content type, will be
treated as a multipart request. Within a given multipart request, a string parameter with
`format:binary` will represent an arbitrary file.

## Array of Files

If your endpoint supports an array of files, then your request body must use
an array type.

```yml openapi.yml {12-17}
paths:
  /upload:
    post:
      summary: Upload multiple files
      operationId: uploadFiles
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: An array of files to upload
```


# Server-Sent Events and Streaming APIs

> Use the `x-fern-streaming` extension to model streaming endpoints


  The `x-fern-streaming` extension allows you to represent endpoints that are streaming.


## JSON streaming

If your API returns a series of `JSON` chunks as seen below

```json
{ "text": "Hi, I am a" }
{ "text": "chatbot. Do you have any"}
{ "text": "questions for me"}
```

then simply add the `x-fern-streaming: true` to your OpenAPI operation.

```yaml title="openapi.yml" {4}
paths:
  /logs:
    post:
      x-fern-streaming: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
components:
  schemas:
    Chat:
      type: object
      properties:
        text:
          type: string
```

## Server-sent events

If your API returns server-sent-events, with the `data` and `event` keys as seen below

```json
data: { "text": "Hi, I am a" }
data: { "text": "chatbot. Do you have any"}
data: { "text": "questions for me"}
```

then make sure to include `format: sse`.

```yaml title="openapi.yml" {4-5}
paths:
  /logs:
    post:
      x-fern-streaming: 
        format: sse
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
components:
  schemas:
    Chat:
      type: object
      properties:
        text:
          type: string
```

## `Stream` parameter

It has become common practice for endpoints to have a `stream` parameter that
controls whether the response is streamed or not. Fern supports this pattern in a first
class way.

Simply specify the `stream-condition` as well as the ordinary response and the streaming response:

```yaml title="openapi.yml" {4-10}
paths:
  /logs:
    post:
      x-fern-streaming: 
        format: sse
        stream-condition: $request.stream
        response: 
          $ref: '#/components/schemas/Chat'
        response-stream: 
          $ref: '#/components/schemas/ChatChunk'
components:
  schemas:
    Chat:
      type: object
      properties:
        text:
          type: string
        tokens: 
          type: number
    ChatChunk: 
      type: object
      properties: 
        text: 
          type: string
```


# Define Webhooks in OpenAPI

> Use the `x-fern-webhook` extension to define webhooks in your OpenAPI spec

To define a webhook in your OpenAPI specification, add the `x-fern-webhook: true` extension to your endpoint. OpenAPI 3.0.0 or higher is required. Fern will treat the `requestBody` as the webhook payload.

```yaml openapi.yml {6}
paths: 
  /payment/updated/: 
    post: 
      summary: Payment Initiated
      operationId: initiatePayment
      x-fern-webhook: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  $ref: '#/components/schemas/Currency'
              required:
                - amount
                - currency 
```


  The path that you choose when defining a webhook can be arbitrary. Since webhooks
  can be sent to any server, Fern just ignores the path.



# Use audiences to filter your API

> Use `x-fern-audiences` to filter to relevant endpoints, schemas and properties

Audiences are a useful tool for segmenting your API for different consumers. Common examples of audiences include `public`
and `beta`.


  Remember to filter your SDKs and Docs after specifying audiences. If **no audiences** are specified,
  nothing will be filtered.

  
    
      The following example configures the SDK to filter to the `public` audience:

      ```yaml title="generators.yml" {3-4}
      groups:
        sdks:
          audiences:
            - public
          generators:
            - name: fernapi/fern-typescript-node-sdk
              version: 0.8.8
      ```
    

    
      The following example configures the docs to filter to the `public` audience:

      ```yaml title="docs.yml" {3-4}
      navigation:
        - api: API Reference
          audiences:
            - public
      ```
    
  


## Audiences for servers

To mark a server with a particular audience, add the `x-fern-server-name` and `x-fern-audiences` extension to the relevant server.

In the example below, the `Production` server is only available to public consumers:

```yaml title="openapi.yml" {3-5}
servers:
  - url: https://api.com
    x-fern-server-name: Production
    x-fern-audiences:
      - public
```

## Audiences for endpoints

To mark an endpoint with a particular audience, add the `x-fern-audiences` extension to the relevant endpoint.

In the example below, the `POST /users/sendEmail` endpoint is only available to public consumers:

```yaml title="openapi.yml" {4-5}
paths:
  /users/sendEmail:
    post:
      x-fern-audiences:
        - public
      operationId: send_email
```

## Audiences for schemas

Schemas can be marked for different audiences, as well.

In this example, the `Email` type is available to both public and beta customers.

```yaml title="openapi.yml" {13-15}
components:
  schemas:
    Email:
      title: Email
      type: object
      properties:
        subject:
          type: string
        body:
          type: string
        to:
          type: string
      x-fern-audiences:
        - public
        - beta
```

## Audiences for properties

Properties can be marked for different audiences, as well.

In this example, the `to` property is available to beta customers only.

```yaml title="openapi.yml" {13-17}
components:
  schemas:
    Email:
      title: Email
      type: object
      properties:
        subject:
          type: string
        body:
          type: string
        to:
          type: string
          x-fern-audiences:
            - beta
```


# Customize SDK Method Names

> Use `x-fern-sdk-method-name` and `x-fern-sdk-group-name` to finetune SDK naming.

## Operation IDs

By default, if you have no extensions present, Fern will try to use your operation ID to generate idiomatic
method names for the SDK. We typically recommend formatting your operation IDs like `{tag_name}_{operation_name}`.

For example, for an endpoint that has the tag `users` and the operation id `users_get`, we will generate an SDK
method that is `users.get()`. If your operation id does not start with a tag, then we will simply use it as the method name.

## Usage


  The `x-fern-sdk-group-name` and `x-fern-sdk-method-name` extensions allow you to customize the generated SDK method
  names.


In the example below, Fern will generate a method called `client.users.create()` for the `POST /users` endpoint.

```yaml title="openapi.yaml"
paths:
  /users:
    post:
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: create
```

## Top level methods

If you omit the `x-fern-sdk-group-name` extension, then the generated SDK method will live at the root.
In the example below, Fern will generate a method called `client.send()`:

```yaml title="openapi.yaml"
paths:
  /send:
    post:
      x-fern-sdk-method-name: send
```

## Multiple levels of nesting

If you add more than one `x-fern-sdk-group-name` extension, then the generated SDK will nest group names.
The order of the group names is preserved in the generated SDK method.

In the example below, Fern will generate a method called `client.users.notifications.send()`:

```yaml title="openapi.yaml"
paths:
  /users/notifications:
    post:
      x-fern-sdk-group-name:
        - users
        - notifications
      x-fern-sdk-method-name: send
```


# Customize parameter names

> Use `x-fern-parameter-name` to customize query parameter, header and path parameter naming.


  The `x-fern-parameter-name` extension allows you to customize the variable names of parameters in your generated SDKs.


## Headers

In the example below, the header `X-API-Version` is renamed to `version` in the
generated SDK. The rename makes the SDK more human readable.

```yaml {8}
paths:
  "/user":
    get:
      operationId: list_user
      parameters:
        - in: header
          name: X-API-Version
          x-fern-parameter-name: version
          schema:
            type: string
          required: true
```

## Query parameters

In the example below, the query parameter `q` is renamed to `search_terms` in the
generated SDK. The rename makes the parameter more approachable for end users.

```yaml {8}
paths:
  "/user/search":
    get:
      operationId: search_user
      parameters:
        - in: query
          name: q
          x-fern-parameter-name: search_terms
          schema:
            type: string
          required: false
```

## Path parameters

In the example below, the path parameter `userId` is renamed to `id` in the
generated SDK. The rename makes the SDK less verbose.

```yaml {8}
paths:
  "/user/{userId}":
    get:
      operationId: get_user
      parameters:
        - in: path
          name: userId
          x-fern-parameter-name: id
          schema:
            type: string
          required: false
```


# Other extensions

> Learn about Fern's OpenAPI extensions for authentication overrides, global headers, enum descriptions and names, audiences, and more.

Fern supports different OpenAPI extensions so that you can generate higher-quality SDKs.

## API version

You can define your API version scheme, such as a `X-API-Version` header. The supported versions and default value are specified like so:

```yaml title="openapi.yaml"
x-fern-version:
  version:
    header: X-API-Version
    default: "2.0.0"
    values:
      - "1.0.0"
      - "2.0.0"
      - "latest"
paths: ...
```

## Global headers

At times, your API will leverage certain headers for every endpoint, or the majority of them, we call these "global headers". For convenience, generated Fern SDKs expose "global headers" to easily be updated on API calls. Take for example an API key, if we declare the API key as a global header, a user will be able to plug theirs in easily:

```python
import os

class Client:

  def __init__(self, *, apiKey: str):
```

To configure global headers, Fern will automatically pull out headers that are used in every request, or the majority of requests, and mark them as global.
In order to label additional headers as global, or to alias the names of global headers, you can leverage the `x-fern-global-headers` extension:

```yaml title="openapi.yml"
x-fern-global-headers:
  - header: custom_api_key
    name: api_key
  - header: userpool_id
    optional: true
```

yields the following client:

```python
import os

class Client:

  def __init__(self, *, apiKey: str, userpoolId: typing.Optional[str])
```

## Enum descriptions and names

OpenAPI doesn't natively support adding descriptions to enum values. To do this in Fern you can use the `x-fern-enum`
extension.

In the example below, we've added some descriptions to enum values. These descriptions will
propagate into the generated SDK and docs website.

```yaml title="openapi.yml" {9-13}
components:
  schemas:
    CardSuit:
      enum:
        - clubs
        - diamonds
        - hearts
        - spades
      x-fern-enum:
        clubs:
          description: Some docs about clubs
        spades:
          description: Some docs about spades
```

`x-fern-enum` also supports a `name` field that allows you to customize the name of the enum in code.
This is particularly useful when you have enums that rely on symbolic characters that would otherwise cause
generated code not to compile.

For example, the following OpenAPI

```yaml title="openapi.yml" {9,12}
components:
  schemas:
    Operand:
      enum:
        - '>'
        - '<'
      x-fern-enum:
        '>':
          name: GreaterThan
          description: Checks if value is greater than
        '<':
          name: LessThan
          description: Checks if value is less than
```

would generate

```typescript title="operand.ts"
export enum Operand {
  GreaterThan = ">",
  LessThan = "<"
}
```

## Schema names

OpenAPI allows you to define inlined schemas that do not have names.

```yaml title="Inline type in openapi.yml" {11}
components:
  schemas:
    Movie:
      type: object
      properties:
        name:
          type: string
        cast:
          type: array
          items:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              age:
                type: integer
```

Fern automatically generates names for all the inlined schemas. For example, in this example,
Fern would generate the name `CastItem` for the inlined array item schema.

```typescript title="Auto-generated name" {6}
export interface Movie {
  name?: string;
  cast?: CastItem[];
}

export interface CastItem {
  firstName?: string;
  lastName?: string;
  age?: integer;
}
```

If you want to override the generated name, you can use the extension `x-fern-type-name`.

```yaml title="openapi.yml" {12}
components:
  schemas:
    Movie:
      type: object
      properties:
        name:
          type: string
        cast:
          type: array
          items:
            type: object
            x-fern-type-name: Person
            properties:
              firstName:
                type: string
              lastName:
                type: string
              age:
                type: integer
```

This would replace `CastItem` with `Person` and the generated code would read more idiomatically:

```typescript title="Overridden name" {6}
export interface Movie {
  name?: string;
  cast?: Person[];
}

export interface Person {
  firstName?: string;
  lastName?: string;
  age?: integer;
}
```

## Property names

The `x-fern-property-name` extension allows you to customize the variable name for object
properties.

For example, if you had a property called `_metadata` in your schema but you wanted the
variable to be called `data` in your SDK you would do the following:

```yaml {6}
components:
  schemas:
    MyUser:
      _metadata:
        type: object
        x-fern-property-name: data
```

## Server names

The `x-fern-server-name` extension is used to name your servers.

```yaml title="openapi.yml"
servers:
  - url: https://api.example.com
    x-fern-server-name: Production
  - url: https://sandbox.example.com
    x-fern-server-name: Sandbox
```

In a generated TypeScript SDK, you'd see:

```typescript title="environment.ts"
export const ExampleEnvironment = {
  Production: "https://api.example.com"
} as const;

export type ExampleEnvironment = typeof ExampleEnvironment.Production;
```

## Base path

The `x-fern-base-path` extension is used to configure the base path prepended to every endpoint.

In the example below, we have configured the `/v1` base path so the full endpoint path is
`https://api.example.com/v1/users`.

```yaml title="Set the base path in openapi.yml" {1}
x-fern-base-path: /v1
servers:
  - url: https://api.example.com
paths:
  /users: ...
```

## Ignoring schemas or endpoints

If you want Fern to skip reading any endpoints or schemas, use the `x-fern-ignore` extension.

To skip an endpoint, add `x-fern-ignore: true` at the operation level.

```yaml title="x-fern-ignore at operation level in openapi.yml" {4}
paths:
  /users:
    get:
      x-fern-ignore: true
      ...
```

To skip a schema, add `x-fern-ignore: true` at the schema level.

```yaml title="x-fern-ignore at schema level in openapi.yml" {4}
components:
  schemas:
    SchemaToSkip:
      x-fern-ignore: true
      ...
```

## Overlaying extensions

Because of the number of tools that use OpenAPI, it may be more convenient to
"overlay" your fern specific OpenAPI extensions onto your original definition. \
In order to do this you can specify your overrides file in `generators.yml`.

Below is an example of how someone can overlay the extensions `x-fern-sdk-method-name` and
`x-fern-sdk-group-name` without polluting their original OpenAPI. The combined result is
shown in the third tab.


  ```yaml title="generators.yml" {3}
  api:
    path: ./openapi/openapi.yaml
    overrides: ./openapi/overrides.yaml
  default-group: sdk
  groups:
    sdk:
      generators:
        - name: fernapi/fern-python-sdk
          version: 2.2.0
  ```

  ```yaml title="overrides.yml"
  paths:
    /users:
      get:
        x-fern-sdk-group-name: users
        x-fern-sdk-method-name: get
  ```

  ```yaml title="Overlaid OpenAPI" {4-5}
  paths:
    /users:
      get:
        x-fern-sdk-group-name: users
        x-fern-sdk-method-name: get
        summary: Get a list of users
        description: Retrieve a list of users from the system.
        responses:
          '200':
            description: Successful response
          '500':
            description: Internal Server Error
  ```


## Embedding extensions

If instead of overlaying your extensions within an overrides file, as mentioned above. Certain frameworks that generate OpenAPI Specifications make it easy to embed extensions directly from code.

### FastAPI

Please view our page on [FastAPI](/learn/api-definition/openapi/frameworks/fastapi) for more information on how to extend your OpenAPI Specification within FastAPI.

## Request + response examples

While OpenAPI has several fields for examples, there is no easy way
to associate a request with a response. This is especially useful when
you want to show more than one example in your documentation.

`x-fern-examples` is an array of examples. Each element of the array
can contain `path-parameters`, `query-parameters`, `request` and `response`
examples values that are all associated.

```yaml title="openapi.yml" {5-16}
paths:
  /users/{userId}:
    get:
      x-fern-examples:
        - path-parameters:
            userId: user-1234
          response:
            body:
              name: Foo
              ssn: 1234
        - path-parameters:
            userId: user-4567
          response:
            body:
              name: Foo
              ssn: 4567
components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        ssn:
          type: integer
```

### Code samples

If you'd like to specify custom code samples for your example, use `code-samples`.

```yaml title="openapi.yml" {11-16}
paths:
  /users/{userId}:
    get:
      x-fern-examples:
        - path-parameters:
            userId: user-1234
          response:
            body:
              name: Foo
              ssn: 1234
          code-samples:
            - sdk: typescript
              code: |
                import { UserClient } from "...";

                client.users.get("user-1234")
```

If you're on the Fern Starter plan or higher for SDKs you won't have to worry about manually adding code samples! Our generators do that for you.

## Availability

The `x-fern-availability` extension is used to mark the availability of an endpoint. The availability information propagates into the generated Fern Docs website as visual tags.

The options are:

* `beta`
* `generally-available`
* `deprecated`

The example below marks that the `POST /pet` endpoint is `deprecated`.

```yaml title="x-fern-availability in openapi.yml" {4}
paths:
  /pet:
    post:
      x-fern-availability: deprecated
```

This renders as:


  ![Screenshot of API Reference endpoint with tag showing deprecated](https://fern-image-hosting.s3.amazonaws.com/fern/x-fern-availability-example.png)


### Request new extensions

If there's an extension you want that doesn't already exist, file an [issue](https://github.com/fern-api/fern/issues/new) to start a discussion about it.


# Overlay customizations on an existing OpenAPI spec

> Can't directly modify your OpenAPI spec? No worries, use an overrides file instead.

If you generate your OpenAPI from server code, you may want to tweak your OpenAPI Spec without having to
touch the generated file.  Fern supports this via an `overrides` file.


  ```yml openapi.yml
  paths: 
   /users: 
     post: 
      description: Create a User
      operationId: users_post
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  ```

  ```yml title="overrides.yml" {4-5}
  paths: 
   /users: 
     post: 
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: create
  ```

  ```yml title="combined" {4-5}
  paths: 
   /users/post: 
    post: 
      x-fern-sdk-group-name: users
      x-fern-sdk-method-name: create      
      description: Create a User
      operationId: users_post
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'   
  ```


## Configuration

Follow the steps below to configure your OpenAPI overrides:


  ### Create an `overrides.yml`

  Simply create a yaml file and write down all the overrides you want to add:

  ```yaml overrides.yml 
  paths:
    /v1/history:
      get:
        x-fern-sdk-group-name:
          - history
        x-fern-sdk-method-name: get_all    
  ```

  ### Reference the file in your `generators.yml`

  ```yml generators.yml
  api: 
    path: ../openapi.yml
    overrides: ../overrides.yml 
  ```

  
     The format of the overrides file is independent from the spec. For example, even if your OpenAPI spec is in JSON format, you can write the overrides in yaml. 
  



# Automatically Update

> Pull your latest OpenAPI Specification into your Fern Folder automatically.

If you host your OpenAPI Specification at a publically available URL, you can have Fern programmatically fetch the latest spec on a preconfigured cadence. By default, this will be done every day and open a new PR on the GitHub repo that contains your Fern Folder. This feature requires installation of the [Fern GitHub App](https://github.com/apps/fern-api).

```yml title="generators.yml"
api:
  path: openapi/openapi.json
  origin: https://example.com/openapi.json
```


# FastAPI Instrumentation

> Learn about best practices for creating rich OpenAPI Specifications when instrumenting FastAPI applications.

[FastAPI](https://fastapi.tiangolo.com/) is a popular Python web framework developed by [tiangolo](https://github.com/tiangolo).

The offering brands itself as

> FastAPI is a modern, fast (high-performance), web framework for building APIs with Python based on standard Python type hints.

FastAPI plays very nicely with Fern because it has the power to output OpenAPI Specifications! Below we'll outline some tips for generating a rich OpenAPI with FastAPI.

## OpenAPI generation

By default, FastAPI will generate an OpenAPI Specification for you based on your routes and your data models! You can access this spec by visiting `/docs` on your FastAPI server.

If you are not seeing any OpenAPI Specification (or the Swagger UI), you may need to review your FastAPI server configuration as the path may have been changed, or completely omitted.

```python {6-8}
from fastapi import FastAPI

...

FastAPI(
    openapi_url="/openapi.json",  # <-- this is the file and URL needed to access the OpenAPI Specification, `docs_url` and `redoc_url` are convenient wrappers that display the file in a UI!
    docs_url="/docs",             # <-- this is the URL to access the Swagger UI, which will point to your OpenAPI Specification
    redoc_url="/redoc"            # <-- this is the URL to access the ReDoc UI, which will point to your OpenAPI Specification
)
```

## Specifying servers

Fern will automatically generate clients that point to the servers you configure within your OpenAPI Specification, so it's important to specify the servers that your API will be hosted on.

```python {5}
from fastapi import FastAPI

...

app = FastAPI(servers=[{"url": "http://prod.test.com", "description": "Production server"}])
# This creates the following server object in your OpenAPI Specification:
# "servers":[{"url":"http://prod.test.com","description":"Production server"}],
```

## OpenAPI extensions

FastAPI allows you to add in extra OpenAPI configuration directly within your route, through the use of the `openapi_extra` parameter.
Below, we've annotated a "good" route within FastAPI that has it's typings as well as Fern extensions to assist in naming.

```python {5-9}
@router.post(
    "/your/post/endpoint",
    response_model=YourResponseModel,            #  <-- with FastAPI, it is important to specify your response model so that it comes through to the OpenAPI Specification
    summary="Get some response for your req",    #  <-- if you'd like to add a description to your endpoint, you can do so here
    openapi_extra={                              #  <-- finally, you can add in your Fern extensions here, these extensions will produce SDK code that looks something like: `client.endpoints.create(...)` in python
        "x-fern-sdk-method-name": "create",
        "x-fern-sdk-group-name": "endpoints",
        "x-fern-availability": "beta",
    },
)
async def your_post_endpoint(
    payload: YourRequestModel,
) -> YourResponseModel:
```

## Specifying examples

FastAPI allows you to specify examples for your data models, which Fern will pick up and use within your generated SDKs and documentation automatically.

For more information on leveraging examples within Fern, please refer to the [Fern documentation](/learn/api-definition/openapi/extensions/others#request--response-examples).

For more information on this FastAPI functionality, please refer to the [FastAPI documentation](https://fastapi.tiangolo.com/tutorial/schema-extra-example/).

```python {7-11}
from pydantic import BaseModel

class MyObject(BaseModel):
    id: str

    class Config:
        schema_extra = {
            "example": {
                "id": "a-cool-uuid",
            }
        }
```

## Additional customization

FastAPI has a lot of flexibility in how you can customize your OpenAPI Specification. Please refer to the [FastAPI documentation](https://fastapi.tiangolo.com/how-to/extending-openapi/#modify-the-openapi-schema) for more information.


# What is a Fern Definition?

> A Fern Definition is a set of YAML files that describe your API.

A Fern Definition is a set of YAML files that are the single source of truth for your API. You check your Fern Definition into your repo,
inside of which describes your API requests, responses, models, paths, methods, errors, and authentication scheme.


  Want to use OpenAPI instead? No worries, we support that [as well](/learn/api-definition/introduction/what-is-an-api-definition#openapi-swagger)


## Fern Definition structure

To initialize a Fern Definition, simply run:

```sh
npm install -g fern-api
fern init
```

This will create the following folder structure in your project:

```bash
fern/
├─ fern.config.json # root-level configuration
├─ generators.yml # generators you're using
└─ definition/
  ├─ api.yml  # API-level configuration
  └─ imdb.yml # endpoints, types, and errors
```

## Definition file

Each **Fern Definition** file may define:

* **[Custom types](/learn/api-definition/fern/types)**. Use **custom types** to build your data model.
* **[Endpoints](/learn/api-definition/fern/endpoints)**. A **service** is a set of related REST endpoints.
* **[Errors](/learn/api-definition/fern/errors)**. An **error** represents a failed (non-200) response from an endpoint.
* **[Imports](/learn/api-definition/fern/imports)**. Use **imports** to share types across files.

```yml imdb.yml maxLines=0
service:
  auth: false
  base-path: /movies
  endpoints:
    createMovie:
      docs: Add a movie to the database
      method: POST
      path: /create-movie
      request: CreateMovieRequest
      response: MovieId

    getMovie:
      method: GET
      path: /{movieId}
      path-parameters:
        movieId: MovieId
      response: Movie
      errors:
        - NotFoundError
        - UnauthorizedError

types:
  Movie:
    properties:
      title: string
      rating:
        type: double
        docs: The rating scale from one to five stars
      id:
        type: MovieId
        docs: The unique identifier for a movie

  CreateMovieRequest:
    properties:
      title: string
      rating: double

errors:
  NotFoundError:
    http:
      statusCode: 404
    type:
      properties:
        id: MovieId

  UnauthorizedError:
    http:
      statusCode: 401
```

## Why another format?

Google built gRPC. Amazon built Smithy. Facebook built GraphQL. Palantir built
Conjure. These companies rejected OpenAPI in favor of a more concise API Definition Language.

We built Fern to productize this design and make it accessible to all
software companies.


  Despite being a different format for describing APIs, **you are never locked in to Fern.** It's easy to convert your
  [Fern Definition to OpenAPI](/learn/api-definition/fern/export-openapi).



# Authentication

> Model auth schemes such as bearer, basic, custom headers, and oauth.

Configuring authentication schemes happens in the `api.yml` file.

```bash {5}
fern/
├─ fern.config.json # root-level configuration
├─ generators.yml # generators you're using
└─ definition/
  ├─ api.yml  # API-level configuration
  └─ imdb.yml # endpoints, types, and errors
```

To add an authentication scheme, specify the authentication method under the `auth-schemes` section.

```yaml api.yml {1-2}
auth-schemes:
  AuthScheme:                     
    ...
```


  To apply an authentication scheme across all endpoints, reference the `auth-scheme` within the `auth` section of your `api.yml` file.

  ```yaml api.yml {1}
  auth: AuthScheme                  
  auth-schemes:
    AuthScheme:                     
      ...
  ```


## Bearer authentication

Start by defining a `Bearer` authentication scheme in `api.yml`:

```yaml api.yml
auth: Bearer                  
auth-schemes:
  Bearer:                     
    scheme: bearer
```

This will generate an SDK where the user would have to provide
a mandatory argument called `token`.

```ts index.ts
const client = new Client({
  token: "ey34..."
})
```

If you want to control variable naming and the environment variable to scan,
use the configuration below:

```yaml title="api.yml" {5-7}
auth: Bearer                  
auth-schemes:
  Bearer:                     
    scheme: bearer
    token:
      name: apiKey 
      env: PLANTSTORE_API_KEY
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_API_KEY
let client = new Client(); 

// token has been renamed to apiKey
client = new Client({
  apiKey: "ey34..."
})
```

## Basic authentication

Start by defining a `Basic` authentication scheme in `api.yml`:

```yaml api.yml
auth: Basic                  
auth-schemes:
  Basic:                     
    scheme: basic
```

This will generate an SDK where the user would have to provide
a mandatory arguments called `username` and `password`.

```ts index.ts
const client = new Client({
  username: "joeschmoe"
  password: "ey34..."
})
```

If you want to control variable naming and environment variables to scan,
use the configuration below:

```yaml title="api.yml" {5-11}
auth: Basic                  
auth-schemes:
  Basic:                     
    scheme: basic
    username:
      name: clientId
      env: PLANTSTORE_CLIENT_ID
    password:
      name: clientSecret
      env: PLANTSTORE_CLIENT_SECRET
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_CLIENT_ID and process.env.PLANTSTORE_CLIENT_SECRET
let client = new Client(); 

// parameters have been renamed
client = new Client({
  clientId: "joeschmoe", 
  clientSecret: "ey34..."
})
```

## Custom header (e.g. API key)

You can also create your own authentication scheme with customized headers.

```yaml title="api.yml" {3-5}
auth: ApiKeyAuthScheme
auth-schemes:
  ApiKeyAuthScheme:
    header: X-API-Key
    type: string
```

This will generate an SDK where the user would have to provide
a mandatory argument called `apiKey`.

```ts index.ts
const client = new Client({
  xApiKey: "ey34..."
})
```

If you want to control variable naming and environment variables to scan,
use the configuration below:

```yaml title="api.yml" {7-8}
auth: ApiKeyAuthScheme
auth-schemes:
  ApiKeyAuthScheme:
    header: X-API-Key
    type: string
    name: apiKey
    env: PLANTSTORE_API_KEY
```

The generated SDK would look like:

```ts index.ts

// Uses process.env.PLANTSTORE_API_KEY
let client = new Client(); 

// parameters have been renamed
client = new Client({
  apiKey: "ey34..."
})
```

## OAuth client credentials

If your API uses OAuth, you can specify an oauth scheme. Note that you'll need to define a token retrieval endpoint.

```yaml api.yml
name: api

imports:
  auth: auth.yml

auth: OAuthScheme
auth-schemes:
  OAuthScheme:
    scheme: oauth
    type: client-credentials
    client-id-env: YOUR_CLIENT_ID
    client-secret-env: YOUR_CLIENT_SECRET
    get-token:
      endpoint: auth.getToken               
      response-properties:
        access-token: $response.access_token 
        expires-in: $response.expires_in    

```

If the `expires-in` property is set, the generated OAuth token provider will automatically refresh the token when it expires.
Otherwise, it's assumed that the access token is valid indefinitely.

With this, all of the OAuth logic happens automatically in the generated SDKs. As long as you configure these settings, your
client will automatically retrieve an access token and refresh it as needed.

When using the docs playground, `token-header` and `token-prefix` can optionally be set to customize the header key name and
header value prefix, to match the expected format of the API auth scheme.

For example, the following would produce a header `Fern-Authorization: Fern-Bearer `:

```yaml api.yml {5-6}
auth-schemes:
  OAuthScheme:
    scheme: oauth
    type: client-credentials
    token-header: Fern-Authorization
    token-prefix: Fern-Bearer
    get-token:
      ...   
```


# Types in Fern Definition

> Types describe the data model of your API. Fern has many built-in types and supports custom types, as well as extending and aliasing objects, and unions.

Types describe the data model of your API.

## Built-in types

* `string`
* `integer`
* `long`
* `double`
* `boolean`
* `datetime` *An [RFC 3339, section 5.6 datetime](https://ijmacd.github.io/rfc3339-iso8601/). For example, `2017-07-21T17:32:28Z`.*
* `date` *An RFC 3339, section 5.6 date (YYYY-MM-DD). For example, `2017-07-21`.*
* `uuid`
* `base64`
* `list` *e.g., list\*
* `set` *e.g., set\*
* `map` *e.g., map\*
* `optional` *e.g., optional\*
* `literal` *e.g., literal\<"Plants">*
* `file` *e.g., [file uploads](/learn/api-definition/fern/endpoints/multipart)*
* `unknown` *Represents arbitrary JSON.*

## Custom types

Creating your own types is easy in Fern!

### Objects

The most common custom types are **objects**.

In Fern, you use the `"properties"` key to create an object:

```yaml {3,8}
types:
  Person:
    properties:
      name: string
      address: Address

  Address:
    properties:
      line1: string
      line2: optional
      city: string
      state: string
      zip: string
      country: literal<"USA">
```

These represent JSON objects:

```json
{
  "name": "Alice",
  "address": {
    "line1": "123 Happy Lane",
    "city": "New York",
    "state": "NY",
    "zip": "10001",
    "country": "USA"
  }
}
```

You can also use **extends** to compose objects:

```yaml {6}
types:
  Pet:
    properties:
      name: string
  Dog:
    extends: Pet
    properties:
      breed: string
```

You can extend multiple objects:

```yaml {3-5}
types:
  GoldenRetriever:
    extends:
      - Dog
      - Pet
    properties:
      isGoodBoy: boolean
```

### Aliases

An Alias type is a renaming of an existing type. This is usually done for clarity.

```yaml
types:
  # UserId is an alias of string
  UserId: string

  User:
    properties:
      id: UserId
      name: string
```

### Enums

An enum represents a string with a set of allowed values.

In Fern, you use the `"enum"` key to create an enum:

```yaml {3}
types:
  WeatherReport:
    enum:
      - SUNNY
      - CLOUDY
      - RAINING
      - SNOWING
```

Enum names are restricted to `A-Z`, `a-z`, `0-9`, and `_` to ensure that generated code can compile across all of the languages that Fern can output. If you have an enum that doesn't follow this convention, you can use the `"name"` key to specify a custom name:

```yaml
types:
  Operator:
    enum:
      - name: LESS_THAN # <--- the name that will be used in SDKs
        value: '<' # <--- the value that will be serialized
      - name: GREATER_THAN
        value: '>'
      - name: NOT_EQUAL
        value: '!='
```

### Discriminated Unions

Fern supports tagged unions (a.k.a. discriminated unions). Unions are useful for
polymorphism. This is similar to the `oneOf` concept in OpenAPI.

In Fern, you use the `"union"` key to create an union:

```yaml {3-5}
types:
  Animal:
    union:
      dog: Dog
      cat: Cat
  Dog:
    properties:
      likesToWoof: boolean
  Cat:
    properties:
      likesToMeow: boolean
```

In JSON, unions have a **discriminant property** to differentiate between
different members of the union. By default, Fern uses `"type"` as the
discriminant property:

```json
{
  "type": "dog",
  "likesToWoof": true
}
```

You can customize the discriminant property using the "discriminant" key:

```yaml {3}
 types:
   Animal:
     discriminant: animalType
     union:
       dog: Dog
       cat: Cat
   Dog:
     properties:
       likesToWoof: boolean
   Cat:
     properties:
       likesToMeow: boolean
```

This corresponds to a JSON object like this:

```json
{
  "animalType": "dog",
  "likesToWoof": true
}
```

### Undiscriminated Unions

Undiscriminated unions are similar to discriminated unions, however you don't
need to define an explicit discriminant property.

```yaml
MyUnion:
  discriminated: false
  union:
    - string
    - integer
```

### Generics

Fern supports shallow generic objects, to minimize code duplication. You can
define a generic for reuse like so:

```yaml
MySpecialMapItem:
  properties:
    key: Key, 
    value: Value,
    diagnostics: string
```

Now, you can instantiate generic types as a type alias:

```yml
StringIntegerMapItem:
  type: Response

StringStringMapItem:
  type: Response
```

You can now freely use this type as if it were any other type! Note, generated
code will not use generics. The above example will be generated in typescript as:

```typescript
type StringIntegerMapItem = {
  key: string,
  value: number,
  diagnostics: string
}   
 
type StringStringMapItem = {
  key: string,
  value: string,
  diagnostics: string
}
```

### Documenting types

You can add documentation for types. These docs are passed into the compiler,
and are incredibly useful in the generated outputs (e.g., docstrings in SDKs).


  ```yaml
  types:
    Person:
      docs: A person represents a human being
      properties:
        name: string
        age:
          docs: age in years
          type: integer
  ```



  ```typescript
  /**
   * A person represents a human being
   */
  interface Person {
    name: string;
    // age in years
    age: number;
  }
  ```



# Endpoints in Fern Definition

> Organize related API endpoints into a service in Fern Definition and define each endpoint's URL, HTTP method, request, response, errors, and more.

In Fern, you organize related endpoints into a **Service**. This grouping
improves clarity and makes the generated SDKs more idiomatic.

## Service definition

Each service defines:

1. A **base-path**: A common prefix for all the endpoints' HTTP paths
2. Whether the service requires [authentication](/learn/api-definition/fern/authentication)
3. **Endpoints**


  ```yaml
    service: 
      base-path: /users 
      auth: false 
      endpoints: {}
  ```



  To define a service with an empty base path use the empty string: `base-path: ""`


## Endpoints

An endpoint includes:

* A **URL path** *(Optionally including path parameters)*
* A **Display Name** *(Optional)*
* An **HTTP Method**
* **Request information** *(Optional)*
  * **Query-parameters**
  * **Headers**
  * **Request body**
* **Successful (200) response** information *(Optional)*
* **Error (non-200) responses** that this endpoint might return *(Optional)*

## URL path

Each endpoint has a URL path.


  ```yaml {6}
  service:
    base-path: /users
    auth: false
    endpoints:
      getAllUsers:
        path: /all
        method: GET
  ```


The full path for the endpoint is the concatenation of:

* The [environment](/learn/api-definition/fern/api-yml/environments) URL
* The service `base-path`
* The endpoint `path`

## Display name

The display name will appear as the title of an endpoint. By default, the display name is equal to the 'Title Case' of the endpoint name. If you would like to customize the endpoint name, you can **set the display name**.

In the example below, ["Add a new plant to the store"](https://plantstore.dev/api-reference/plant/add-plant) displays as the title of the endpoint page within the API Reference.


  ```yaml {7}
  service:
    base-path: /v3
    auth: false
    endpoints:
      addPlant:
        path: /plant
        display-name: Add a new plant to the store
        method: POST
  ```


## Path parameters

Supply path parameters for your endpoints to create dynamic URLs.


  ```yaml {6-8}
  service:
    base-path: /users
    auth: false
    endpoints:
      getUser:
        path: /{userId} 
        path-parameters: 
          userId: string
        method: GET
  ```


Services can also have path-parameters:


  ```yaml {2-4}
  service: 
    base-path: /projects/{projectId}
    path-parameters: 
      projectId: string 
    auth: false 
    endpoints: 
      ...
  ```


## Query parameters

Each endpoint can specify query parameters:


  ```yaml
  service:
    base-path: /users
    auth: false
    endpoints:
      getAllUsers:
        path: /all
        method: GET
        request:
          # this name is required for idiomatic SDKs
          name: GetAllUsersRequest
          query-parameters:
            limit: optional
  ```


### `allow-multiple`

Use `allow-multiple` to specify that a query parameter is allowed
multiple times in the URL, as in `?filter=jane&filter=smith`. This will alter
the generated SDKs so that consumers can provide multiple values for the query
parameter.


  ```yaml {5}
    ...
    query-parameters:
      filter:
        type: string
        allow-multiple: true
  ```


## Auth

Each endpoint can override the auth behavior specified in the service.


  ```yaml
  service: 
    base-path: /users 
    auth: false 
    endpoints: 
      getMe: 
        path: "" 
        method: GET 
        # This endpoint will be authed 
        auth: true 
        docs: Return the current user based on Authorization header. 
  ```


## Headers

Each endpoint can specify request headers:


  ```yaml
  service: 
    base-path: /users 
    auth: false 
    endpoints: 
      getAllUsers: 
        path: /all
        method: GET 
        request: 
          # this name is required for idiomatic SDKs name:
          name: GetAllUsersRequest 
          headers: 
            X-Endpoint-Header: string
  ```


Services can also specify request headers. These headers will cascade to the service's endpoints.


  ```yaml {4-5} 
  service: 
    base-path: /users 
    auth: false 
    headers: 
      X-Service-Header: string 
    endpoints: 
      getAllUsers: 
        path: /all 
        method: GET 
        request: 
          # this name is required for idiomatic SDKs 
          name: GetAllUsersRequest 
          headers: 
            X-Endpoint-Header: string
  ```


## Request body

Endpoints can specify a request body type.


  ```yaml {10}
  service:
    base-path: /users
    auth: false
    endpoints:
      setUserName:
        path: /{userId}/set-name
        path-parameters:
          userId: string
        method: POST
        request: string
  ```


### Inlining a request body

If the request body is an object, you can **inline the type declaration**. This
makes the generated SDKs a bit more idiomatic.


  ```yaml
  service: 
    base-path: /users 
    auth: false 
    endpoints: 
      createUser: 
        path: /create 
        method: POST 
        request: 
          # this name is required for idiomatic SDKs 
          name: CreateUserRequest 
          body: 
            properties: 
              userName: string
  ```


## Success response

Endpoints can specify a `response`, which is the type of the body that will be
returned on a successful (200) call.


  ```yaml
  service:
    base-path: /users
    auth: false
    endpoints:
      getAllUsers:
        path: /all
        method: GET
        response: list

  types:
    User:
      properties:
        userId: string
        name: string
  ```


## Response status codes

You can also use the `status-code` field to specify a custom status code
for a success response.


  ```yaml {11}
  service:
    base-path: /users
    auth: false
    endpoints:
      create: :
        path: ""
        method: POST
        request: CreateUserRequest
        response: 
          type: User
          status-code: 201

  types:
    User:
      properties:
        userId: string
        name: string
  ```


## Error responses

Endpoints can specify error responses, which detail the non-200 responses that
the endpoint might return.


  ```yaml
  service:
    base-path: /users
    auth: false
    endpoints:
      getUser:
        path: /{userId}
        path-parameters:
          userId: string
        method: GET
        response: User
        errors:
          - UserNotFoundError

  types:
    User:
      properties:
        userId: string
        name: string

  errors:
    UserNotFoundError:
      status-code: 404
  ```


You can learn more about how to define errors on the [Errors](/learn/api-definition/fern/errors) page.

## Specifying examples

When you declare an example, you can also specify some examples of how that
endpoint might be used. These are used by the compiler to enhance the generated
outputs. Examples will show up as comments in your SDKs, API documentation, and Postman collection.

You may add examples for endpoints, types, and errors.


  ```yaml {13-19}
  service:
    base-path: /users
    auth: false
    endpoints:
      getUser:
        path: /{userId}
        path-parameters:
          userId: string
        method: GET
        response: User
        errors:
          - UserNotFoundError
        examples:
          - path-parameters:
              userId: alice-user-id
            response:
              body:
                userId: alice-user-id
                name: Alice

  types:
    User:
      properties:
        userId: string
        name: string

  errors:
    UserNotFoundError:
      status-code: 404
  ```


If you're adding an example to an endpoint and the type already has an example, you can reference it using `$`.

```yaml
service:
  auth: true
  base-path: /address
  endpoints:
    create:
      method: POST
      path: ""
      request: CreateAddress
      response: Address
      examples:
        - request: $CreateAddress.WhiteHouse
          response:
            body: $Address.WhiteHouseWithID

  CreateAddress:
    properties:
      street1: string
      street2: optional
      city: string
      state: string
      postalCode: string
      country: string
      isResidential: boolean
    examples:
      - name: WhiteHouse
        value:
          street1: 1600 Pennsylvania Avenue NW
          city: Washington DC
          state: Washington DC
          postalCode: "20500"
          country: US
          isResidential: true

  Address:
    extends: CreateAddress
    properties:
      id:
        type: uuid
        docs: The unique identifier for the address.
    examples:
      - name: WhiteHouseWithID
        value:
          id: 65ce514c-41e3-11ee-be56-0242ac120002
          street1: 1600 Pennsylvania Avenue NW
          city: Washington DC
          state: Washington DC
          postalCode: "20500"
          country: US
          isResidential: true
```

Examples contain all the information about the endpoint call, including
the request body, path parameters, query parameters, headers, and response body.


  ```yaml
  examples: 
    - path-parameters: 
        userId: some-user-id 
      query-parameters:
        limit: 50 
      headers: 
        X-My-Header: some-value 
      response: 
        body: 
          response-field: hello
  ```


### Failed examples

You can also specify examples of failed endpoints calls. Add the `error`
property to a response example to designate which failure you're demonstrating.


  ```yaml {5}
  examples:
    - path-parameters:
        userId: missing-user-id
      response:
        error: UserNotFoundError

  errors:
    UserNotFoundError:
      status-code: 404
  ```


If the error has a body, then you must include the body in the example.


  ```yaml {6, 11}
  examples:
    - path-parameters:
        userId: missing-user-id
      response:
        error: UserNotFoundError
        body: "User with id `missing-user-id` was not found"

  errors:
    UserNotFoundError:
      status-code: 404
      type: string
  ```


### Referencing examples from types

To avoid duplication, you can reference examples from types using `$`.


  ```yaml {12}
  service:
    base-path: /users
    auth: true
    endpoints:
      getUser:
        method: GET
        path: /{userId}
        path-parameters:
          userId: UserId
        examples:
          - path-parameters:
              userId: $UserId.Example1

  types:
    UserId:
    type: integer
    examples: 
      - name: Example1
        value: user-id-123
  ```



# HTTP JSON Endpoints

Endpoints in Fern are defined underneath the `endpoints` key. Below is an example of defining
a single REST endpoint:

```yml title="users.yml" maxLines=0
service: 
  base-path: /users 
  auth: false 
  endpoints: 
    createUser: 
      path: /create 
      method: POST 
      request: 
        body: 
          properties: 
            userName: string
```

## Examples

You can provide examples of requests and responses by using the `examples` key.

```yaml {11-17}
service:
  base-path: /users
  auth: false
  endpoints:
    getUser:
      path: /{userId}
      path-parameters:
        userId: string
      method: GET
      response: User
      examples:
        - path-parameters:
            userId: alice-user-id
          response:
            body:
              userId: alice-user-id
              name: Alice
```


# Multipart File Upload

> Document endpoints with the `multiform` content type.

Endpoints in Fern are defined underneath the `endpoints` key. If your endpoint request includes file uploads, you can use the `file` type to indicate the request is of a `multiform` content type. The example below demonstrates an endpoint which includes a file in the request body.


  ```yaml {12}
  service:
    base-path: /documents
    auth: false
    endpoints:
      uploadDocument:
        path: /upload
        method: POST
        request:
          name: UploadDocumentRequest
          body:
            properties:
              file: file
  ```


Within a given multipart request, a string parameter with `format:binary` will represent an arbitrary file.

## List of Files

If your endpoint supports a list of files, then your request body must indicate such.


  ```yaml {12}
  service:
    base-path: /documents
    auth: false
    endpoints:
      uploadDocuments:
        path: /upload
        method: POST
        request:
          name: UploadDocumentsRequest
          body:
            properties:
              files: list
  ```



# Binary Data and Files

> Use the `bytes` type to handle binary data in your API


  The `bytes` type allows you to handle binary data in both requests and responses.


## Sending bytes

If your API needs to send a stream of bytes (i.e. typical for assets like audio, images and other files) then
you can use the `bytes` type in the Fern Definition to model this.

```yml audio.yml
service:
  base-path: /audio
  endpoints:
    upload:
      display-name: Upload audio
      method: POST
      path: /upload
      content-type: application/octet-stream
      request:
        type: bytes
        docs: The bytes of the MP3 file that you would like to upload
```

## Receiving bytes


  When handling binary data in responses, use `type: file` instead of `type: bytes`. The `bytes` type is only supported in requests.


On the other hand, if your API is returning a stream of bytes, then you can leverage the `bytes` type as a response.

```yml textToSpeech.yml
service:
  base-path: /tts
  endpoints:
    upload:
      display-name: Upload audio
      method: POST
      path: ""
      request:
        name: TTSRequest
        body:
          properties:
            text:
              type: string
              docs: The text that you want converted to speech.
      response:
        type: file
        docs: The bytes of the audio file.
```


# Server-Sent Events and Streaming APIs

> Use the `response-stream` key to model streaming endpoints


  Specifying `response-stream` on an endpoints allows you to represent endpoint responses that are streaming.


## JSON streaming

If your API returns a series of `JSON` chunks as seen below

```json
{ "text": "Hi, I am a" }
{ "text": "chatbot. Do you have any"}
{ "text": "questions for me"}
```

then simply specify the response under `response-stream` for your endpoint.

```yaml title="chat.yml" {4}
service:
  base-path: /chat
  endpoints:
    stream:
      method: POST
      path: ""
      response-stream: Chat

types:
  Chat:
    properties:
      text: string
```

## Server-sent events

If your API returns server-sent-events, with the `data` and `event` keys as seen below

```json
data: { "text": "Hi, I am a" }
data: { "text": "chatbot. Do you have any"}
data: { "text": "questions for me"}
```

then make sure to include `format: sse`.

```yaml title="chat.yml" {9}
service:
  base-path: /chat
  endpoints:
    stream:
      method: POST
      path: ""
      response-stream:
        type: Chat
        format: sse

types:
  Chat:
    properties:
      text: string        
```

## `Stream` parameter

It has become common practice for endpoints to have a `stream` parameter that
controls whether the response is streamed or not. Fern supports this pattern in a first
class way.

Simply specify the `stream-condition` as well as the ordinary response and the streaming response:

```yaml title="chat.yml" {7}
service:
  base-path: /chat
  endpoints:
    stream:
      method: POST
      path: ""
      stream-condition: $request.stream
      request:
        name: StreamChatRequest
        body: 
          properties: 
            stream: boolean
      response: Chat
      response-stream:
        type: ChatChunk
        format: sse

types:
  Chat:
    properties:
      text: string
      tokens: integer
  ChatChunk:
    properties:
      text: string
```


# Webhooks in the Fern Definition

> Learn how to define webhooks in the Fern Definition

In Fern, you can specify webhooks in your API definition. The webhooks will be included
in both the generated SDKs and the API documentation.

## Webhook definition

Each webhook defines:

1. **Method**: The HTTP Method that the webhook will use (either `GET` or `POST`)
2. **Headers**: The headers that the webhook will send
3. **Payload**: The schema of the webhook payload


  ```yaml {2-10}
  webhooks: 
    paymentNotification: 
      display-name: Payment Notification
      docs: Receive a notification when a payment changes status
      method: POST 
      headers: 
        X-Signature-Primary: 
          type: string 
          docs: An HMAC signature of the payload
      payload: PaymentNotificationPayload

  types: 
    PaymentNotificationPayload: 
      discriminant: notificationType
      union: 
        queued: QueuedPaymentNotification
        processing: ProcessingPaymentNotification
        completed: CompletedPaymentNotification
  ```


### Inlined payloads

You can inline the schema of the payload by doing the following:


  ```yaml
  webhooks: 
    paymentNotification: 
      display-name: Payment Notification
      docs: Receive a notification when a payment changes status
      method: POST 
      headers: 
        X-Signature-Primary: 
          type: string 
          docs: An HMAC signature of the payload
      payload:
        name: PaymentNotificationPayload
        properties: 
          id:
            type: string
            docs: The notification id
          amount: double
          currency: Currency
  ```



# WebSockets in the Fern Definition

> Learn how to define WebSockets in the Fern Definition

WebSockets enable a user to create a connection with a server, over which bidirectional communication can be sent.

In Fern, you can specify WebSockets in your API definition. The WebSockets will be included in both the generated SDKs and the API documentation.

## WebSocket definition

Each WebSocket is defined in its own file, where it is described by the `channel` object.

### The channel object

A `channel` is defined by the following fields:

* `auth`: The authentication scheme for the WebSocket
* `path`: The path of the WebSocket
* `headers` *(Optional)*: Any headers the WebSocket will send
* `path-parameters` *(Optional)*: Any path parameters in the WebSocket path
* `query-parameters` *(Optional)*: Any query parameters used in the initial request of the WebSocket
* `messages` *(Optional)*: The schemas of the messages the WebSocket can send and receive once connected
  * `origin`: The entity that sent the message (e.g. `client` or `server`)
  * `body`: The schema of the message
* `examples`: Example WebSocket connection *(Optional)*

### WebSocket example


  ```yaml
  channel:
    path: /chat
    auth: false
    query-parameters:
      model_id:
        type: optional
        docs: The unique identifier of the model.
      model_version:
        type: optional
        docs: The version number of the model.
    messages:
      publish:
        origin: client
        body: PublishEvent
      subscribe:
        origin: server
        body: SubscribeEvent
    examples: 
      - query-parameters: 
          model_id: "123"
        messages: 
          - type: publish
            body:
              text: "Hello, world."
          - type: subscribe
            body: 
              id: "23823049"
              message: "Hello there, how are you?"
  types:
    PublishEvent:
      docs: The input from the user to send through the WebSocket. 
      properties: 
        text: 
          type: string
          docs: The user text to send into the conversation. 
    SubscribeEvent:
      docs: The response from the server sent through the WebSocket.
      properties: 
        id: 
          type: string
          docs: The id of the message. 
        message:
          type: string
          docs: The message sent through the socket. 
  ```


## WebSocket API Reference

### WebSocket Reference

Fern renders a unique reference page for WebSockets. The **Handshake** section outlines the protocol for connecting with the server, while the **Send** and **Receive** sections outline the message schemas that can be sent between the client and server.


  The WebSocket Reference


### WebSocket Playground


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Users can connect to and use WebSockets from right within the API Reference (check one of Hume's WebSockets [here](https://dev.hume.ai/reference/empathic-voice-interface-evi/chat/chat)).


  WebSocket Playground



# Errors in Fern Definition

> Add errors representing failed responses from API endpoints in Fern Definition.

Errors represent failed (non-200) responses from endpoints.

An error has:

* An HTTP status code
* A body type *(Optional)*


  ```yaml
  errors:
    UserNotFoundError:
      status-code: 404
      type: UserNotFoundErrorBody

  types:
    UserNotFoundErrorBody:
      properties:
        requestedUserId: string
  ```



# Imports in Fern Definition

> Use imports to reference API types and errors from other Fern Definition files.

Imports allow you to reference types and errors from other files.

```yaml title="person.yml"
types:
  Person: ...
```

```yaml title="family.yml"
imports:
  person: ./path/to/person.yml
types:
  Family:
    properties:
      people: list # use an imported type
```

Note that you can only import files that exist in your Fern Definition (i.e., in the same `definition/` folder).


# Examples in Fern Definition

> Use Fern Definition to add API examples that are shown in comments of SDKs, API Reference documentation, and a Postman collection.

You can add examples for types and endpoints. Examples are shown as
comments in your SDKs, in the request & response of your documentation,
and in a Postman Collection.

## Validation

The Fern CLI validates that your examples match the expected types. The following won't compile:

```yaml
types:
  UserId:
    type: integer
    examples:
      - value: hello # not an integer
```

```bash CLI Error Message
[api]: example.yml -> types -> UserId -> examples[0]
       Expected example to be an integer. Example is: "hello"
```

## Referencing examples

You can reference an example from another type, endpoint, or error.

Just like types, you can compose examples. To reference an example from another
type, use `$`.

```yaml {14}
types:
  UserId:
    type: integer
    examples:
      - name: Example1
        value: user-id-123

  User:
    properties:
      id: UserId
      name: string
    examples:
      - value:
          id: $UserId.Example1
          name: Jane Smith
```

## Examples for types

### Objects

```yml
types:
  ShipTo:
    properties:
      street1: string
      street2: optional
      city: string
      state: string
      postalCode: string
      country: Country
      isResidential: boolean
    examples:
      - name: WhiteHouse
        value:
          street1: 1600 Pennsylvania Avenue NW
          city: Washington DC
          state: Washington DC
          postalCode: "20500"
          country: US
          isResidential: true
      - name: EmpireStateBuilding
        value:
          street1: 350 5th Ave
          street2: Attn: Maintenance Department
          city: New York
          state: NY
          postalCode: "10118"
          country: US
          isResidential: false
```


  ```typescript
  /**
   * Represents a shipping address.
   * 
   * The White House address
   * @example {
   *  street1: "1600 Pennsylvania Avenue NW",
   *  city: "Washington DC",
   *  state: "Washington DC",
   *  postalCode: "20500",
   *  country: "US",
   *  isResidential: true
   * }
   * 
   * * The Empire State Building address
   * @example {
   *  street1: "350 5th Ave",
   *  street2: "Attn: Maintenance Department",
   *  city: "New York",
   *  state: "NY",
   *  postalCode: "10118",
   *  country: "US",
   *  isResidential: false
   * }
   */
  type ShipTo = {
    street1: string;
    street2?: string;
    city: string;
    state: string;
    postalCode: string;
    country: Country;
    isResidential: boolean;
  };
  ```


### Lists

```yml
 Shipments:
    type: list
    examples:
      - name: Default
        value:
          - status: "InTransit"
            estimatedDeliveryDate: "2024-01-11"
          - status: "Delivered"
            estimatedDeliveryDate: "2024-01-13"
```

### Unions

#### Discriminated union

```yml
types:
  Animal:
    union:
      dog: Dog
      cat: Cat
    examples:
      - value:
          type: dog
          likesToWoof: true
  Dog:
    properties:
      likesToWoof: boolean
  Cat:
    properties:
      likesToMeow: boolean
```


  ```typescript
  /**
   * Represents an animal, which can be either a Dog or a Cat.
   *
   * Example of a Dog:
   * @example {
   *  type: "dog",
   *  likesToWoof: true
   * }
   */
  type Animal = Dog | Cat;
  ```


#### Undiscriminated union

```yml
types:
  Animal:
    discriminated: false
    union:
      - Dog
      - Cat
    examples:
      - value:
          likesToMeow: true
  Dog:
    properties:
      likesToWoof: boolean
  Cat:
    properties:
      likesToMeow: boolean
```


  ```typescript
  /**
   * Represents an Animal, which can be either a Dog or a Cat.
   *
   * Example of an Animal as a Cat:
   * @example {
   *  likesToMeow: true
   * }
   */
  type Animal = Dog | Cat;
  ```


### Aliases

```yml
types:
  UserId:
    docs: A unique identifier for a user
    type: string
    examples:
      - value: user-id-123
```


  ```typescript
  /** 
  * A unique identifier for a user * 
  * @example "user-id-123" 
  */ 
  type UserId = string; 
  ```


## Examples for endpoints

You can add examples of successful and error responses for your endpoints.
Examples can reference the examples of types to avoid duplication.

```yml
service:
  auth: true
  base-path: ""
  endpoints:
    CreateShippingLabel:
      docs: Create a new shipping label.
      method: POST
      path: /shipping
      request: CreateShippingLabelRequest
      response: ShippingLabel
      errors:
        - NotAuthorized
        - InsufficientFunds
      examples:
        # A successful response that doesn't reference other examples.
        - request:
            orderId: "online_789"
            weightInOunces: 5
          response:
            body:
              orderId: "online_789"
              weightInOunces: 5
              trackingNumber: "1Z26W8370303469306"
              price: 2.50

        # A successful response that uses references.
        - request: $CreateShippingLabelRequest.SuccessfulRequest
          response:
            body: $ShippingLabel.Default

        # An error response.
        - request: $CreateShippingLabelRequest.InsufficientFundsRequest
          response:
            error: InsufficientFunds
            body: $InsufficientFundsBody.Default

types:
  CreateShippingLabelRequest:
    properties:
      orderId: string
      weightInOunces: integer
    examples:
      - name: SuccessfulRequest
        value:
          orderId: "online_123"
          weightInOunces: 13
      - name: InsufficientFundsRequest
        value:
          orderId: "online_456"
          weightInOunces: 2000

  ShippingLabel:
    properties:
      orderId: string
      weightInOunces: integer
      trackingNumber: string
      price: double
    examples:
      - name: Default
        value:
          orderId: "online_123"
          weightInOunces: 13
          trackingNumber: "1Z12345E0205271688"
          price: 12.35

  InsufficientFundsBody:
    properties:
      message: string
    examples:
      - name: Default
        value:
          message: "Insufficient funds to create shipping label."

errors:
  NotAuthorized:
    status-code: 401
  InsufficientFunds:
    status-code: 422
    type: InsufficientFundsBody
```

## Examples for path parameters

```yml
service:
  auth: true
  base-path: ""
  endpoints:
    TrackShipment:
      docs: Track the status of a shipment.
      method: GET
      path: /shipping/{trackingNumber}
      path-parameters: 
        trackingNumber: string
      response: ShipmentStatus
      examples:
        - path-parameters: 
            trackingNumber: "1Z26W8370303469306"
          response:
            body:
              status: "InTransit"
              estimatedDeliveryDate: "2024-01-11"
```


# Audiences in Fern Definition

> Use audiences in your Fern Definition to segment your API for different groups of consumers.

Audiences are a useful tool for segmenting your API for different consumers. You can configure your Fern Docs to publish documentation specific to an `Audience`. You can use [audiences in your OpenAPI Specification](/learn/api-definition/openapi/audiences), too.

Common examples of audiences include:

* Internal consumers (e.g., frontend developers who use the API)
* Beta testers
* Customers

By default, if no audience is specified, it will be accessible to all consumers.

## Configuration

The Fern Definition has a first-class concept for marking different endpoints, types, and properties for different audiences.

To use audiences in your Fern Definition, add them to `api.yml`.

In the example below, we have created audiences for `internal`, `beta`, and `customer` groups:

```yaml title='api.yml' {2-5}
name: api 
audiences: 
  - internal 
  - beta 
  - customers
```

## Audiences for endpoints

To mark an endpoint for a particular consumer, add an `audience` with the relevant groups.

In this example, the `sendEmail` endpoint is only available to internal consumers:

```yaml title='user.yml' {6-7}
service:
  base-path: /users
  auth: true
  endpoints:
    sendEmail:
      audiences:
        - internal
      path: /send-email
      ...
```

## Audiences for types

Types can also be marked for different audiences.

In this example, the `Email` type is available to internal and beta consumers:

```yaml title='user.yml' {5-7}
Email: 
  properties:
    subject: string
    body: optional
  audiences: 
    - internal
    - beta
```

## Audiences for properties

Properties of a type can also be marked for different audiences.

In this example, the `to` property is available to beta consumers only:

```yaml title='user.yml' {8-9}
Email: 
  properties:
    subject: string
    body: optional
    to: 
      type: string
      docs: The recipient of the email
      audiences: 
        - beta
```

## Audiences for SDKs

In `generators.yml`, you can apply audience filters so that only certain
endpoints are passed to the generators.

The following example configures the SDKs to filter for `customers`:

```yaml title='generators.yml' {3-4}
groups:
  external:
    audiences:
      - customers
    generators: 
    ...
```

## Audiences with docs

If generating Fern Docs, update your `docs.yml` configuration to include your audiences.

The following example shows how to configure your `docs.yml` to publish documentation for the `customers` audience:


  ```yaml {3-4}
  navigation:
    - api: API Reference
      audiences:
        - customers
  ```



# Availability in Fern Definition

> Add availability to Fern Definition API services, endpoints, types, or properties to indicate their release status.

You can add `availability` to an endpoint, type, or property within your Fern Definition.

Availability can be:

* `in-development` which means it is being worked on; will show a `Beta` tag
* `pre-release` which means it is available; will show a `Beta` tag
* `deprecated` which means it will be removed in the future; will show a `Deprecated` tag
* `generally-available` which means it is stable and available for use; will show a `GA` tag

## Endpoint


  ```yaml {6}
  service:
    base-path: /pet
    auth: true
    endpoints:
      add:
        availability: deprecated
        display-name: Add pet
        docs: Add a new Pet to the store
        method: POST
        path: ""
        request: AddPetRequest
        response: Pet
  ```


In Fern Docs, this will look like:


  ![Screenshot showing a deprecated tag next to an endpoint in API Reference docs](https://fern-image-hosting.s3.amazonaws.com/endpoint-deprecated.png)


## Type


  ```yaml {15}
    Pet:
      properties:
        id: 
          type: integer
          docs: A unique ID for the Pet
        name: 
          type: string
          docs: The first name of the Pet
        photoUrls: 
          type: list
          docs: A list of publicly available URLs featuring the Pet
          availability: generally-available
        category: 
          type: optional
          availability: pre-release

    Category:
      properties:
        id: optional
        name: optional
  ```


In Fern Docs, this will look like:


  ![Screenshot showing a beta tag next to a type in API Reference docs](https://fern-image-hosting.s3.amazonaws.com/type-beta.png)


## Property


  ```yaml {12}
    Pet:
      properties:
        id: 
          type: integer
          docs: A unique ID for the Pet
        name: 
          type: string
          docs: The first name of the Pet
        photoUrls: 
          type: list
          docs: A list of publicly available URLs featuring the Pet
          availability: deprecated
        category: optional
  ```


In Fern Docs, this will look like:


  ![Screenshot showing a deprecated tag next to a type's property in API Reference docs](https://fern-image-hosting.s3.amazonaws.com/property-deprecated.png)



# The api.yml configuration file

> The api.yml file contains general API configuration when using the Fern Definition format.

A `fern/` folder has a special file called `api.yml`, which includes all the API-wide configuration.

```bash {5}
fern/
├─ fern.config.json
├─ generators.yml
└─ definition/
  ├─ api.yml
  ├─ pet.yml
  ├─ store.yml
  └─ user.yml
```

## API name

This name is used to uniquely identify your API in your organization. If you just have one API, then `api` is a sufficient name.


  ```yaml
  name: api
  ```


## API description

You can define a top level API description. This description will come through in the OpenAPI Specification and Postman collection.


  ```yaml {2-4}
  name: api
  docs: | 
    ## Header
    This API provides access to...
  ```


## API version

You can define your header-based API versioning scheme, such as an `X-API-Version`. The supported versions
and default value are specified like so:


  ```yaml
  version:
    header: X-API-Version
    default: "2.0.0"
    values:
      - "1.0.0"
      - "2.0.0"
      - "latest"
  ```



# Environments

> List environments like production, staging, and development.

You can specify the environments where your server is deployed.

## Single URL environments

```yaml title="api.yml"
name: api
environments:
  Production: https://www.yoursite.com
  Staging:
    docs: This staging environment is helpful for testing!
    url: https://www.staging.yoursite.com
```

## Multiple URLs per environment

You can specify multiple URLs per environment. This is helpful if you have a
microservice architecture, and you want a single SDK to interact with multiple
servers.

```yaml title="api.yml"
environments:
  Production:
    urls:
      Auth: https://auth.yoursite.com
      Plants: https://plants.yoursite.com
  Staging:
    urls:
      Auth: https://auth.staging.yoursite.com
      Plants: https://plants.staging.yoursite.com
```

If you choose to use this feature, you must specify a `url` for each service you define:

```yaml title="auth.yml"
service:
  url: Auth
  base-path: /auth
  ...
```

## Default environment

You can also provide a default environment:

```yaml title="api.yml"
name: api
environments:
  Production: https://www.yoursite.com
  Staging:
    docs: This staging environment is helpful for testing!
    url: https://www.staging.yoursite.com
default-environment: Production
```


   By providing a default environment, the generated SDK will be setup to hit that URL out-of-the-box. 


## Base path

If you would like all of your endpoints to be prefixed with a path, use `base-path`.

In the example below, every endpoint is prefixed with a `/v1`:

```yaml title="api.yml"
name: api
base-path: /v1
```

## Audiences

If you have listed environments that you want to filter, you can leverage audiences.

```yaml title="api.yml"
audiences:
  - public

environments:
  Dev: 
    url: https://api.dev.buildwithfern.com
  Prod: 
    url: https://api.buildwithfern.com
    audiences:
      - external
```


# Global Configuration

> Specify global headers, path parameters or query parameters meant to be included on every request.

The `api.yml` configuration supports global configuration like headers and path parameters.

## Global headers

You can specify headers that are meant to be included on every request:


  ```yaml
  name: api
  headers:
    X-App-Id: string
  ```


## Global path parameters

You can specify path parameters that are meant to be included on every request:


  ```yaml
  name: api
  base-path: /{userId}/{orgId}
  path-parameters:
    userId: string
    orgId: string
  ```


### Overriding the base path

If you have certain endpoints that do not live at the configured `base-path`, you can
override the `base-path` at the endpoint level.

```yml imdb.yml {5}
service: 
  endpoints: 
    getMovie: 
      method: POST
      base-path: "override/{arg}"
      path: "movies/{movieId}"
      path-parameters: 
        arg: string
```

## Global query parameters

You cannot yet specify query parameters that are meant to be included on every request.
If you'd like to see this feature, please upvote [this issue](https://github.com/fern-api/fern/issues/2930).


# Errors

> Specify error types and schemas

In order to generate SDKs idiomatically, Fern needs to know how to differentiate
between different errors when parsing an endpoint response.

### Discriminate by status code

You can specify Fern to discriminate by status code. This means on each
endpoint, every error that's listed must have a different HTTP status code.


  ```yaml
  name: api
  error-discrimination:
    strategy: status-code
  ```


### Discriminate by error name

You can specify Fern to discriminate by error name. If you select this strategy,
then Fern will assume that every error response has an extra property denoting
the error name.

If you use Fern to generate server-side code, then this option provides
the most flexibility. Otherwise, you'll probably want to use the status code
discrimination strategy.


  ```yaml
  name: api
  error-discrimination:
    strategy: property
    property-name: errorName
  ```


### Global errors

You can import and list errors that will be thrown by every endpoint.


  ```yaml
  imports:
    commons: commons.yml

  errors:
    - commons.NotFoundError
    - commons.BadRequestError
  ```



# Packages in Fern Definition

> Fern Definition enables the reuse of API type and error names across packages, and can configure the structure of your API documentation.

## What is a package?

Every folder in your API definition is a package.


  ```bash
  fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/ # <--- root package
    ├─ api.yml
    ├─ projects.yml
    └─ roles/ # <--- nested package
      └─ admin.yml
  ```


The generated SDK will match the hierarchy of your API definition.


  ```ts
  const client = new Client();

  // calling endpoint defined in projects.yml
  client.projects.get();

  // calling endpoint defined in roles/admin.yml
  client.roles.admin.get();
  ```


## Package configuration

Each package can have a special definition file called `__package__.yml`. Like any
other definition file, it can contain [imports](/learn/api-definition/fern/imports),
[types](/learn/api-definition/fern/types), [endpoints](/learn/api-definition/fern/endpoints),
and [errors](/learn/api-definition/fern/errors).

Endpoints in `__package__.yml` will appear at the root of the package.
For example, the following generated SDK:


  ```ts
  const client = new Client();

  client.getProjects();
  ```


would have a `fern/` folder:


  ```bash {5}
  fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/
    ├─ __package__.yml
    └─ roles.yml
  ```


that contains the following `__package__.yml`:


  ```yaml
  service:
    base-path: ""
    auth: false
    endpoints:
      getProjects:
        method: GET
        path: ""
        response: list
  ```


## Namespacing

Each package has its own namespace. This means you can reuse type names and
error names across packages.

This is useful when versioning your APIs. For example, when you want to
increment your API version, you can copy the existing API
to a new package and start making changes. If the new API version reuses
certain types or errors, that's okay because the two APIs live in different
packages.


  ```bash
  fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/
    ├─ api.yml
    └─ roles/
        └─ v1/
          └─ admin.yml # type names can overlap with v2/admin.yml
        └─ v2/
          └─ admin.yml
  ```


## Navigation

`__package__.yml` also allows you to configure the navigation order
of your services. This is relevant when you want to control the display
of your documentation.

For example, let's say you have the following `fern/` folder:


  ```bash
  fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/
    ├─ projects.yml
    ├─ roles.yml
    └─ users.yml
  ```


Your API will be sorted alphabetically: projects, roles, then users. If you
want to control the navigation, you can add a `__package__.yml` file
and configure the order:


  ```bash
  fern/
  ├─ fern.config.json
  ├─ generators.yml
  └─ definition/
    ├─ __package__.yml # <--- New File
    ├─ projects.yml
    ├─ roles.yml
    └─ users.yml
  ```



  ```yaml
  navigation: 
    - users.yml
    - roles.yml
    - projects.yml
  ```



# Depending on other APIs

> Import API Definitions to generate unified SDKs

Fern allows you to import other APIs into your API.

This is often useful if:

* you want to reuse another API's types in your API
* you want to combine multiple microservices' APIs into one SDK (similar to the AWS SDK)

## Registering the dependency API

The first step is to **register** the API you want to depend on. To do this, use
the `register` command:

```
$ fern register
[some-dependency]: Uploading definition...
[some-dependency]: Registered @fern/some-dependency:0.0.1
```

## Depending on the registered API

To add a dependency on another API, you must add a `dependencies.yml` to declare which
APIs you wish to depend on.

```bash {4}
fern/
├─ fern.config.json
├─ generators.yml
├─ dependencies.yml
└─ definition/
  ├─ api.yml
  ├─ imdb.yml
```

Your `dependencies.yml` has a list of all the APIs you wish to depend:

```yaml dependencies.yml 
dependencies:
   "@fern/some-dependency": "0.0.1"
```

Next, you need create a folder in your Fern Definition to house the dependency. Inside the folder, create a special file
`__package__.yml` which specifies the dependency and version you want to add.

```bash {8-9}
fern/
├─ fern.config.json
├─ generators.yml
├─ dependencies.yml
└─ definition/
  ├─ api.yml
  ├─ imdb.yml
  └─ my-folder
    └─ __package__.yml  
```

```yaml __package__.yml
export:
  dependency: "@fern/some-dependency"
```

When you generate the SDK with `fern generate`, the `__package__.yml` file will
effectively be replaced with the API you're depending on.


# Export from Fern Definition to OpenAPI

> Export your Fern Definition files to OpenAPI using Fern's OpenAPI generator.

To prevent lock-in to the Fern Definition format, we provide a generator that will export your Fern Def files to OpenAPI 3.1.
This lets you switch to using OpenAPI at any time, or use your API definition with OpenAPI tools.
To convert your Fern Definition to OpenAPI, use the `fern-openapi` generator.

Update your `generators.yml` file:


  ```yaml
  - name: fernapi/fern-openapi
    version: 0.0.31
    config:
      format: yaml # options are yaml or json
    output:
      location: local-file-system
      path: ../openapi # relative path to output location
  ```



# SDK Overview

> Generate idiomatic SDKs in multiple programming languages

Let Fern do the heavy lifting of generating and publishing client libraries so your team can focus on building the API.

## Learn more


  
    Explore the full list of Fern's supported languages.
  

  
    See Fern in action with a personalized demo.
  

  
    Learn more about advanced features supported by Fern's SDk generation.
  

  
    Follow our step-by-step guide to generate your first SDK in minutes.
  



# Language support

> Generate type-safe SDKs in Python, TypeScript, Go, Java, C#, PHP, Ruby, Swift, Rust, C++, and more. Each SDK is officially maintained by language experts.

Fern supports generating SDKs in several different programming languages. Each SDK generator is written by a language expert and is officially maintained by the Fern team.

### Generally Available


  

  

  

  

  
    Supports Android
  

  

  


### Coming Soon


  

  

  

  

  

  



  Please reach out to [support@buildwithfern.com](mailto:support@buildwithfern.com) if you're interested in our generators that are coming soon.



# SDK Customer Showcase

At Fern, we help businesses build and distribute world-class SDKs that developers love. From startups to global enterprises, our customers trust Fern to elevate their developer experience and simplify API integration. Below are some of the companies leveraging Fern to power their SDKs.

***


  ## 
Square Square


  
    Public company
  

  Square trusts Fern to generate and maintain **7 SDKs**, ensuring their APIs are easily accessible to developers building on any platform.

  Check out Square's SDKs as they become generally available:

  
    
      
        View the Go source code in GitHub
      
    

    
      
        View the TypeScript source code in GitHub
      
    

    
      
        View the PHP source code in GitHub
      
    

    
      
        View the Python source code in GitHub
      
    

    
      
        View the Java source code in GitHub
      
    

    
      
        *Coming soon*
      
    

    
      
        *Coming soon*
      
    
  

  ***

  ## 
Pinecone Pinecone


  

    
      gRPC
    

    
      REST
    
  


  Pinecone leverages Fern to create an SDK that supports **both gRPC and REST**, bridging the gap between broad compatibility and peak performance.

  Check out Pinecone's C# SDK here:

  
    
      View the C# source code in GitHub
    
  

  
    Read about [the first auto-generated SDK](https://buildwithfern.com/blog/pinecone) with gRPC and REST.
  

  ***

  ## 
ElevenLabs ElevenLabs


  

    
      File uploads
    

    
      WebSockets
    
  


  ElevenLabs uses Fern to generate SDKs with advanced capabilities for **file uploads** and **websocket communication**, enabling smooth interactions with their AI-powered audio APIs.

  Check out these features in ElevenLabs' SDKs here:

  
    
      
        
          View the Python source code in GitHub
        

        
          View the Python source code in GitHub
        
      
    

    
      
        
          View the TypeScript source code in GitHub
        

        
          View the TypeScript source code in GitHub
        
      
    
  

  ***

  ## 
Candid Candid


  
    OAuth
  

  Candid uses Fern to generate an SDK with built in **OAuth support**, enabling secure and seamless authentication for developers.

  Check out OAuth in Candid's SDK here:

  
    
      
        
          View the Python source code in GitHub
        
      
    

    
      
        
          View the TypeScript source code in GitHub
        
      
    

    
      
        
          View the C# source code in GitHub
        
      
    

    
      
        
          View the Ruby source code in GitHub
        
      
    
  

  ***

  ## 
Humanloop Humanloop


  
    SSE
  

  Humanloop uses Fern to support **server-sent events (SSE)** in their SDKs, allowing developers to build robust AI features with LLMs using best-in-class tooling.

  Check out SSE in Humanloop's SDK here:

  
    
      
        
          View the Python source code in GitHub
        
      
    

    
      
        
          View the TypeScript source code in GitHub
        
      
    
  

  ***

  ## 
Abound Abound


  
    Integration tests
  

  Abound relies on Fern to manage a **full suite of integration tests**, ensuring their SDKs and APIs deliver a reliable experience for partners and developers.

  Check out Abound's integration tests here:

  
    
      View the source code for integration tests
    
  


***

Ready to streamline your SDK development? [Get started with Fern today](https://buildwithfern.com/contact).


# June 5, 2025

## 1.3.2

**`(fix):`** Fix dynamic imports in the built dist/esm code.

## 1.3.1

**`(fix):`** MSW is used for generated wire tests, but inadvertently also captures real HTTP request, for example in integration tests.
When the HTTP request does not match any of the configured predicates, it would throw an error, including in the unrelated integration tests.
In this version MSW is configured to bypass instead of throw an error when HTTP requests do not match the configured predicates.


# June 4, 2025

## 1.3.0

**`(feat):`** Add support for generating the full project when using the filesystem output mode.

## 1.1.1

**`(fix):`** Fix an issue where attempting to access a property with an invalid property name would lead to a broken output SDK.


# June 3, 2025

## 1.2.4

**`(feat):`** Generate tests to verify the SDK sends and receives HTTP requests as expected.
You can turn of these tests by setting `generateWireTests` to `false` in the `config` of your generator configuration.

## 1.1.0

**`(feat):`** Add support for HEAD HTTP method.


# May 14, 2025

## 1.0.1

**`(fix):`** Fix property lookup in inherited schemas during snippet generation for object schemas.

## 1.0.0

**`(feat):`** This release changes the defaults for the following custom configuration in *generators.yml*.

| Option                   | Before  | Now     |
| ------------------------ | ------- | ------- |
| `inlineFileProperties`   | `false` | `true`  |
| `inlinePathParameters`   | `false` | `true`  |
| `enableInlineTypes`      | `false` | `true`  |
| `noSerdeLayer`           | `false` | `true`  |
| `omitUndefined`          | `false` | `true`  |
| `skipResponseValidation` | `false` | `true`  |
| `useLegacyExports`       | `true`  | `false` |

To avoid breaking changes, explicitly set the options above with the `Before` values in the `config` of your generator
in *generators.yml*.

**`(fix):`** When generating properties for interfaces and classes, we only surround the property name with quotes if necessary.
In some cases where the property name wasn't a valid identifier before, we now surround it with quotes too.

## 0.51.7

**`(fix):`** If an object extends an alias, the generator now visits the alias that is being extended (instead of throwing an error).


# May 13, 2025

## 0.51.6

**`(fix):`** Add support for the custom introduction setting in the generated README.md.


# May 3, 2025

## 0.51.5

**`(fix):`** Fixed an issue with ts-morph where creating an ifStatement with empty conditions array caused errors in multipart form data handling.


# April 22, 2025

## 0.51.4

**`(fix):`** Fix issue where the *runtime.ts* file was missing when other files were trying to import it.


# April 21, 2025

## 0.51.3

**`(fix):`** Fix minor type issue for polyfilling Headers in Node 16 and below.

## 0.51.2

**`(fix):`** When uploading files, extract the filename from the `path` property if present on the given object.
This will extract the filename for `fs.createReadStream()` for example.

## 0.51.1

**`(fix):`** Fallback to a custom `Headers` class implementation if the native `Headers` class is not available.
Versions of Node 16 and below do not support the native `Headers` class, so this fallback is necessary to ensure compatibility.


# April 14, 2025

## 0.51.0

**`(feat):`** Add `rawResponse` property to JavaScript errors.

```ts
try {
  const fooBar = await client.foo.bar("id", options);
} catch (e) {
  if (error instanceof FooError) {
    console.log(error.rawResponse);
  } else {
    // ...
  }
}
```


# April 8, 2025

## 0.50.1

**`(feat):`** Add `"packageManager": "yarn@1.22.22"` to *package.json*.


# April 7, 2025

## 0.50.0

**`(feat):`** All endpoint functions now return an `HttpResponsePromise` instead of a `Promise`.
Using `await`, `.then()`, `.catch()`, and `.finally()` on these promises behave the same as before,
but you can call `.withRawResponse()` to get a promise that includes the parsed response and the raw response.
The raw response let's you retrieve the response headers, status code, etc.

```ts
const fooBar = await client.foo.bar("id", options);
const { data: alsoFooBar, rawResponse } = await client.foo.bar("id", options).withRawResponse();
const {
    headers,
    status,
    url,
    ...
} = rawResponse;
```


# March 27, 2025

## 0.49.7

**`(fix):`** Significantly improve performance of SDK generation when the `useLegacyExports` config is `false`. For a large spec like Square, the generation went from 10+ minutes to almost 1 minute.

## 0.49.6

**`(feat):`** Support arbitrary websocket headers during connect handshake.

## 0.49.5

**`(feat):`** Improvements to Websocket code generation quality.


# March 19, 2025

## 0.49.4

**`(fix):`** Increase the timeout used in the generated `webpack.test.ts` file.

## 0.49.3

**`(fix):`** Increase the timeout used in the generated `webpack.test.ts` file.


# March 18, 2025

## 0.49.2

**`(fix):`** Fix issue where IdempotentRequestOptions is not generated in the client namespace.


# March 10, 2025

## 0.49.1

**`(fix):`** This PR includes several fixes to the generated `Socket.ts` file when websocket client code generation is enabled.


# March 6, 2025

## 0.49.0

**`(feat):`** This PR enables the Typescript generator to produce Websocket SDK endpoints. This can be enabled by adding the option `shouldGenerateWebsocketClients: true` to the Typescript generator config.


# January 28, 2025

## 0.48.7

**`(fix):`** Form data encoding now correctly handles array and object values by encoding each property value as a separate key-value pair, rather than trying to encode the entire object as a single value. This ensures proper handling of complex data structures in multipart form requests.

## 0.48.6

**`(fix):`** Support form-encoded form data parameters by using `qs` to properly encode array and object values with the `repeat` array format.

## 0.48.5

**`(fix):`** Don't double wrap a blob if a user uploads a blob to a multi-part form. Otherwise file's content-type is lost in Deno.


# January 21, 2025

## 0.48.4

**`(fix):`** When custom config `useBigInt` is `true`, generate examples and snippets with `BigInt("123")`.


# January 16, 2025

## 0.48.3

**`(fix):`** The SDK now supports reading the basic auth username and password values from environment variables.

## 0.48.2

**`(fix):`** This updates the retrier logic to stop retrying on HTTP conflict (409). This was an oversight that we've meant to remove for a while (similar to other Fern SDKs).

## 0.48.1

**`(fix):`** Record types with `null` values are now correctly serialized.

## 0.48.0

**`(feat):`** When `useBigInt` SDK configuration is set to `true`, a customized JSON serializer & deserializer is used that will preserve the precision of `bigint`'s, as opposed to the native `JSON.stringify` and `JSON.parse` function which converts `bigint`'s to `number`'s losing precision.

When combining `useBigInt` with our serialization layer (`no-serde: false` (default)), both the request and response properties that are marked as `long` and `bigint` in OpenAPI/Fern spec, will consistently be `bigint`'s.
However, when disabling the serialization layer (`no-serde: true`), they will be typed as `number | bigint`.

Here's an overview of what to expect from the generated types when combining `useBigInt` and `noSerde` with the following Fern definition:

**Fern definition**

```yml
types:
  ObjectWithOptionalField:
    properties:
      longProp: long
      bigIntProp: bigint
```

**TypeScript output**

```typescript
// useBigInt: true
// noSerde: false
interface ObjectWithLongAndBigInt {
  longProp: bigint;
  bigIntProp: bigint;
}

// useBigInt: true
// noSerde: true
interface ObjectWithLongAndBigInt {
  longProp: bigint | number;
  bigIntProp: bigint | number;
}

// useBigInt: false
// noSerde: false
interface ObjectWithLongAndBigInt {
  longProp: number;
  bigIntProp: string;
}

// useBigInt: false
// noSerde: true
interface ObjectWithLongAndBigInt {
  longProp: number;
  bigIntProp: string;
}
```


# January 15, 2025

## 0.47.1

**`(fix):`** Resolves an issue where nullable query parameters were not null-safe in their method invocations. The
generated code now appropriately guard against `null` values like so:

```typescript
const _queryParams: Record< ... >;
if (value !== undefined) {
    _queryParams["value"] = value?.toString() ?? null;
}
```


# January 14, 2025

## 0.47.0

**`(feat):`** Add support for `nullable` properties. Users can now specify explicit `null` values
for types that specify `nullable` properties like so:

```typescript
await client.users.update({ username: "john.doe", metadata: null });
```

## 0.46.11

**`(fix):`** Don't double check whether an optional string literal alias (see example below) is a string when using serializer to build query string parameters.

```yml
types:
  LiteralAliasExample: literal<"MyLiteralValue">

service:
  endpoints:
    foo:
      path: /bar
      method: POST
      request:
        name: FooBarRequest
        query-parameters:
          optional_alias_literal: optional
```

```ts
// before
if (optionalAliasLiteral != null) {
    _queryParams["optional_alias_literal"] = typeof serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
        unrecognizedObjectKeys: "strip",
    }) === "string" ? serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
        unrecognizedObjectKeys: "strip",
    }) : JSON.stringify(serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
        unrecognizedObjectKeys: "strip",
    }));
}

// after
if (optionalAliasLiteral != null) {
    _queryParams["optional_alias_literal"] = serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
        unrecognizedObjectKeys: "strip",
    });
}
```

## 0.46.10

**`(fix):`** Use serialization layer to convert types to JSON strings when enabled.


# January 13, 2025

## 0.46.9

**`(fix):`** Expose `baseUrl` as a default Client constructor option and construct URL correctly.

## 0.46.8

**`(fix):`** Generate the `version.ts` file correctly


# January 9, 2025

## 0.46.7

**`(fix):`** Simplify runtime detection to reduce the chance of using an unsupported API like `process.` Detect Edge Runtime by Vercel.

## 0.46.6

**`(fix):`** Update `@types/node` to `18+`, required for the generated `Node18UniversalStreamWrapper` test.

## 0.46.5

**`(fix):`** Fix the webpack test to work with .js/.jsx extensions in TypeScript

**`(fix):`** Only map .js modules in Jest, not .json files.

## 0.46.4

**`(fix):`** Fix packageJson custom configuration & package.json types field.

## 0.46.3

**`(fix):`** Revert to using legacy exports by default.

## 0.46.2

**`(fix):`** Fix Jest to work with files imported using `.js` extension.

**`(fix):`** Make sure Jest loads Jest configuration regardless of package.json type.


# January 8, 2025

## 0.46.1

**`(fix):`** ESModule output is fixed to be compatible with Node.js ESM loading.


# January 6, 2025

## 0.46.0

**`(feat):`** SDKs are now built and exported in both CommonJS (legacy) and ESModule format.

**`(feat):`** Export `serialization` code from root package export.

```ts
import { serialization } from `@packageName`;
```

The serialization code is also exported as `@packageName/serialization`.

```ts
import * as serialization from `@packageName/serialization`;
```

**`(feat):`** `package.json` itself is exported in `package.json` to allow consumers to easily read metadata about the package they are consuming.


# December 31, 2024

## 0.45.2

**`(fix):`** TS generated snippets now respect proper parameter casing when noSerdeLayer is enabled.


# December 27, 2024

## 0.45.1

**`(fix):`** Export everything inside of TypeScript namespaces that used to be ambient.

For the `enableInlineTypes` feature, some namespaces were no longer declared (ambient), and types and interfaces inside the namespace would no longer be automatically exported without the `export` keyword. This fix exports everything that's inside these namespaces and also declared namespaces for good measure (in case they are not declared in the future).


# December 26, 2024

## 0.45.0

**`(feat):`** Update dependencies of the generated TS SDK and Express generator. TypeScript has been updated to 5.7.2 which is a major version upgrade from 4.6.4.


# December 23, 2024

## 0.44.5

**`(fix):`** Fix a bug where we attempt to parse an empty terminator when receiving streaming JSON responses.


# December 20, 2024

## 0.44.4

**`(feat):`** Use specified defaults for pagination offset parameters during SDK generation.


# December 18, 2024

## 0.44.3

**`(fix):`** Fix a bug where client would send request wrapper instead of the body of the request wrapper, when the request has inline path parameters and a body property.


# December 17, 2024

## 0.44.2

**`(fix):`** Inline path parameters will use their original name when `retainOriginalName` or `noSerdeLayer` is enabled.


# December 16, 2024

## 0.44.1

**`(fix):`** When there is an environment variable set, you do not need to pass in any parameters to the client constructor.


# December 13, 2024

## 0.44.0

**`(feat):`** Inline path parameters into request types by setting `inlinePathParameters` to `true` in the generator config.

Here's an example of how users would use the same endpoint method without and with `inlinePathParameters` set to `true`.

Without `inlinePathParameters`:

```ts
await service.getFoo("pathParamValue", { id: "SOME_ID" });
```

With `inlinePathParameters`:

```ts
await service.getFoo({ pathParamName: "pathParamValue", id: "SOME_ID" });
```


# December 11, 2024

## 0.43.1

**`(fix):`** When `noSerdeLayer` is enabled, streaming endpoints were failing to compile because they assumed that the serialization layer existed. This is now fixed.

## 0.43.0

**`(feat):`** Generate inline types for inline schemas by setting `enableInlineTypes` to `true` in the generator config.
When enabled, the inline schemas will be generated as nested types in TypeScript.
This results in cleaner type names and a more intuitive developer experience.

Before:

```ts
// MyRootType.ts
import * as MySdk from "...";

export interface MyRootType {
  foo: MySdk.MyRootTypeFoo;
}

// MyRootTypeFoo.ts
import * as MySdk from "...";

export interface MyRootTypeFoo {
  bar: MySdk.MyRootTypeFooBar;
}

// MyRootTypeFooBar.ts
import * as MySdk from "...";

export interface MyRootTypeFooBar {}
```

After:

```ts
// MyRootType.ts
import * as MySdk from "...";

export interface MyRootType {
  foo: MyRootType.Foo;
}

export namespace MyRootType {
  export interface Foo {
    bar: Foo.Bar;
  }

  export namespace Foo {
    export interface Bar {}
  }
}
```

Now users can get the deep nested `Bar` type as follows:

```ts
import { MyRootType } from MySdk;

const bar: MyRootType.Foo.Bar = {};
```


# December 3, 2024

## 0.42.7

**`(feat):`** Support `additionalProperties` in OpenAPI or `extra-properties` in the Fern Defnition. Now
an object that has additionalProperties marked as true will generate the following interface:

```ts
interface User {
  propertyOne: string;
  [key: string]: any;
}
```


# November 23, 2024

## 0.42.6

**`(fix):`** Remove the generated `APIPromise` since it is not compatible on certain node versions.

## 0.42.5

**`(fix):`** Remove extraneous import in pagination snippets.


# November 22, 2024

## 0.42.3

**`(fix):`** Fixed issue with snippets used for pagination endpoints.


# November 21, 2024

## 0.42.4

**`(fix):`** Improve `GeneratedTimeoutSdkError` error to include endpoint name in message.

## 0.42.2

**`(feat):`** Added documentation for pagination in the README. The snippet below will
now show up on generated READMEs.

```typescript
// Iterate through all items
const response = await client.users.list();
for await (const item of response) {
  console.log(item);
}

// Or manually paginate
let page = await client.users.list();
while (page.hasNextPage()) {
  page = await page.getNextPage();
}
```


# November 20, 2024

## 0.42.1

**`(feat):`** Added support for passing additional headers in request options. For example:

```ts
const response = await client.someEndpoint(..., {
  headers: {
    'X-Custom-Header': 'custom value'
  }
});
```


# November 18, 2024

## 0.41.2

**`(fix):`** Actually remove `jest-fetch-mock` from package.json.


# November 15, 2024

## 0.42.0

**`(feat):`** Added support for `.asRaw()` which allows users to access raw response data including headers. For example:

```ts
const response = await client.someEndpoint().asRaw();
console.log(response.headers["X-My-Header"]);
console.log(response.body);
```


# November 2, 2024

## 0.41.1

**`(fix):`** Remove dev dependency on `jest-fetch-mock`.


# October 8, 2024

## 0.41.0

**`(feat):`** Add a variable jitter to the exponential backoff and retry.

## 0.41.0-rc2

**`(feat):`** Generated READMEs now include improved usage snippets for pagination and streaming endpoints.

## 0.41.0-rc1

**`(fix):`** Fixes a broken unit test introduced in 0.41.0-rc0.

## 0.41.0-rc0

**`(feat):`** The generated SDK now supports bytes (`application/octet-stream`) requests.


# September 28, 2024

## 0.40.8

**`(fix):`** File array uploads now call `request.appendFile` instead of `request.append` which was causing form data to be in a corrupted state.

## 0.40.7

**`(fix):`** The generated README will now have a section that links to the generated SDK Reference (in `reference.md`).

```md
## Reference

A full reference for this library can be found [here](./reference.md).
```


# September 18, 2024

## 0.40.6

**`(fix):`** The TypeScript SDK now supports specifying a custom contentType if one is specified.

## 0.40.5

**`(fix):`** The snippet templates for file upload are now accurate and also respect the feature flag `inlineFileProperties`.


# September 12, 2024

## 0.40.4

**`(fix):`** Upgrades dependency `stream-json` which improves the performance when reading large API specs. This version will improve your `fern generate` performance.

## 0.40.3

**`(fix):`** If the serde layer is enabled, then all the serializers are exported under the namespace `serializers`.

```ts
import { serializers } from "@plantstore/sdk";

export function main(): void {
  // serialize to json

  const json = serializers.Plant.toJson({
    name: "fern"
  });

  const parsed = serializers.Plant.parseOrThrow(`{ "name": "fern" }`);
}
```

## 0.40.2

**`(fix):`** The generated SDK now handles reading IR JSONs that are larger than 500MB. In order to to this, the function `streamObjectFromFile` is used instead of `JSON.parse`.

## 0.40.1

**`(fix):`** The generated snippets now inline referenced request objects given they are not named, they need to be inlined.

## 0.40.0

**`(feat):`** A new configuration flag has now been added that will automatically generate
`BigInt` for `long` and `bigint` primitive types. To turn this flag on:

```yml
groups:
  ts-sdk:
    name: fernapi/fern-typescript-node-sdk
    version: 0.40.0
    config:
      useBigInt: true
```


# September 11, 2024

## 0.39.8

**`(fix):`** The generated enum examples now reference the value of the enum directly instead
of using the enum itself.

### Before

```ts
{
  "genre": Imdb.Genre.Humor,
}
```

### After

```ts
{
  "genre": "humor"
}
```


# August 27, 2024

## 0.39.7

**`(chore):`** The SDK now produces a `version.ts` file where we export a constant called `SDK_VERSION`.
This constant can be used by different utilities to dynamically import in the version (for example, if someone wants to customize the user agent).

## 0.39.6

**`(fix):`** Browser clients can now import streams, via `readable-streams` polyfill. Additionally adds a
webpack unit test to verify that the core utilities can be compiled.


# August 20, 2024

## 0.39.5

**`(fix):`** If `noSerdeLayer` is enabled, then the generated TypeScript SDK snippets and wire tests
will not use `Date` objects but instead use strings. Without this fix, the generated
wire tests would result in failures.

## 0.39.4

**`(fix):`** Ensure that environment files don't generate, unless there is a valid environment available.


# August 16, 2024

## 0.39.3

**`(fix):`** Multipart form data unit tests only get generated if the SDK has multipart form uploads.

## 0.39.2

**`(fix):`** Allows filenames to be passed from underlying File objects in Node 18+ and browsers
Users can now supply files like so, using a simple multipart upload API as an example:

```typescript
client.file.upload(new File([...blobParts], 'filename.ext'), ...)
```

`filename.ext` will be encoded into the upload.


# August 7, 2024

## 0.39.1

**`(feat):`** The SDK now supports looking directly at a `hasNextPage` property for offset pagination if configured.
Previously the SDK would look if the number of items were empty, but this failed in certain edge cases.

## 0.38.6

**`(feat):`** The SDK generator now sends a `User-Agent` header on each request that is set to
`/`. For example if your package is called `imdb` and is versioned `0.1.0`, then
the user agent header will be `imdb/0.1.0`.

## 0.38.5

**`(fix):`** Addressed fetcher unit test flakiness by using a mock fetcher


# August 4, 2024

## 0.38.4

**`(fix):`** Literal templates are generated if they are union members

**`(fix):`** Snippet templates no longer try to inline objects within containers


# August 2, 2024

## 0.38.3

**`(fix):`** Adds async iterable to StreamWrapper implementation for easier use with downstream dependencies.


# August 1, 2024

## 0.38.2

**`(fix):`** Refactors the `noScripts` feature flag to make sure that no `yarn install` commands can be accidentally triggered.

## 0.38.1

**`(feat):`** A feature flag called `noScripts` has been introduced to prevent the generator from running any scripts such as `yarn format` or `yarn install`. If any of the scripts
cause errors, toggling this option will allow you to receive the generated code.

```
- name: fernapi/fern-typescript-node-sdk
  version: 0.38.1
  config:
    noScripts: true
```


# July 31, 2024

## 0.38.0-rc0

**`(internal):`** Upgrade to IRv53.

**`(chore):`** The generator now creates snippet templates for undiscriminated unions.


# July 29, 2024

## 0.37.0-rc0

**`(feat):`** The business plan Typescript SDK will now generate wire tests if the feature flag in the configuration is turned on.

```
- name: fernapi/fern-typescript-node-sdk
  version: 0.37.0-rc0
  config:
    generateWireTests: true
```

## 0.36.6

**`(fix):`** Now import paths are correctly added to getResponseBody tests. CI checks also added.

## 0.36.5

**`(fix):`** Now, server sent events are treated differently as streaming responses, to ensure the correct wrapping happens.


# July 26, 2024

## 0.36.4

**`(fix):`** Now, import paths are correctly added to stream wrapper tests.

## 0.36.3

**`(fix):`** Support starting the stream on `StreamWrapper.pipe(...)` for shorter syntax when dealing with `node:stream` primitives.

## 0.36.2

**`(fix):`** This release comes with numerous improvements to streaming responses:

1. Introduces new stream wrapper polyfills that implement the ability to stream to more streams, per environment.
2. For `Node 18+`, stream responses can now be piped to `WritableStream`. They can also be streamed to `stream.Writable`, as possible before.
3. For `< Node 18`, stream responses can be piped to `stream.Writeable`, as before.
4. For `Browser` environments, stream responses can be piped to `WritableStream`.
5. For `Cloudflare Workers`, stream responses can be piped to `WritableStream`.

**`(fix):`** Now, there are generated unit tests for the `fetcher/stream-wrappers` core directory which makes sure that Fern's stream wrapping from responses work as expected!


# July 16, 2024

## 0.36.1

**`(fix):`** Now, there are generated unit tests for the `auth` and `fetcher` core directory which makes sure that Fern's fetcher and authorization helpers work as expected!

## 0.36.0

**`(fix):`** Now, there are generated unit tests for the `schemas` core directory which makes sure that Fern's request + response validation will work as expected!

## 0.35.0

**`(fix):`** Support Multipart Form uploads where `fs.createReadStream` is passed. This requires coercing the stream into a `File`.

## 0.34.0

**`(internal):`** Upgrade to IRv50.

**`(feat):`** Add support for generating an API version scheme in `version.ts`.
Consider the following `api.yml` configuration:

```yaml
version:
  header: X-API-Version
  default: "1.0.0"
  values:
    - "1.0.0-alpha"
    - "1.0.0-beta"
    - "1.0.0"
```

The following `version.ts` file is generated:

```typescript
/**
* This file was auto-generated by Fern from our API Definition.
*/

/** The version of the API, sent as the X-API-Version header. */
export type AcmeVersion = "1.0.0" | "2.0.0" | "latest";
```

If a default value is specified, it is set on every request but can be overridden
in either the client-level `Options` or call-specific `RequestOptions`. If a default
value is *not* specified, the value of the header is required on the generated `Options`.

An example call is shown below:

```typescript
import { AcmeClient } from "acme";

const client = new AcmeClient({ apiKey: "YOUR_API_KEY", xApiVersion: "2.0.0" });
await client.users.create({
  firstName: "john",
  lastName: "doe"
});
```

## 0.33.0

**`(fix):`** This release comes with numerous improvements to multipart uploads:

1. `Fetcher.ts` no longer depends on form-data and formdata-node which reduces
   the size of the SDK for all consumers that are not leveraging multipart form
   data uploads.
2. The SDK now accepts `fs.ReadStream`, `Blob` and `File` as inputs and handles
   parsing them appropriately.
3. By accepting a `Blob` as a file parameter, the SDK now supports sending the
   filename when making a request.


# July 15, 2024

## 0.32.0

**`(feat):`** The `reference.md` is now generated for every SDK.

**`(feat):`** The `reference.md` is now generated by the `generator-cli`.

**`(fix):`** The `reference.md` includes a single section for the *first* example specified on the endpoint. Previously, a separate section was included for *every* example.


# July 12, 2024

## 0.31.0

**`(feat):`** Add `omitUndefined` generator option. This is enabled with the following config:

```yaml
groups:
  generators:
    - name: fernapi/fern-typscript-node-sdk
      version: 0.31.0
      ...
      config:
        omitUndefined: true
```

When enabled, any property set to an explicit `undefined` is *not* included
in the serialized result. For example,

```typescript
const request: Acme.CreateUserRequest = {
  firstName: "John",
  lastName: "Doe",
  email: undefined
};
```

By default, explicit `undefined` values are serialized as `null` like so:

```json
{
  "firstName": "John",
  "lastName": "Doe",
  "email": null
}
```

When `omitUndefined` is enabled, the JSON object is instead serialized as:

```json
{
  "firstName": "John",
  "lastName": "Doe"
}
```


# July 11, 2024

## 0.30.0

**`(feat):`** Client-level `Options` now supports overriding global headers like version.


# July 10, 2024

## 0.29.2

**`(fix):`** Fix serialization of types with circular references

## 0.29.1

**`(fix):`** Pagination endpoints that define nested offset/cursor properties are now functional.
A new `setObjectProperty` helper is used to dynamically set the property, which is inspired
by Lodash's `set` function ([https://lodash.com/docs/4.17.15#set](https://lodash.com/docs/4.17.15#set)).

The generated code now looks like the following:

```typescript
let _offset = request?.pagination?.page != null ? request?.pagination?.page : 1;
return new core.Pageable({
  response: await list(request),
  hasNextPage: (response) => (response?.data ?? []).length > 0,
  getItems: (response) => response?.data ?? [],
  loadPage: (_response) => {
    _offset += 1;
    return list(core.setObjectProperty(request, "pagination.page", _offset));
  }
});
```


# July 9, 2024

## 0.29.0

**`(internal):`** Upgrade to IRv48.

**`(feat):`** Add support for pagination endpoints that require request body properties.

**`(feat):`** Add support for pagination with an offset step. This is useful for endpoints that page based on the element index rather than a page index (i.e. the 100th element vs. the 10th page).

This feature shares the same UX as both the `offset` and `cursor` pagination variants.

## 0.29.0-rc0

**`(fix):`** All serializers in the generated SDK are now synchronous. This makes the serializers easier to use and improves the performance as well.

## 0.28.0-rc0

**`(feat):`** Add support for offset pagination, which uses the same pagination API introduced in `0.26.0-rc0`.


# July 8, 2024

## 0.27.2

**`(fix):`** The generated readme now moves the sections for `AbortController`, `Runtime Compatibility` and `Custom Fetcher` under the Advanced section in the generated README.

## 0.27.1

**`(feat):`** Support JSR publishing. If you would like your SDK to be published to JSR, there is now a configuration option called `publishToJsr: true`. When enabled, the generator will
generate a `jsr.json` as well as a GitHub workflow to publish to JSR.

```yaml
- name: fernapi/fern-typescript-sdk
  version: 0.27.1
  config:
    publishToJsr: true
```

## 0.27.0

**`(fix):`** Boolean literal headers can now be overridden via `RequestOptions`.

**`(feat):`** The generated `.github/workflows/ci.yml` file now supports NPM publishing with alpha/beta dist tags. If the selected version contains the `alpha` or `beta` substring,
the associated dist tag will be added in the `npm publish` command like the following:

```sh
# Version 1.0.0-beta
npm publish --tag beta
```

For more on NPM dist tags, see [https://docs.npmjs.com/adding-dist-tags-to-packages](https://docs.npmjs.com/adding-dist-tags-to-packages)


# June 30, 2024

## 0.26.0-rc3

**`(fix):`** The typescript generator now returns all `FormData` headers and Fetcher no longer stringifies stream.Readable type.


# June 27, 2024

## 0.26.0-rc2

**`(feat):`** `RequestOptions` now supports overriding global headers like authentication and version.

## 0.26.0-rc1

**`(fix):`** The generator was skipping auto pagination for item arrays that were optional. Now, those are safely handled as well.

## 0.26.0-rc0

**`(feat):`** The TypeScript generator now supports cursor-based auto pagination. With auto pagination, a user can simply iterate over the results automatically:

```ts
for (const user of client.users.list()) {
  consoler.log(user);
}
```

Users can also paginate over data manually

```ts
const page = client.users.list();
for (const user of page.data) {
  consoler.log(user);
}

// Helper methods for manually paginating:
while (page.hasNextPage()) {
  page = page.getNextPage();
  // ...
}
```


# June 26, 2024

## 0.25.3

**`(internal):`** The generator is now upgraded to `v46.2.0` of the IR.


# June 20, 2024

## 0.25.2

**`(fix):`** The generator now removes `fs`, `path`, and `os` dependencies from the browser runtime.

## 0.25.1

**`(fix):`** The generator now removes `fs`, `path`, and `os` dependencies from the browser runtime.


# June 19, 2024

## 0.25.0

**`(fix):`** The generator now generates snippets for streaming endpoints. There is also a fix where literals are excluded from inlined requests.

## 0.25.0-rc0

**`(feat):`** The generator now merges the user's original `README.md` file (if any).

## 0.24.4

**`(fix):`** APIs that specify a default environment no longer include an unused environment import in their generated snippets.

## 0.24.2

**`(feat):`** Remove the unnecessary client call from the request/response README.md section.

**`(fix):`** The generated README.md snippets now correctly referenced nested methods. For example,
`client.users.create` (instead of `client.create`) in the following:

```ts
import { AcmeClient } from "acme";

const client = new AcmeClient({ apiKey: "YOUR_API_KEY" });
await client.users.create({
  firstName: "john",
  lastName: "doe"
});
```

## 0.24.1

**`(fix):`** Dynamic snippets now support importing the client directly from the package.

```typescript
import { MyClient } from "@org/sdk";

const client = new MyClient({ ... });
```


# June 18, 2024

## 0.24.3

**`(fix):`** The generator only adds a publish step in github actions if credentials are specified.

## 0.24.0

**`(feat):`** Add dynamic client instantiation snippets

## 0.24.0-rc0

**`(feat):`** Dynamic client instantiation snippets are now generated. Note this only affects enterprise users that are using Fern's Snippets API.


# June 17, 2024

## 0.23.3

**`(fix):`** The NPM publish job is *not* generated if the token environment variable is not specified.

**`(feat):`** The snippets now use the `client` variable name like so:

```ts
import { AcmeClient } from "acme";

const client = new AcmeClient({ apiKey: "YOUR_API_KEY" });
await client.users.create({
  firstName: "john",
  lastName: "doe"
});
```


# June 14, 2024

## 0.23.2

**`(fix):`** Client constructor snippets now include an `environment` property whenever it's required.

**`(fix):`** The import paths included in the `README.md` exclusively use double quotes.

**`(fix):`** When an NPM package name is not specified, the generated `README.md` will default to using the namespace export.


# June 13, 2024

## 0.23.1

**`(fix):`** Undiscriminated unions used as map keys examples no longer return an error.


# June 12, 2024

## 0.23.0

**`(fix):`** The latest version of the `generator-cli` (used to generate `README.md` files) is always installed.


# June 11, 2024

## 0.23.0-rc1

**`(fix):`** Introduce a custom configuration for arbitrary package json field. Now you can specify
arbitrary key, value pairs that you want to be merged in the generated `package.json`.

```yml
config:
  packageJson:
    dependencies:
      my-dep: "2.0.0"
    bin: "./index.js"
```


# June 7, 2024

## 0.23.0-rc0

**`(fix):`** Union snippet templates are fixed in 2 ways:

1. The templates do not have a leading single quote (a typo from before)
2. The templates now inline union properties (in certain cases)

## 0.22.0

**`(feat):`** Add support for higher quality `README.md` generation.


# June 5, 2024

## 0.21.1

**`(feat):`** Detect `workerd` (Cloudflare) environments in `Runtime.ts`. The `Stream` class which is used for Server-Sent Events now prefers `TextDecoder` if it is present in the environment, to work in Cloudflare environments.

## 0.21.0

**`(feat):`** The generator now supports `bigint` types.

**`(internal):`** Bump to IRv46.


# June 2, 2024

## 0.20.9

**`(fix):`** TypeScript generator outputs code snippets that have `example-identifier` embedded.

## 0.20.8

**`(feat):`** TypeScript projects were skipping added peer dependencies in certain cases, now those are fixed.


# May 31, 2024

## 0.20.7

**`(fix):`** Simplify the error handling introduced in `0.20.6` so that it more easily handles endpoints that include structured errors.

## 0.20.6

**`(fix):`** This updates the behavior of the failure condition introduced in `0.20.2`; the SDK
now throws an error whenever we fail to refresh an access token even if `neverThrowErrors`
is set. We treat this failure as a systematic exception, so it's OK to throw in this case.


# May 30, 2024

## 0.20.5

**`(feat):`** Support setting `extraPeerDependencies` and `extraPeerDependenciesMeta` as
configuration arguments. For example:

```yaml
extraPeerDependencies:
  "openai": "^4.47.1"
extraPeerDependenciesMeta:
  "openai":
    optional: true
```


# May 29, 2024

## 0.20.4

**`(fix):`** Functionality to generate integration tests against a mock server has been disabled.

## 0.20.2

**`(fix):`** The OAuth token provider supports SDKs that enable the `neverThrowErrors` setting.
If the OAuth token provider fails to retrieve and/or refresh an access token, an error
will *not* be thrown. Instead, the original access token will be used and the user will be
able to act upon an error available on the response. For example,

```ts
const response = await client.user.get(...)
if (!response.ok) {
  // Handle the response.error ...
}
```

## 0.20.1

**`(fix):`** Remove node:stream imports for Webpack and Next.js compatibility

**`(fix):`** Fix URL encoded body encoding in fetcher

## 0.20.1-rc0

**`(fix):`** URL encoded bodies are now appropriately encoded within the fetcher.


# May 24, 2024

## 0.20.0-rc1

**`(fix):`** Pass `abortSignal` to `Stream` for server-sent-events and JSON streams so that the user can opt out and break from a stream.

## 0.20.0-rc0

**`(feat):`** Add `abortSignal` to `RequestOptions`. SDK consumers can now specify an
an arbitrary abort signal that can interrupt the API call.

```ts
const controller = new AbortController();
client.endpoint.call(..., {
  abortSignal: controller.signal,
})
```


# May 20, 2024

## 0.19.0

**`(feat):`** Add `inlineFileProperties` configuration to support generating file upload properties
as in-lined request properties (instead of positional parameters). Simply configure the following:

```yaml
- name: fernapi/fern-typscript-node-sdk
  version: 0.19.0
  ...
  config:
    inlineFileProperties: true
```

**Before**:

```ts
/**
  * @param {File | fs.ReadStream} file
  * @param {File[] | fs.ReadStream[]} fileList
  * @param {File | fs.ReadStream | undefined} maybeFile
  * @param {File[] | fs.ReadStream[] | undefined} maybeFileList
  * @param {Acme.MyRequest} request
  * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
  *
  * @example
  *     await client.service.post(fs.createReadStream("/path/to/your/file"), [fs.createReadStream("/path/to/your/file")], fs.createReadStream("/path/to/your/file"), [fs.createReadStream("/path/to/your/file")], {})
  */
public async post(
    file: File | fs.ReadStream,
    fileList: File[] | fs.ReadStream[],
    maybeFile: File | fs.ReadStream | undefined,
    maybeFileList: File[] | fs.ReadStream[] | undefined,
    request: Acme.MyRequest,
    requestOptions?: Acme.RequestOptions
): Promise {
  ...
}
```

**After**:

```ts
/**
  * @param {Acme.MyRequest} request
  * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
  *
  * @example
  *     await client.service.post({
  *        file: fs.createReadStream("/path/to/your/file"),
  *        fileList: [fs.createReadStream("/path/to/your/file")]
  *     })
  */
public async post(
    request: Acme.MyRequest,
    requestOptions?: Service.RequestOptions
): Promise {
  ...
}
```


# May 17, 2024

## 0.18.3

**`(internal):`** The generator now uses the latest FDR SDK.


# May 15, 2024

## 0.18.2

**`(fix):`** If OAuth is configured, the generated `getAuthorizationHeader` helper now treats the
bearer token as optional. This prevents us from sending the `Authorization` header
when retrieving the access token.


# May 14, 2024

## 0.18.1

**`(fix):`** If OAuth environment variables are specified, the `clientId` and `clientSecret` parameters
are optional.

```ts
export declare namespace Client {
  interface Options {
      ...
      clientId?: core.Supplier;
      clientSecret?: core.Supplier;
  }
  ...
}
```


# May 13, 2024

## 0.18.0

**`(feat):`** Add support for the OAuth client credentials flow. The new `OAuthTokenProvider` automatically
resolves the access token and refreshes it as needed. The resolved access token is then used as the
bearer token in all client requests.


# May 6, 2024

## 0.17.1

**`(fix):`** Multipart form data requests are now compatible across browser and Node.js runtimes.

## 0.17.0

**`(internal):`** Bump to v43 of IR which means that you will need `0.26.1` of the Fern CLI version. To bump your CLI version, please run `fern upgrade`.

## 0.16.0-rc8

**`(feat):`** The SDK generator now supports upload endpoints that specify an array of files like so:

```ts
/**
  * @param {File[] | fs.ReadStream[]} files
  * @param {Acme.UploadFileRequest} request
  * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
  */
public async post(
    files: File[] | fs.ReadStream[],
    request: Acme.UploadFileRequest,
    requestOptions?: Service.RequestOptions
): Promise {
    const _request = new FormData();
    for (const _file of files) {
      _request.append("files", _file);
    }
    ...
}
```


# April 30, 2024

## 0.16.0-rc7

**`(feat):`** The SDK generator now supports `@param` JSDoc comments for endpoint parameters.
The generator now arranges JSDoc in a few separate groups, one for each of `@param`, `@throws`,
and `@examples` like so:

```ts
  /**
  * This endpoint checks the health of a resource.
  *
  * @param {string} id - A unique identifier.
  * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
  *
  * @throws {@link Acme.UnauthorizedRequest}
  * @throws {@link Acme.BadRequest}
  *
  * @example
  *     await testSdk.health.service.check("id-2sdx82h")
  */
  public async check(id: string, requestOptions?: Service.RequestOptions): Promise {
    ...
  }
```

**`(feat):`** The generator will only include user-provided examples if they exist, and otherwise
only include a single generated example, like so:

```ts
  /**
  * This endpoint checks the health of a resource.
  *
  * @example
  *     await testSdk.health.service.check("id-2sdx82h")
  */
  public async check(id: string, requestOptions?: Service.RequestOptions): Promise {
    ...
  }
```

**`(fix):`** The SDK generator now escapes path parameters that would previously create invalid
URLs (e.g. "\example"). Method implementations will now have references to
`encodeURIComponent` like the following:

```ts
const _response = await core.fetcher({
  url: urlJoin(
    (await core.Supplier.get(this._options.environment)) ?? environments.AcmeEnvironment.Prod,
    `/users/${encodeURIComponent(userId)}`
  ),
  ...
});
```

## 0.16.0-rc6

**`(fix):`** snippet templates now move file upload parameters to unnamed args

## 0.16.0-rc5

**`(fix):`** remove duplicate quotation marks in snippet templates


# April 25, 2024

## 0.16.0-rc4

**`(fix):`** fixes to styling of the SDK code snippet templates.


# April 24, 2024

## 0.16.0-rc0

**`(feat):`** The generator now registers snippet templates which can be used for dynamic SDK code snippet generation.

## 0.15.1-rc1

**`(feat):`** Earlier for inlined request exports, we were doing the following:

```ts
export { MyRequest } from "./MyRequest";
```

In an effort to make the generated code JSR compatible, the TS generator
will now append the `type` explicitly for request exports.

```ts
export { type MyRequest } from "./MyRequest";
```


# April 22, 2024

## 0.15.1-rc0

**`(feat):`** plain text responses are now supported in the TypeScript generator.

## 0.15.0-rc1

**`(fix):`** Minor fixes to SSE processing. In particular, stream terminal characters are now
respected like `[DONE]` and JSON parsed data is sent to the deserialize function.


# April 19, 2024

## 0.15.0-rc0

**`(feat):`** Bump to v38 of IR and support server-sent events where the events are sent
with a `data: ` prefix and terminated with a new line.


# April 17, 2024

## 0.14.1-rc5

**`(fix):`** Code snippets are generated for file upload endpoints using `fs.readStream`. Previously, generation for these endpoints was being skipped.

**`(fix):`** If integration tests are not enabled, simple jest tests with a `yarn test` script will be created.

**`(feat):`** In an effort to make the generated code JSR compatible, the generator now
directly imports from files instead of using directory imports.

**`(feat):`** In an effort to make the generated code JSR compatible, we make sure all methods
are strongly typed with return signatures (in this case `_getAuthorizationHeader()`).

**`(fix):`** Generate code snippet for FileDownload endpoint

**`(fix):`** Import for `node-fetch` in `Fetcher.ts` uses a dynamic import instead of `require` which
so that the SDK works in ESM environments (that are using local file output). When the
`outputEsm` config flag is turned on, the dynamic import will be turned into an ESM specific import.

**`(fix):`** The test job in `ci.yml` works even if you have not configured Fern to
generate integration tests.

Without integration tests the test job will run `yarn && yarn test`. With the
integration tests, the test job will delegate to the fern cli `fern yarn test`.

**`(feat):`** Add `allowExtraFields` option to permit extra fields in the serialized request.

```yaml
- name: fernapi/fern-typscript-node-sdk
  version: 0.14.0-rc0
  ...
  config:
    allowExtraFields: true
```


# April 9, 2024

## 0.13.0

**`(internal):`** Support V37 of the IR.


# April 2, 2024

## 0.13.0-rc0

**`(feat):`** Add `retainOriginalCasing` option to preserve the naming convention expressed in the API.
For example, the following Fern definition will generate a type like so:

```yaml
types:
  GetUsersRequest
    properties:
      group_id: string
```

**Before**

```typescript
export interface GetUsersRequest {
  groupId: string;
}

export interface GetUsersRequest = core.serialization.object({
groupId: core.serialization.string("group_id")
})

export namespace GetUsersRequest {
  interface Raw {
    group_id: string
  }
}
```

**After**

```typescript
export interface GetUsersRequest {
  group_id: string;
}

export interface GetUsersRequest = core.serialization.object({
group_id: core.serialization.string()
})

export namespace GetUsersRequest {
  interface Raw {
    group_id: string
  }
}
```


# March 22, 2024

## 0.12.9

**`(fix):`** The generator stopped working for remote code generation starting in `0.12.7`. This is now fixed.

## 0.12.8

**`(feat):`** Enhance serde performance by reducing reliance on async behavior and lazy async dynamic imports.

**`(internal):`** Shared generator notification and config parsing logic.


# March 18, 2024

## 0.12.8-rc0

**`(feat):`** Enhance serde performance by reducing reliance on async behavior and lazy async dynamic imports.


# March 14, 2024

## 0.12.7

**`(feat):`** the SDK will now leverage environment variable defaults, where specified, for authentication variables, such as bearer tokens, api keys, custom headers, etc.

Previously, the SDK would only leverage these defaults for bearer token auth IF auth was mandatory throughout the SDK.


# February 27, 2024

## 0.12.6

**`(fix):`** In Node.js environments the SDK will default to using `node-fetch`. The
SDK depends on v2 of node-fetch to stay CJS compatible.

Previously the SDK was doing `require("node-fetch")` but it should be
`require("node-fetch").default` based on
[https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223](https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223).

## 0.12.5

**`(feat):`** Introduce a custom configuration called `tolerateRepublish` which supports running
npm publish with the flag `--tolerateRepublish`. This flag allows you to publish
on top of an existing npm package.

To turn on this flag, update your generators.yml:

```yaml
groups:
  generators:
    - name: fernapi/fern-typscript-node-sdk
      version: 0.12.5
      ...
      config:
        tolerateRepublish: true
```

## 0.12.4

**`(fix):`** Previously reference.md was just leveraging the function name for the reference, now it leverages the full package-scoped path, mirroring how the function would be used in reality.

```ts
seedExamples.getException(...)

// is now

seedExamples.file.notification.service.getException(...)
```

**`(fix):`** Previously SDK code snippets would not support generation with undiscriminated unions. Now, it does.

## 0.12.2

**`(fix):`** Previously SDK code snippets would not take into account default parameter values
and would always include a `{}`. This was odd and didn't represent how a developer
would use the SDK. Now, the snippets check for default parameter values and omit
if there are no fields specified.

```ts
// Before
client.users.list({});

// After
client.users.list();
```

## 0.12.1

**`(fix):`** Optional objects in deep query parameters were previously being incorrectly
serialized. Before this change, optional objects were just being JSON.stringified
which would send the incorrect contents over the wire.

```ts
// Before
if (foo != null) {
  _queryParams["foo"] = JSON.stringify(foo);
}

// After
if (foo != null) {
  _queryParams["foo"] = foo;
}

// After (with serde layer)
if (foo != null) {
  _queryParams["foo"] = serializers.Foo.jsonOrThrow(foo, {
    skipValidation: false,
    breadcrumbs: ["request", "foo"]
  });
}
```


# February 26, 2024

## 0.12.0

**`(feat):`** support deep object query parameter serialization. If, query parameters are
objects then Fern will support serializing them.

```yaml
MyFoo:
  properties:
    bar: optional

query-parameters:
  foo: MyFoo
```

will now be serialized as `?foo[bar]="...` and appear in the SDK as a regular object

```ts
client.doThing({
  foo: {
    bar: "..."
  }
});
```


# February 15, 2024

## 0.11.5

**`(fix):`** Previously `core.Stream` would not work in the Browser. Now the generated Fern SDK
includes a polyfill for `ReadableStream` and uses `TextDecoder` instead of `Buffer`.

**`(feat):`** add in a reference markdown file, this shows a quick outline of the available endpoints,
it's documentation, code snippet, and parameters.

This feature is currently behind a feature flag called `includeApiReference` and can be used

```yaml
config:
  includeApiReference: true
```

## 0.11.4

**`(fix):`** The `Fetcher` now supports sending binary as a request body. This is important
for APIs that intake `application/octet-stream` content types or for folks that have
.fernignored their and added custom utilities that leverage the fetcher.


# February 13, 2024

## 0.11.3

**`(fix):`** ensure SDK generator always uses `node-fetch` in Node.js environments. There is an experimental
fetch packaged with newer versions of Node.js, however it causes unexpected behavior with
file uploads.

## 0.11.2

**`(fix):`** ensure SDK generator does not drop additional parameters from requests that perform file upload. Previously, if an endpoint had `file` inputs without additional `body` parameters, query parameters were erroneously ignored.

## 0.11.1

**`(fix):`** The SDK generator no longer generates a `tsconfig.json` with `noUnusedParameters` enabled. This check was too strict.

## 0.11.0

**`(feat):`** The SDK generator now forwards information about the runtime that it is being
used in. The header `X-Fern-Runtime` will report the runtime (e.g. `browser`, `node`, `deno`)
and the header `X-Fern-Runtime-Version` will report the version.


# February 11, 2024

## 0.10.0

**`(feat):`** The SDK generator now supports whitelabelling. When this is turned on,
there will be no mention of Fern in the generated code.

**Note**: You must be on the enterprise tier to enable this mode.

## 0.9.7

**`(chore):`** Initialize this changelog


# June 5, 2025

## 4.21.4

**`(feat):`** Add support for HEAD HTTP method in the generated client.


# June 4, 2025

## 4.21.3

**`(fix):`** Fix an issue where the websocket connect method did not correctly yield the websocket client.


# May 27, 2025

## 4.21.2

**`(chore):`** Handle HEAD HTTP method gracefully by treating it as a POST method when constructing the snippet registry, rather than failing.

## 4.21.1

**`(chore):`** Make sure to generate README and Reference even when generating in local mode (if self hosting is enabled).

## 4.21.0

**`(chore):`** Bump to v58 of IR.


# May 20, 2025

## 4.20.3

**`(fix):`** Fix handling of optional and unknown response types by not throwing errors when the response is empty.


# May 13, 2025

## 4.20.2

**`(fix):`** Support formatting the generated README.md and python code snippets.

## 4.20.1

**`(fix):`** Add support for the custom introduction setting in the generated README.md.

## 4.20.0

**`(feat):`** Generate standalone Pydantic models for each class definition for models that utilize the Fern `extends` keyword,
as opposed to generating Pydantic models that implement inheritance.

## 4.19.7

**`(fix):`** Fix mypy errors related to type-shadowing `data` variables in generated streaming endpoints.


# May 11, 2025

## 4.19.6

**`(fix):`** Fix mypy errors related to automatic pagination in the python client.

## 4.19.5

**`(fix):`** Fix naming conflicts in streaming endpoints by renaming the stream method to \_stream in raw clients,
preventing collisions with endpoint parameters that might also be named "stream",
while maintaining proper functionality for streaming responses.

## 4.19.4

**`(feat):`** Fix handling of optional file parameters in multipart form data requests with httpx by properly checking
for None values before attempting to include them in the request, preventing errors when optional file parameters are not provided.


# May 9, 2025

## 4.19.3

**`(fix):`** Fix pagination support in raw clients by properly indexing into response data, ensuring that raw client endpoints with pagination correctly iterate through paginated results.

## 4.19.2

**`(fix):`** Fix SSE streaming response handling by adding proper type casting to sse.data, ensuring correct data type conversion during stream processing.

## 4.19.1

**`(fix):`** Fix a mypy error in pydantic\_utilities.py by properly handling type annotations for Pydantic v1 and v2 compatibility, ensuring type checking passes correctly across different Pydantic versions.

## 4.19.0

**`(feat):`** Add support for generating proper Pydantic models that contain forward references wrapped in containers (e.g. list, optional, etc.)


# May 8, 2025

## 4.18.6

**`(fix):`** Fix string enum generation to properly handle enum values containing quotes by automatically escaping them,
ensuring valid Python syntax for both single and double quoted string literals.

## 4.18.5

**`(fix):`** Support application/x-www-form-urlencoded content type for requests, allowing proper encoding of form data in API calls.

## 4.18.4

**`(fix):`** Fix requirements.txt generation to properly handle dependency version constraints, ensuring compatibility markers are correctly formatted.


# May 6, 2025

## 4.18.2

**`(fix):`** Fix README g

## 4.18.1

**`(fix):`** Update python-v2 generator invocation so that all relevant files like pyproject.toml and poetry.lock are pushed
to the GitHub repository.

## 4.18.0

**`(fix):`** Add support for self-hosted mode, allowing users to push generated SDKs to their own GitHub repositories.
This feature enables organizations to maintain private SDK repositories with custom configurations.


# May 5, 2025

## 4.17.1

**`(fix):`** Fix an issue where response `headers` were not available in the strongly typed error classes.


# May 1, 2025

## 4.18.3

**`(fix):`** Install the generator-cli at build time as a fallback if runtime installation fails.


# April 30, 2025

## 4.17.0

**`(feat):`** Add support for retrieving response headers for each page of paginated responses, instead of just the first page.


# April 29, 2025

## 4.16.2

**`(fix):`** Fixed an issue introduced in 4.14.0, where `bytes` and `text` responses were not handled correctly.


# April 25, 2025

## 4.16.1

**`(internal):`** Fixes an internal release issue in `4.16.0`.

## 4.16.0

**`(feat):`** Add support for retrieving response headers from the generated `ApiError` class.


# April 24, 2025

## 4.15.0

**`(feat):`** Add support for offset step pagination, where the offset position represents the element's index rather
than the page number.

**`(fix):`** Fixed an issue introduced in 4.14.0, where paginated endpoints were not returning the underlying data.

## 4.14.6

**`(fix):`** Fixed an issue where multipart/form-data content types are now explicitly sent when configured in the API definition.


# April 23, 2025

## 4.14.5

**`(fix):`** Fixed an issue introduced in 4.14.0, where SSE streaming responses were not yielded correctly.


# April 22, 2025

## 4.14.4

**`(fix):`** Fixed an issue where filename and plain text content-type parameters were being incorrectly serialized.

## 4.14.3

**`(fix):`** Add support for receiving raw responses from pagination endpoints.


# April 13, 2025

## 4.14.2

**`(fix):`** Fix an issue where TypedDicts with circular references were not correctly serialized.
This issue only affected users that enabled `use_typeddict_requests`.


# April 10, 2025

## 4.14.1

**`(fix):`** The generated GitHub workflow now uses `ubuntu-latest` instead of `ubuntu-20.04`

## 4.14.0

**`(feat):`** Add support for receiving raw responses from streaming endpoints.

**`(feat):`** Add support for excluding types from the generated `__init__.py` files.

```yaml
config:
  exclude_types_from_init_exports: true
```


# April 9, 2025

## 4.13.0

**`(feat):`** Adds support for overriding literal global headers in the client constructor (e.g. `version`).

```python
client = Acme(
  ...
  version="1.0.0",
)
```

## 4.12.1

**`(fix):`** Fixes an issue where dictionary types defined within TypedDicts incorrectly used the
`typing_extensions.NotRequired` type.

**`(fix):`** Fixes an issue where optional `core.File` parameters would cause `mypy` failures.

**`(fix):`** Fixes a regression introduced in 4.12.0, where the non raw response client endpoints
did not respect the allowed method keywords (e.g. `list` was generated as `list_`).

## 4.12.0

**`(fix):`** Resolve issues with paginated endpoints generating incorrect endpoint return types.


# April 8, 2025

## 4.11.0

**`(fix):`** Always represent nullable as Optional rather than NotRequired, only use
NotRequired for optional in typeddicts.


# April 7, 2025

## 4.10.0

**`(feat):`** Add support for using TypedDicts for file upload request parameters. This flag should
be used in conjunction with the `use_typeddict_requests` flag like so:

```yaml
config:
  use_typeddict_requests: true
  use_typeddict_requests_for_file_upload: true
```

## 4.9.0

**`(feat):`** Implement raw client support for accessing response headers and data in unary endpoints.

## 4.8.0

**`(feat):`** Add support for inlining path parameters


# April 3, 2025

## 4.7.0

**`(feat):`** Add support for user-agent header


# April 1, 2025

## 4.6.0

**`(feat):`** Add support for generating legacy wire tests, and disable them by default. These tests will be restored and improved in the future.
Users can opt-in to generating legacy wire tests by setting the `include_legacy_wire_tests` flag to `true` in their configuration.

```yaml
config:
  include_legacy_wire_tests: true
```


# March 28, 2025

## 4.5.0

**`(feat):`** Add support for websocket code generation.


# March 25, 2025

## 4.4.0

**`(feat):`** Add support for raw bytes responses.


# March 24, 2025

## 4.3.21

**`(fix):`** Fix an issue where the default `timeout` was not being respected when a custom `httpx_client` was provided.


# March 19, 2025

## 4.3.20

**`(fix):`** Update formatting across all generated files. There are no behavioral changes, but large diffs are expected.


# March 18, 2025

## 4.3.19

**`(internal):`** Update the IR to v57.


# March 14, 2025

## 4.3.18

**`(fix):`** Fix an issue where the `request_options` parameter name is now properly respected when it's
renamed due to conflicts with other parameter names. Previously, the code would still reference the
original parameter name internally, causing errors.


# March 13, 2025

## 4.3.17

**`(fix):`** Fix an issue where parameter names that conflict with the `request_options` parameter are now properly deconflicted by
prepending an underscore to the `request_options` parameter name.


# March 6, 2025

## 4.3.16

**`(fix):`** Fix an issue where GeneratorExit was unintentionally being swallowed by code blocks within the HttpClient.stream() contextmanager.


# March 5, 2025

## 4.3.15

**`(fix):`** Fix an issue where extraneous NameError-causing update\_forward\_refs invocations were being emitted.


# February 20, 2025

## 4.3.14

**`(feat):`** Set the default number of retries to 2 (was 0) to align with the generated README.


# February 12, 2025

## 4.3.13

**`(feat):`** The Python generator now supports conditioning dependencies on the Python version.


# February 10, 2025

## 4.3.12

**`(feat):`** The Python generator now autogenerates a requirements.txt file.


# January 6, 2025

## 4.3.11

**`(fix):`** pyproject.toml now has a `[project]` block making it Poetry v2 compatible.


# December 20, 2024

## 4.3.10

**`(fix):`** Pagination correctly uses specified defaults to support custom schemes.


# December 8, 2024

## 4.3.9

**`(fix):`** Fix indentation in generated README.md sections to ensure proper formatting and readability.


# November 20, 2024

## 4.3.8

**`(fix):`** Include content-type headers when available as part of endpoint request generation.


# November 19, 2024

## 4.3.7

**`(fix):`** Update multipart endpoint generation to propertly omit optional body parameters.


# November 15, 2024

## 4.3.6

**`(fix):`** Fix README.md and reference.md generation.


# November 14, 2024

## 4.3.5

**`(fix):`** Update README.md snippet builder to omit invalid snippets during readme config generation.


# November 13, 2024

## 4.3.4

**`(fix):`** Update shared http\_client.py to remove omitted entries during file upload requests.


# October 21, 2024

## 4.3.3

**`(fix):`** The generator now writes the reference.md configuration correctly, using `.dict()` instead of `.json()`.

## 4.3.2

**`(fix):`** The generator will now correctly default to the configured global `default_bytes_stream_chunk_size` when the `request_options` parameter is not provided.

## 4.3.1

**`(feat):`** Requests for file download will now allow users to pass in a `chunk_size` option that allows them to receive chunks of a specific size
from the resultant `iter_bytes` invocation on the response byte stream.

Concretely, a user would leverage the following:

```python
client.download(
  ...,
  request_options={
    "chunk_size": 1024    # 1MB
  }
)
```


# October 11, 2024

## 4.2.8

**`(fix):`** The snippet writer now correctly handles base64 strings.


# September 28, 2024

## 4.2.7

**`(fix):`** The generated README will now have a section that links to the generated
SDK Reference (in `reference.md`).

```md
## Reference

A full reference for this library can be found [here](./reference.md).
```


# September 26, 2024

## 4.2.7-rc4

**`(fix):`** Generated readmes now include the parameter name required for the request options parameter within the example snippets.

## 4.2.7-rc3

**`(fix):`** Now, when sending Snippet Templates back to Fern, the generator will not try to coerce a potentially missing ID into the `api_definition_id` field.
This, had been a cause of the error log `Failed to upload snippet templates to FDR, this is ok: one of the hex, bytes, bytes_le, fields, or int arguments must be given`.

## 4.2.7-rc2

**`(fix):`** Pydantic utilities now correctly handles cases where you have a Pydantic model, with a list of pydantic models as a field, where those models have literals.
Effectively, `deep_union_pydantic_objects` now handles lists of objects and merges them appropriately.


# September 23, 2024

## 4.2.7-rc1

**`(fix):`** When leveraging the `include_union_utils` configuration flag, the Pydantic models will no longer include transitive dependencies within
`update_forward_ref` calls, since these should not be necessary. This effectively scopes back the changes introduced in 4.0.0-rc5, which included
changes to improve circular reference handling in Pydantic models.

## 4.2.7-rc0

**`(fix):`** Dynamic header suppliers, as used within the OAuth provider are now invoked on every request, not just the first.
This was a regression introduced within an earlier version that is now fixed. As a results of this fix, the `refresh_token` is now correctly refreshed.


# September 20, 2024

## 4.2.6

**`(fix):`** Serialization utilities (necessary when pydantic aliases are removed) now respects dictionaries as well.

## 4.2.5

**`(fix):`** Parameters of file upload functions now default to OMIT, not None, so that the SDK appropriately
filters out unset parameters, while still allowing for user specified None values.


# September 17, 2024

## 4.2.4

**`(fix):`** Datetime examples are generated correctly once again.
The `pydantic_utilities` file is python 3.8 compatible.


# September 16, 2024

## 4.2.3

**`(fix):`** The content type of file properties is now respected for multipart
requests. For example, if you have a file property called `image` that has the
content type `image/jpeg`, then it will be sent as:

```python
"image": core.with_content_type(file=image, content_type="image/jpeg"),
```

## 4.2.2

**`(fix):`** The content type of non-file properties is now respected for multipart
requests. For example, if you have a type called `metadata` that has the
content type `application/json`, then it will be sent as:

```python
"metadata": (None, json.dumps(jsonable_encoder(metadata)), "application/json"),
```


# September 15, 2024

## 4.2.1

**`(fix):`** When the generator runs bash commands such as `poetry install` and there is a failure,
now the `stderr` and `stdout` is logged to help improve user debugging.


# September 13, 2024

## 4.2.0

**`(feat):`** Allow specifying arbitrary configuration to your packages `pyproject.toml` by adding a `pyproject_toml` block to your configuration
whatever you include in this block will be added as-is to the `pyproject.toml` file. The config, as an example is:

```yaml
config:
  pyproject_toml: |
    [tool.covcheck.group.unit.coverage]
    branch = 26.0
    line = 62.0

    [tool.covcheck.group.service.coverage]
    branch = 30.0
    line = 67.0
```

## 4.1.0

**`(feat):`** Allow specifying pip extras within your `pyproject.toml`. The following config:

```yaml
config:
  extra_dev_dependencies:
    covcheck:
      version: "^0.4.3"
      extras: ["toml"]
```

would add the following to your `pyproject.toml`:

```toml
[tool.poetry.dev-dependencies]
covcheck = { version = "^0.4.3", extras = ["toml"] }
```

## 4.0.0

**`(fix):`** Generated tests that expect an empty result when they are of type `text` (not JSON) now appropriately expect an empty string instead of `None` for async functions as well.
Version 3.3.4 fixed this for sync functions only, which was a bug.


# September 12, 2024

## 4.0.0-rc9

**`(fix):`** All Pydantic V2 warnings have been resolved

### What's been fixed

* json\_encoders have been removed from Pydantic V2, and replaced with a `model_serializer` method.
* additional model construction functions have been added when not leveraging pydantic field aliases to allow users to construct a model from JSOn without the need for dealiasing the object themselves.


# September 11, 2024

## 4.0.0-rc8

**`(fix):`** Pydantic models that call `update_forward_refs` on non-union circular reference dependencies now pass in `localns` for
the current member, a field in Pydantic V1 that provides object contexts to models in the event objects are not fully rebuilt.

## 4.0.0-rc7

**`(fix):`** The generator now respects the old use\_str\_enums flag again, a regression was introduced where only the new flag `enum_type`
was respected.

## 4.0.0-rc6

**`(fix):`** Pydantic models now call update forward refs on non-union circular references. This
prevents runtime errors in certain cases where types self reference itself through
a union.


# September 10, 2024

## 4.0.0-rc5

**`(fix):`** Pydantic models now call update forward refs on non-union circular references. This
prevents runtime errors in certain cases where types self reference itself through
a union.

## 4.0.0-rc4

**`(fix):`** Pydantic models now call update forward refs on non-union circular references. This
prevents runtime errors in certain cases where types self reference itself through
a union.

## 4.0.0-rc3

**`(fix):`** Pydantic models now call update forward refs on non-union circular references. This
prevents runtime errors in certain cases where types self reference itself through
a union.


# September 6, 2024

## 4.0.0-rc2

**`(fix):`** Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic for SDKs that continue using Pydantic aliases.

## 4.0.0-rc1

**`(fix):`** Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic.

### What's been fixed

* Pydantic V2 `.dict` calls are updated to be back to pre-3.10.4 logic. This is fix a regression where nested literals were being omitted due to the Pydantic V2 serializers not respecting the recursive .dict logic, as Pydantic V2 shells out `model_dump` calls to Rust library and serializers, as opposed to recursively calling `model_dump`.
  It is expected that performance will not be degraded given the Rust-based serializers have optimized performance, compared to the Pydantic V1 .dict approach.


# September 5, 2024

## 4.0.0-rc0

**`(fix):`** Rerelease 3.11.0-rc0 as a major version, with a configuration flag to disable the behavior (`use_pydantic_field_aliases`), defaulted to `true` to preserve existing behavior.

**`(internal):`** The generator now shares "as is" files with Pydantic and FastAPI generators.

### What's been fixed

* Rerelease 3.11.0-rc0 as a major version, with a configuration flag to disable the behavior (`use_pydantic_field_aliases`), defaulted to `false` to introduce the break on a major version.
  To maintain parity with pre-3.11.0 behavior, update the flag to `true`:

  ```yaml
  - name: fernapi/fern-python-sdk
    version: 4.0.0-rc0
    config:
      pydantic_config:
        use_pydantic_field_aliases: true
  ```


# September 4, 2024

## 3.11.0-rc0

**`(chore):`** Remove Pydantic field aliases and leverage an internal representation.

### What's been fixed

* Pydantic field aliases are removed and replaced with an internal representation. This allows for more robust handling of field aliases and prevents issues with Pydantic V2 and mypy.
  Previously, you'd have for V1 and V2 compatibility in Pydantic, you'd want to conditionally apply the config class within the base model, however this would lead to mypy errors when filling out a model with it's field alias. To solve this, We used the deprecated `class Config`, regardless of the Pydantic version to satisfy mypy, which lead to warnings in the console.
  Now, we've removed the field aliases and replaced them with an internal representation, which allows us to avoid pydantic config altogether.


# September 2, 2024

## 3.10.8

**`(fix):`** Allow for fields prefixed with the name `model`, a silent break introduced in Pydantic V2.


# August 28, 2024

## 3.10.7

**`(fix):`** When not leveraging mock integration tests, still run pytest over everything, not a specific directory.


# August 16, 2024

## 3.10.6

**`(fix):`** Pagination utilities assume `""` is a terminal signal for pagination.

### What's been fixed

* Cursor-based pagination also assumes `""` is a terminal signal for pagination, same as if the next cursor were `None`.

## 3.10.3

**`(fix):`** Upgrade intermediate representation dependency to safely parse null unknown types.


# August 14, 2024

## 3.10.4

**`(chore):`** Improve performance of Pydantic `.dict` calls

### What's changed

* `.dict` performance is improved, consolidating to a single call to Pydantic's `.dict` instead of 2 in attempts to remove unset optional values.

## 3.10.3

**`(fix):`** Query encoding now appropriately takes arrays of deep objects into account.


# August 13, 2024

## 3.10.2

**`(fix):`** Unions with utils now update forward refs again, a regression that was introduced in version 3.7.0

## 3.10.1

**`(fix):`** If there are no autogenerated examples present, the Python SDK generator no longer fails.


# August 9, 2024

## 3.10.0

**`(feat):`** Introduce forward compatible Python enums

### What's new

* Adds a new flag to generate forward compatible Python enums, as opposed to leveraging raw string enums as literals. This works through addding an "\_UNKNOWN" member to your enum set, the value of which is the raw value of the unrecognized enum.

## 3.9.0

**`(feat):`** Introduce Pythonic naming for discriminated union members through `union_naming` configuration flag.

### What's new

* A new configuration is introduced to make discriminated union member naming more Pythonic. With V1 union naming, member names change from `_` to ``. Concretely, union members previously named `Chat_User` will now be named `UserChat` under the new configuration.

## 3.8.0

**`(chore):`** Generated SDKs now use ruff for linting and formatting instead of Black.


# August 8, 2024

## 3.7.0

**`(chore):`** Python circular referencing types are more robust.

## 3.6.0

**`(feat):`** The generator now respects returning nested properties from the returned object


# August 5, 2024

## 3.5.1

**`(fix):`** Auto-completion for unions leveraging union utils now works as expected.

### What's been fixed

* The root type for unions with visitors now has it's parent typed correctly. This allows auto-complete to work once again on the union when it's nested within other pydantic models.

## 3.5.0

**`(chore):`** Generated code now respects the pydantic version configuration flag.

### What's changed

* Improvement: The generated SDK now respects the pydantic version flag, generating V1 only code and V2 only code if specified. If not, the SDK is generated as it is today, with compatibility for BOTH Pydantic versions. This cleans up the generated code, and brings back features liked wrapped aliases for V1-only SDKs.

## 3.4.2

**`(fix):`** The Python generator now instantiates `Any` types as `Optional[Any]` to be able to mitigate breaks in Pydantic V2.


# August 4, 2024

## 3.4.1

**`(chore):`** Literal templates are generated if they are union members


# August 2, 2024

## 3.4.0

**`(internal):`** Generator code now uses Pydantic V2, no changes to generated code.

### What's changed

* Internal: The SDK generator has now been upgraded to use Pydantic V2 internally. Note that there is no change to the generated code, however by leveraging Pydantic V2 you should notice an improvement in `fern generate` times.

## 3.3.4

**`(chore):`** Address a number of issues within generated unit tests.

### What's been fixed

* Generated tests that expect an empty result when they are of type `text` (not JSON) now appropriately expect an empty string instead of `None`.

### What's changed

* Improvement: Aliased literals are also defaulted within Pydantic models, whereas previously only direct literals were defaulted.
* Improvement: Snippets now provide optional literals in functions and models.

## 3.3.3

**`(fix):`** The generator now allows you to extend aliased types (as long as they're objects).

## 3.3.2

**`(fix):`** Regression in readme generation introduced in 3.3.1

## 3.3.1

**`(fix):`** Generated READMEs now reference RequestOptions as TypedDicts correctly.


# August 1, 2024

## 3.3.0-rc1

**`(fix):`** TypedDict snippets now include literals where available.


# July 31, 2024

## 3.3.0-rc0

**`(internal):`** Upgrade to IR 53.1.0

### What's changed

* Upgrade to IR 53.1.0
* The Python generator now creates snippet templates for undiscriminated unions.


# July 29, 2024

## 3.2.0-rc1

**`(fix):`** The generated README now imports `ApiError` as if it were from outside the module.


# July 25, 2024

## 3.2.0-rc0

**`(feat):`** The Python SDK can now be generated with TypedDicts as inputs.

### What's new

* The Python SDK can now be generated such that inputs to requests are TypedDicts, instead of Pydantic models. This allows for consumers of the SDK to continue to have type hinting and autocomplete, but not need to import new object types when creating requests.


# July 24, 2024

## 3.1.0-rc0

**`(chore):`** The root client is now exported from the main `__init__.py`.

### What's changed

* Improvement: The root client users interact with is now exported from the main `__init__.py`, this allows users to access the client via `from my_sdk import my_sdk_client` as opposed to `from my_sdk.client import my_sdk_client`.

### What's been removed

* Note this comes with an edge-case break. In the unlikely event you have a type that conflicts in naming with the exported root client, that type model is post-fixed with "Model". e.g. a type `Merge` in an SDK exporting a client `Merge` becomes `MergeModel`.

## 3.0.0-rc2

**`(fix):`** `update_forward_refs` no longer raises errors, preserving original behavior, pre-3.x.


# July 23, 2024

## 3.0.0-rc1

**`(fix):`** `expected_types` within our test suite are now typed as `Tuple[typing.Any, typing.Any]`.

### What's been fixed

* Sometimes mypy will error on the typing of `expected_types` within our test suite, despite them being labeled as `typing.Any`. This updates the types for tuples to `typing.Tuple[tying.Any, typing.Any]` to appease mypy.

## 3.0.0-rc0

**`(break):`** The generated models now support Pydantic V2 outright, it no longer uses `pydantic.v1` models.

### What's changed

* The generated models now support Pydantic V2 outright, it no longer uses `pydantic.v1` models.
* Public fields previously prefixed with `_` are now prefixed with `f_` (Pydantic V2 does not allow for `_` prefixes on public fields and Python does not allow for a numeric prefix)

### What's been removed

* wrapped aliases outside of Pydantic V1
* custom root validators outside of Pydantic V1


# July 17, 2024

## 2.15.6

**`(fix):`** The generated python SDK now requires an environment be specified if a default is not provided.

## 2.15.5

**`(fix):`** The generated python SDK Oauth client now no longer checks for an expiry when getting the access token if an expiry field is not configured.


# July 16, 2024

## 2.16.0

**`(feat):`** The generated SDK now allows for specifying whether or not to generate `streaming` functions as overloaded functions or separate functions.


# July 10, 2024

## 2.15.4

**`(fix):`** The generated python SDK now serializes bytes within JSON as a utf-8 encoded string.

## 2.15.3

**`(fix):`** The generated python SDK no longer runs into a recursion error during snippet generation.

## 2.15.2

**`(fix):`** The generated python SDK no longer treats `set` as a reserved word for method names.


# July 9, 2024

## 2.15.1

**`(fix):`** The unchecked base model no longer coerces None to a type.

### What's been fixed

* The unchecked base model no longer coerces None to a type.
* The http client appropriately defaults empty fields within RequestOptions.


# July 3, 2024

## 2.15.0

**`(feat):`** The generated python SDK now respects configured defaults from the API spec.


# July 1, 2024

## 2.14.1

**`(fix):`** typing within the Sync and AsyncPagers is now correctly passed through to the BasePager.

### What's been fixed

* Sync and AsyncPage now pass through the generic type to BasePage, allowing the use of `.items`, etc. to be appropriately typed within your type checking system.

## 2.14.0

**`(fix):`** The offset page now allows for the usage of 0 as a page start.

### What's been fixed

* offset page now allows for the usage of 0 as a page start, previously the use of `page or 1` made Python coerce booleans and become 1, ignoring the user-provided 0.

## 2.14.0-rc3

**`(feat):`** Generated readmes now include an "advanced" section.

### What's changed

* Generated readmes now include an "advanced" section, outlining usage of retries, timeouts, error handling and usage of a custom client.

## 2.14.0-rc2

**`(chore):`** Async snippets now run the async function leveraging asyncio.run to be more copy-pastable.


# June 27, 2024

## 2.14.0-rc1

**`(fix):`** The fix from 2.5.2 is now case-insensitive

### What's been fixed

* the fix from 2.5.2 is now case-insensitive Recap of 2.5.2: `Fix: Support `list`SDK method names instead of defaulting to`list\_`.`


# June 26, 2024

## 2.14.0-rc0

**`(feat):`** The Python SDK now generates an accompanying SDK reference (`reference.md`) for users to review the SDK methods at a glance within the SDK's GitHub repository.


# June 25, 2024

## 2.12.0-rc0

**`(feat):`** README generation now supports a section dedicated to streaming usage, as well as one for paginated endpoints.

### What's new

* Feature: README generation now supports a section dedicated to streaming usage, as well as one for paginated endpoints.

### What's changed

* Improvement: Paginated endpoint snippets now show using an iterator:

## 2.11.0-rc0

**`(chore):`** Snippet templates now support auth variables within the root client.

### What's changed

* Improvement: The SDK now produces templates for the root clients within snippet-template.json. This allows users of the Templates API to pass in data for the auth variables present within the root client.


# June 20, 2024

## 2.13.1-rc0

**`(fix):`** The Python SDK now does not send additional properties via JSON or data if the request is leveraging the other field.

### What's been fixed

* the Python SDK now does not send additional properties via JSON or data if the request is leveraging the other field.

### What's changed

* Improvement: the Python SDK now copies unit tests over to the generated SDK for additional unit testing (separate from wire-format testing).

## 2.13.0-rc0

**`(internal):`** The Python SDK generator is now upgraded to IR V49.

## 2.10.2

**`(fix):`** The SDK now handles stream termination sequences like `[DONE]`.

### What's been fixed

* The SDK now handles stream termination sequences like `[DONE]`. This is a typical way for LLM providers to communicate when the stream has ended.

## 2.10.1

**`(fix):`** Improve the SDK to not leak `JSONDecodeError` to SDK users. Instead, an `ApiError` will be thrown with the text content of the response.

## 2.10.0

**`(feat):`** Add support for higher quality `README.md` generation.

## 2.9.10

**`(fix):`** The generator now only specifies the readme location within pyproject.toml if one was successfully created.


# June 19, 2024

## 2.9.9

**`(internal):`** The generator now consumes IRv46.


# June 18, 2024

## 2.9.8

**`(chore):`** The python generator only adds a publish step in github actions if credentials are specified.


# June 12, 2024

## 2.9.7

**`(fix):`** The unchecked base model stops special casing defaults and pydantic v2.


# June 11, 2024

## 2.9.6

**`(fix):`** Offset based pagination is now 1-based, as opposed to 0 based

### What's been fixed

* Offset based pagination is now 1-based, as opposed to 0 based
* The HTTP client now passes in additional body properties from the request options, even if the body is empty (regression from the client migration in 2.8.0)


# June 10, 2024

## 2.9.5

**`(fix):`** Unions with elements that specify no properties are generated correctly.

### What's been fixed

* Unions with elements that specify no properties are generated correctly.
* Unions with a single type now have a valid type alias (rather than an invalid `typing.Union`).


# June 7, 2024

## 2.9.4

**`(fix):`** The unchecked base model now handles pulling the discriminant from a dict, not just a model/object.


# June 6, 2024

## 2.9.3

**`(fix):`** Snippet templates for discriminated unions now specify the `template_input` property which is required to actually see snippets of instantiating discriminated unions.

## 2.9.2

**`(fix):`** downgrades mypy so we can run it over all our files without concern for their pydantic bug

### What's been fixed

* downgrades mypy so we can run it over all our files without concern for their pydantic bug
* adds typehint to the response variable

## 2.9.1

**`(fix):`** The SDK removes unset query parameters from requests (regression from the client migration in 2.8.0)

### What's been fixed

* The SDK removes unset query parameters from requests (regression from the client migration in 2.8.0)
* The SDK fixes it's type for `files` parameters to the http client (regression from the client migration in 2.8.0)


# June 5, 2024

## 2.9.0

**`(fix):`** Snippets preserve trailing slashes

## 2.9.0-rc1

**`(fix):`** The new http client abstraction ensures a slash is postfixed to the baseurl


# June 4, 2024

## 2.9.0-rc0

**`(chore):`** The Python generator now runs custom unit tests in CI if configured.

## 2.8.2

**`(fix):`** The none-filtering function now supports mypy's invariance check.

## 2.8.1

**`(fix):`** The parameter comment/documentation for timeouts on the root client now reflects the custom timeout passed through within configuration.


# June 3, 2024

## 2.8.0

**`(chore):`** Endpoint function request logic has been abstracted into the request function of the wrapped httpx client.


# May 31, 2024

## 2.6.1

**`(internal):`** this adds a back door token getter function to OAuth clients to better test the functionality.


# May 30, 2024

## 2.7.0

**`(internal):`** Improvement: The generator now outputs an `exampleId` alongside each generated snippet so that we can correlate snippets with the relevant examples. This is useful for retrieving examples from Fern's API and making sure that you can show multiple snippets in the generated docs.

## 2.6.0

**`(chore):`** Support adding optional dependencies and extras to your generated `pyproject.toml`.

### What's changed

* Improvement: Support adding optional dependencies and extras to your generated `pyproject.toml`. To use this configuration, please add the following:

## 2.5.7

**`(fix):`** tests now carry a type annotation for `expected_types` variable.


# May 29, 2024

## 2.5.6

**`(chore):`** Literal values are now all defaulted such that users are not required to plug in a redundant value.

## 2.5.5

**`(fix):`** Auto-Pagination now respects optional return values

### What's been fixed

* Optional lists returned from pagination endpoints are now appropriately flattened such that the `Pager` return types are correctly `Pager[ListItem]` as opposed to `Pager[List[ListItem]]`.


# May 28, 2024

## 2.5.4

**`(internal):`** Add typing library for dateutils in testing lib to satisfy mypy errors.


# May 24, 2024

## 2.5.3

**`(chore):`** Stops specifying custom licenses manually, lets poetry handle adding them.


# May 23, 2024

## 2.5.2

**`(feat):`** Support `list` SDK method names instead of defaulting to `list_`.

## 2.5.1-rc0

**`(fix):`** Literal parameters are added back to the request body.

## 2.5.0-rc2

**`(fix):`** Do not attempt to run `fern test` in CI until the command is more widely rolled out.


# May 22, 2024

## 2.5.0-rc1

**`(chore):`** Address `propogate` -> `propagate` typo in python codegen.

## 2.5.0-rc0

**`(fix):`** This version addresses issues in unit test generation and reenables the creation of unit tests.


# May 21, 2024

## 2.4.0-rc0

**`(fix):`** The Python SDK generator now uses safe names wherever string concat is not used (like in client generation naming), so this will update module and parameter names.

## 2.3.4

**`(fix):`** Snippets and unit tests now correctly write optional request bodies when `inline_request_params` is set to `True`.

### What's been fixed

* Snippets and unit tests now correctly write optional request bodies when `inline_request_params` is set to `True`. Previously the generator wrote snippets that inlined these parameters, which does not match the generated SDK itself.

## 2.3.3

**`(fix):`** Inlined body parameters now deconflict in naming with header and query parameters by prefixing the request objects name.

## 2.3.2

**`(fix):`** The query encoder now correctly handles none values

### What's been fixed

* The `pyproject.toml` generator now writes authors in a valid format for `tool.poetry`, not just `project`
* The query encoder now correctly handles none values

## 2.3.1

**`(fix):`** The `pyproject.toml` generator now includes project URLs when specified.

## 2.3.0

**`(chore):`** Users can now specify information that will appear in their pypi record.


# May 20, 2024

## 2.2.2

**`(fix):`** Inline request parameters now deconflict in naming with the unnamed path parameter arguments.

### What's been fixed

* Inline request parameters now deconflict in naming with the unnamed path parameter arguments. Previously, when inlining request parameters into the method signature, we would not deconflict naming with the unnamed args preceding them. Now, conflicting unnamed parameters are post-fixed with an "\_".


# May 17, 2024

## 2.2.1

**`(internal):`** The generator now uses the latest FDR SDK.


# May 16, 2024

## 2.2.0

**`(chore):`** The generated SDK will now correctly encode deep object query parameters

### What's changed

* The generated SDK will now correctly encode deep object query parameters. For example, if you have an object `{"test": {"nested": "object"}}` as a query parameter, we will now encode it as `test[nested]=object`.


# May 15, 2024

## 2.1.1

**`(chore):`** add enhanced snippet support for streaming endpoints.


# May 14, 2024

## 2.1.0

**`(feat):`** Add support for cursor and offset pagination ("auto-pagination").

## 2.0.1

**`(fix):`** The python generator now only excludes unset fields that are not required.

### What's been fixed

* the python generator previously used `exclude_unset` on pydantic models, however this would remove defaulted values. This change updates this to only exclude none fields that were not required.


# May 9, 2024

## 2.0.0

**`(break):`** Release of the Python SDK generator version 2, updating default configuration.

### What's changed

* The python SDK is now on major version 2, there are no substantial logic changes, however default configuration has changed. To take this upgrade without any breaks, please add the below configuration to your `generators.yml` file:

## 1.7.0-rc0

**`(chore):`** you can now declare a new python version range for your `pyproject.toml`, which will declare a new version range for your pip package.

## 1.6.0-rc0

**`(chore):`** You can now specify dev dependencies from your `generators.yml` file


# May 2, 2024

## 1.5.3-rc0

**`(fix):`** the unchecked basemodel no longer tries to dereference an object if it's null.

## 1.5.2-rc0

**`(chore):`** The python generator now produces sync snippet templates, as opposed to just async templates as it was before


# May 1, 2024

## 1.5.1-rc5

**`(fix):`** Snippet templates now generate the correct imports for object types.

## 1.5.1-rc4

**`(fix):`** The SDK now generates discriminated union snippet templates correctly.

## 1.5.1-rc3

**`(chore):`** Union types leverage the fern aware base model to include JSON and Dict function overrides.

## 1.5.1-rc2

**`(fix):`** The vanilla pydantic base model now respects the `require_optional_fields`

### What's been fixed

* The vanilla pydantic base model now respects the `require_optional_fields`, this became a regression in 1.5.1-rc0 when we started to inline union properties which leverages the vanilla base model.

## 1.5.1-rc1

**`(fix):`** Improve formatting within snippet templates.

### What's been fixed

* Address formatting issues with snippet templates, we now strip newlines off OG snippets as well as plumb through indentation metadata to places that were previously missing it.


# April 30, 2024

## 1.5.0-rc0

**`(feat):`** The generator now supports inlining top-level request parameters instead of requiring users create a request object.


# April 29, 2024

## 1.4.0

**`(feat):`** keyword arguments are now ordered such that required params are ordered before optional params

### What's changed

* keyword arguments are now ordered such that required params are ordered before optional params. Note that since these are kwargs, this is a non-breaking change.
* docstrings now match numpydoc/PEP257 format


# April 26, 2024

## 1.5.1-rc0

**`(fix):`** Discriminated union variants that are objects now have inlined properties instead of extending a base type.


# April 24, 2024

## 1.4.0-rc3

**`(fix):`** pin mypy dependency to 1.9.0 to prevent introducing upstream bugs

### What's been fixed

* Set `mypy` dev dependency in generated `pyproject.toml` to `1.9.0`. This prevents upstream `mypy` bugs from affecting user builds. Note that this is only a dev dependency, so it does not affect the behavior of the SDK.
* Temporarily disable unit test generation.

### What's changed

* Improvement: Use named parameters for all `httpx` request params.


# April 23, 2024

## 1.4.0-rc2

**`(fix):`** Initialize the OAuth token provider member variables to their default values before they are set.


# April 22, 2024

## 1.4.0-rc1

**`(feat):`** The python SDK generator now supports OAuth client generation for the client-credentials flow.

## 1.4.0-rc0

**`(chore):`** Generated clients now follow redirects by default.

### What's changed

* Default generated clients to follow redirects by default, this effectively flips the `follow_redirects_by_default` flag to `True` and can be reverted with the following configuration:

## 1.3.1-rc0

**`(fix):`** the python SDK generator now checks to make sure a header is not null before casting it to a string.

## 1.3.0-rc1

**`(internal):`** add logging for python snippet template generation.


# April 21, 2024

## 1.3.0-rc0

**`(feat):`** Beta: The generator now registers snippet templates which can be used for dynamic SDK code snippet generation.


# April 10, 2024

## 1.2.0-rc2

**`(fix):`** The generator now correctly imports `json` when deserializing server sent events.

## 1.2.0-rc0

**`(internal):`** Consume IR v38

### What's new

* The generator now depends on v38 of Intermediate Representation which requires the latest CLI. As part of this, the generator now supports server sent events using `httpx-sse`.


# April 4, 2024

## 1.1.0-rc3

**`(fix):`** The skip validation code now works as expected.

### What's been fixed

* There are a number of fixes to the skip validation code as well as tests to reflect those updates.

## 1.1.0-rc2

**`(fix):`** The generator now writes the skipped-validation `cast` with a suffixing new line so that the code compiles.

## 1.1.0-rc1

**`(fix):`** The generator no longer attempts to create a version file if Fern does not own generating the full package (e.g. in local generation).

### What's been fixed

* The generator no longer attempts to create a version file if Fern does not own generating the full package (e.g. in local generation). It's too confusing for to make the relevant changes to the package set up, and is also arguably not even needed in local generation.


# April 3, 2024

## 1.1.0-rc0

**`(feat):`** The python SDK now includes a configuration option to skip pydantic validation.

### What's new

* \[EXPERIMENTAL]: The python SDK now includes a configuration option to skip pydantic validation. This ensures that Pydantic does not immediately fail if the model being returned from an API does not exactly match the Pydantic model. This is meant to add flexibility, should your SDK fall behind your API, but should be used sparingly, as the type-hinting for users will still reflect the Pydantic model exactly.

## 1.0.1

**`(fix):`** Address Pydantic break when introducing `pydantic.v1` import within Pydantic V1

### What's been fixed

* Pydantic introduced a "break" to their 1.x libs by adding in a .v1 submodule that does not mirror the one that comes with pydantic v2. To get around this we now force the usage of the v1 submodule only if the pydantic version is v2.

## 0.13.4

**`(fix):`** revert changes introduced within 0.12.2

### What's been fixed

* revert the change from 0.13.2, the stream call returns a context manager, which is not awaited. The issue that this was meant to solve was actually fixed in version `0.12.2`.


# April 2, 2024

## 1.0.0

**`(break):`** The python SDK now defaults new (breaking configuration) to introduce general improvements.

### What's changed

* Break: The python SDK now defaults new (breaking configuration) to introduce general improvements.
* Improvement: The python SDK now supports specifying whether or not to follow redirects in requests by default, and exposes an option to override that functionality for consumers.


# March 28, 2024

## 0.13.3

**`(fix):`** Github workflows for publishing now work again (previously the trigger was incorrect).

## 0.13.2

**`(fix):`** Asynchronous calls to `httpx.stream` are now awaited. This is applicable to any file download or JSON streaming (chat completion) endpoints.


# March 26, 2024

## 0.13.1

**`(feat):`** discriminant values in unions are now defaulted such that callers no longer need to specify the discriminant


# March 25, 2024

## 0.13.0

**`(feat):`** the python SDK now exposes it's version through `__version__` to match module standards and expectations.


# March 22, 2024

## 0.12.5

**`(fix):`** the python SDK uses the timeout provided to the top level client as the default per-request

### What's been fixed

* the python SDK uses the timeout provided to the top level client as the default per-request, previously if there was no timeout override in the RequestOptions, we'd default to 60s, even if a timeout was provided at the client level.


# March 19, 2024

## 0.12.4

**`(chore):`** Allow full forward compat with enums while keeping intellisense by unioning enum literals with `typing.AnyStr`.


# March 18, 2024

## 0.12.3

**`(feat):`** Allow bytes requests to take in iterators of bytes, mirroring the types allowed by HTTPX.

## 0.12.2

**`(fix):`** Fix the returned type and value contained within the retrying wrapper for the HTTPX client (http\_client.py).


# March 14, 2024

## 0.12.1

**`(chore):`** Improves example generation and snippets for union types, as well as multi-url environments.

### What's been fixed

* Stringifies header arguments, HTTPX was previously hard failing for certain types

### What's changed

* Improves example generation and snippets for union types, as well as multi-url environments.


# March 11, 2024

## 0.12.0

**`(feat):`** Auto-generated unit and integration tests against a mock server.

### What's new

* Beta: The SDK now generates tests leveraging auto-generated data to test typing, as well as wire-formatting (e.g. the SDKs are sending and receiving data as expected). This comes out of the box within the generated github workflow, as well as through the fern cli: `fern test --command "your test command"`.


# March 8, 2024

## 0.11.10

**`(feat):`** Expose a feature flag to pass through additional properties not specified within your pydantic model from your SDK.

### What's new

* Expose a feature flag to pass through additional properties not specified within your pydantic model from your SDK. This allows for easier forward compatibility should your SDK drift behind your spec.


# March 4, 2024

## 0.11.9

**`(chore):`** use docstrings instead of Pydantic field descriptions.


# March 2, 2024

## 0.11.8-rc1

**`(feat):`** Introduces a `max_retries` parameter to the RequestOptions dict accepted by all requests.

### What's changed

* Beta: Introduces a `max_retries` parameter to the RequestOptions dict accepted by all requests. This parameter will retry requests automatically, with exponential backoff and a jitter. The client will automatically retry requests of a 5XX status code, or certain 4XX codes (429, 408, 409).


# February 27, 2024

## 0.11.8-rc0

**`(feat):`** introduces additional configuration to customize the client class and file name.

### What's changed

* Beta: Introduce a `client` custom config that allows you to specify class\_name and filename for the client. This configuration can be used in several ways:

## 0.11.7

**`(feat):`** Introduces a flag `use_str_enums` to swap from using proper Enum classes to using Literals to represent enums.

### What's changed

* Introduces a flag `use_str_enums` to swap from using proper Enum classes to using Literals to represent enums. This change allows for forward compatibility of enums, since the user will receive the string back.


# February 26, 2024

## 0.11.6

**`(feat):`** You can now specify envvars to scan for headers, not just auth scheme headers.


# February 23, 2024

## 0.11.5

**`(fix):`** Fix the usage of ApiError when leveraging auth envvars, when the schema for ApiError was changed, this usage was missed in the update.

## 0.11.4

**`(fix):`** We now grab enum values appropriately when enums are within unions.


# February 22, 2024

## 0.11.3

**`(fix):`** Transition from lists to sequences within function calls

### What's been fixed

* Transition from lists to sequences within function calls, this is a fix as a result of how mypy handles type variance. This fix is only for function calls as testing shows that we do not hit the same issue within mypy with list\[union\[\*]] fields on pydantic objects.

### What's changed

* Improvement: The Python SDK generator now defaults to `require_optional_fields = False`. This means that any requests that have optional fields no longer require a user to input data (or a `None` value) in.


# February 21, 2024

## 0.11.2

**`(feat):`** introduce configuration to flatten the directory structure

### What's changed

* Improvement (Beta): The Python generator now supports a configuration option called `improved_imports`.


# February 20, 2024

## 0.11.1

**`(feat):`** Python now supports specifying files to auto-export from the root `__init__.py` file

### What's changed

* Python now supports specifying files to auto-export from the root `__init__.py` file, this means you can export custom classes and functions from your package for users to access like so:
* Add a docstring for base clients to explain usage, example:


# February 19, 2024

## 0.11.0

**`(feat):`** Python now supports a wider range of types for file upload

### What's been fixed

* Python now supports API specifications that leverage lists for file upload. Previously, Fern incorrectly made all `list` type requests simply `file`.

### What's changed

* Python now supports a wider range of types for file upload, mirroring the `httpx` library used under the hood, these are grouped under a new type `File`:

## 0.10.3

**`(fix):`** Several bugfixes were made to related to literal properties

### What's been fixed

* Several bugfixes were made to related to literal properties. If a literal is used as a query parameeter, header, path parameter, or request parameter, the user no longer has to explicitly pass it in.


# February 18, 2024

## 0.10.2

**`(fix):`** The SDK always sends the enum wire value instead of the name of the enum.

### What's been fixed

* The SDK always sends the enum wire value instead of the name of the enum.
* Revert #2719 which introduced additional issues with circular references within our Python types.


# February 14, 2024

## 0.10.1

**`(feat):`** Add support for a RequestOptions object for each generated function within Python SDKs

### What's changed

* Add support for a RequestOptions object for each generated function within Python SDKs. This parameter is an optional final parameter that allows for configuring timeout, as well as pass in arbitrary data through to the request. RequestOptions is a TypedDict, with optional fields, so there's no need to instantiate an object, just pass in the relevant keys within a dict!


# February 13, 2024

## 0.10.0

**`(break):`** The generator no longer supports Python 3.7

### What's been removed

* The generator no longer supports Python 3.7
* The `backports` dependency has been removed


# February 11, 2024

## 0.9.1

**`(fix):`** Remove literals from SDK function signatures, as they are not modifiable for end users

### What's been fixed

* Remove literals from SDK function signatures, as they are not modifiable for end users.
* Acknowledge the optionality of a `File` property, previously we were requiring all `File` type inputs, even if they were specified as optional within the OpenAPI or Fern definition. Now, we check if the parameter is required and make the parameter optional if it is not.

## 0.9.0

**`(feat):`** The SDK generator now supports whitelabelling

### What's new

* The SDK generator now supports whitelabelling. When this is turned on, there will be no mention of Fern in the generated code.


# January 29, 2024

## 0.8.3-rc0

**`(fix):`** Increase recursion depth to allow for highly nested and complex examples

### What's been fixed

* Increase recursion depth to allow for highly nested and complex examples, this is a temporary solution while the example datamodel is further refined.


# January 28, 2024

## 0.8.2-rc0

**`(fix):`** The Python SDK better handles cyclical references

### What's been fixed

* The Python SDK better handles cyclical references. In particular, cyclical references are tracked for undiscriminated unions, and update\_forward\_refs is always called with object references.


# January 26, 2024

## 0.8.1

**`(feat):`** The generated SDK respects environment variables for authentication if specified

### What's new

* If the auth scheme has environment variables specified, the generated python client will scan those environment variables.


# January 25, 2024

## 0.8.0

**`(fix):`** Enums in inlined requests send the appropriate value.


# January 21, 2024

## 0.7.7

**`(internal):`** Initialize the changelog


# June 3, 2025

## 1.2.0

**`(feat):`** Add support for generating `README.md` when filesystem publishing is enabled.


# May 22, 2025

## 1.1.0

**`(feat):`** Add support for HEAD method requests. These client methods return the raw `http.Header` type.

**`(fix):`** Update the file header to follow `go:generate` naming conventions. For details, see
[https://pkg.go.dev/cmd/go#hdr-Generate\_Go\_files\_by\_processing\_source](https://pkg.go.dev/cmd/go#hdr-Generate_Go_files_by_processing_source)


# May 20, 2025

## 1.0.0

**`(feat):`** Major version release to update the generator's default set of configuration options.
The following configuration options have been updated:

* `alwaysSendRequiredProperties` is now `true` by default.
* `inlineFileProperties` is now `true` by default.
* `inlinePathParameters` is now `true` by default.
* `useReaderForBytesRequest` is now `true` by default.
* `union` is now `v1` by default.


# May 14, 2025

## 0.38.0

**`(feat):`** Add support for the `useReaderForBytesRequest` configuration option, which generates
`io.Reader` request parameters instead of `[]byte` request parameters.


# May 13, 2025

## 0.37.5

**`(fix):`** Add support for the custom introduction setting in the generated README.md.


# May 8, 2025

## 0.37.4

**`(fix):`** Fix an issue where enum values containing double quotes were not properly escaped in generated code.


# May 1, 2025

## 0.37.3

**`(fix):`** Install the generator-cli at build time as a fallback if runtime installation fails.


# March 13, 2025

## 0.37.2

**`(fix):`** Fix an issue where the `go-v2` generator call prevented the `go` generator from succeeding in remote code generation environments.

## 0.37.1

**`(fix):`** Fix an issue where the primary Go files were not being written due to README.md generation.

## 0.37.0

**`(internal):`** Upgrade to IRv57.

**`(feat):`** Add support for automatic `README.md` generation.


# February 17, 2025

## 0.36.5

**`(fix):`** Fix an issue where `map` values were not correctly serialized as deep object query parameters.


# February 5, 2025

## 0.36.4

**`(fix):`** Fix an issue where the `go-v2` generator call prevented the `go` generator from succeeding in remote code generation environments.


# February 4, 2025

## 0.36.3

**`(fix):`** Fix an issue where the version header specified by the user wasn't being used.


# January 26, 2025

## 0.36.2

**`(fix):`** Fix cursor pagination stopping condition when the cursor types do not match (e.g. a `*string` cursor type with a `string` next cursor type).


# January 23, 2025

## 0.36.1

**`(fix):`** Fix offset pagination method generation for non-integer offset parameters (e.g. `float64`).


# January 22, 2025

## 0.36.0

**`(feat):`** Adds support for a few new configuration options, all of which are shown below:

```yaml - name: fern-api/fern-go-sdk
  version: 0.36.0
  config:
    packageLayout: flat
    clientName: Acme
    clientConstructorName: New
```

With this, the generated SDK will all be deposited at the root of the module, and the client can be constructed like so:

````go package main
import (
  "context"
  "fmt"
  "log"
  acme "github.com/acme/acme-go"
)
func main() {
  client := acme.New()
  response, err := client.GetUser(
    context.Background(),
    &acme.GetUserRequest{
      ID: "85307b0b-094b-41b5-b61d-347ca15e5da2",
    },
  )
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(response)
} ```

````


# January 17, 2025

## 0.35.2

**`(fix):`** Fixes an issue where certain literal string values were incorrectly generated in undiscriminated unions.

**`(fix):`** Fixes an issue where custom names applied to a basic auth scheme were not preserved.


# January 3, 2025

## 0.35.1

**`(fix):`** Fixes an issue where the delimiter length was included during stream data read, even when the delimiter was missing, leading to a `bufio.ErrAdvanceTooFar` error


# December 12, 2024

## 0.35.0

**`(feat):`** Add runtime validation for discriminated unions to prevent users from accidentally sending the wrong type of value. With this, users will be expected to set exactly one of the union's values like so:

````go package example
type Animal struct {
  Type string
  Cat  *Cat
  Dog  *Dog
}
func do() {
  union := &Animal{
    Cat: &Cat{
      Name: "Fluffy",
    },
  }
} ```
If the user sets _both_ `Cat` and `Dog`, the user will receive an error when the type is serialized to JSON (i.e. in the `json.Marshaler` implementation).

## 0.34.0
**`(feat):`** Add support for sending the `User-Agent` header on every request. Go packages are uniquely identified by their full module path, so the `User-Agent` header is generated in the `/` format, e.g.
``` User-Agent: github.com/acme/acme-go/1.0.0 ```

````


# November 21, 2024

## 0.33.0

**`(feat):`** Add support for the `inlinePathParameters` configuration option, which generates path parameters in the generated request type (if any) instead of as separate positional parameters.

```yaml # generators.yml
- name: fern-api/fern-go-sdk
  version: 0.33.0
  config:
    inlinePathParameters: true
```


# November 20, 2024

## 0.32.1

**`(internal):`** Improve the aesthetics of the generated code, and reduce the amount of repetition in each of the generated endpoints. This change has zero impact on the behavior of the generated SDK.


# November 18, 2024

## 0.32.0

**`(feat):`** Add support for the `inlineFileProperties` configuration option, which generates file properties in the generated request type instead of as separate positional parameters.

```yaml # generators.yml
- name: fern-api/fern-go-sdk
  version: 0.32.0
  config:
    inlineFileProperties: true
```

**`(fix):`** Fixes an issue where the new `core.MultipartWriter` was generated for SDKs that didn't define any file upload endpoints.

**`(internal):`** Simplify the generated code from the new `core.MultipartWriter` introduced in 0.29.0 by refactoring `internal.WithMultipartContentType` as `internal.WithDefaultContentType`.

## 0.31.3

**`(fix):`** Updates the retrier to stop retrying on `409 Conflict` HTTP status codes by default.


# November 15, 2024

## 0.31.2

**`(internal):`** Add an `internal` package, which now contains the internal functionality previously included in the `core` package (e.g. `core.Caller` -> `internal.Caller`).
Although technically a breaking change in terms of the module itself, this change was always the intention, and should have zero impact on users.
Any `core` type that is meant for public consumption remains in the exported `core` package (e.g. `core.APIError` and `core.RequestOption`).

## 0.31.1

**`(internal):`** Adds additional tests to confirm the behavior of the `core.Retrier`.
No functional, user-facing changes are included.


# November 14, 2024

## 0.31.0

**`(feat):`** Improves type file layout with zero impact on backwards compatibility.
Shared types are now more accurately placed in the `types.go` file, whereas types referenced by a single service are now placed in a file that matches the service's filename (e.g. user.go).


# November 8, 2024

## 0.30.0

**`(feat):`** Add support for nil-safe getter methods. Callers can more easily access nested properties by chaining together getter method calls instead of a long series of `!= nil` checks.

## 0.29.0

**`(feat):`** All SDKs now include an exported `FileParam` type that can be used to configure the `Content-Type` of file upload properties.

**`(fix):`** Resolves an issue where multipart/form-data lists were incorrectly serialized as JSON. They are now added as individual parts.

**`(internal):`** Refactor file upload endpoint generation with the new `core.MultipartWriter`. This significantly improves the aesthetics of the generated code.


# November 7, 2024

## 0.28.3

**`(internal):`** Upgrade to IRv53.


# November 6, 2024

## 0.28.2

**`(fix):`** Fix an issue where undiscriminated unions were not round-trippable whenever the union is the zero value of the type (e.g. `0` for `int`).


# October 29, 2024

## 0.28.1

**`(fix):`** Fix an issue where optional, allow-multiple query parameter snippets were not rendered.

**`(fix):`** Fix an issue where service headers were not included in the generated in-lined request.

**`(fix):`** Fix an issue where literal types were included as path parameter arguments.


# October 25, 2024

## 0.28.0

**`(feat):`** Add support for the exportedClientName configuration, which can be used to customize the generated client name and constructor included in snippets.
Note that this configuration option assumes that the SDK includes a hand-written client constructor defined in the client package.


# September 29, 2024

## 0.27.0

**`(feat):`** Add support for SSE (Server-Sent Events) streaming responses. The user-facing interface for streaming responses remains the same between standard HTTP streaming and SSE.


# September 26, 2024

## 0.26.0

**`(feat):`** Add support for sending custom Content-Type header values defined in the API.


# September 9, 2024

## 0.25.0

**`(feat):`** Add support for sending extra body properties and query parameters via `RequestOption`.


# September 8, 2024

## 0.24.0

**`(feat):`** Add support for reading headers from environment variables (e.g. `X-API-Version`).


# September 6, 2024

## 0.23.7

**`(fix):`** Fixes an issue where optional `unknown` values (typed as `interface{}`) were mistakenly dereferenced.


# September 5, 2024

## 0.23.6

**`(internal):`** No changes.

## 0.23.5

**`(fix):`** Fix an issue where `long` type examples (generated as `int64` in Go) were not successfully converted to their equivalent `string` representation for snippets.


# August 30, 2024

## 0.23.4

**`(internal):`** No changes.

## 0.23.3

**`(internal):`** No changes.


# August 26, 2024

## 0.23.2

**`(internal):`** No changes.


# August 19, 2024

## 0.23.1

**`(fix):`** Fix literal value deserialization.

### What's changed

* Updates object and undiscriminated union deserialization to return an error whenever any literal values do not exist or are mismatched.


# August 7, 2024

## 0.23.0

**`(feat):`** Add support for always sending required properties.

### What's new

* Added the `alwaysSendRequiredProperties` configuration option. When `alwaysSendRequiredProperties` is enabled, required properties are never omitted in the type's wire representation. Any required property that is not explicitly set will send the default value for that type.


# July 22, 2024

## 0.22.3

**`(fix):`** Fix an issue where APIs that specify the `property-name` error discrimination strategy would receive JSON decode errors instead of the server's error.


# July 4, 2024

## 0.22.2

**`(fix):`** Request types set to `nil` no longer send an explicit `null` value.


# June 11, 2024

## 0.22.1

**`(fix):`** Array of `deepObject` query parameters are correctly serialized.


# May 21, 2024

## 0.22.0

**`(feat):`** Add support for retrieving extra properties from response objects.

### What's new

* Extra properties decoded from response objects are retained and accessible via the `GetExtraProperties` method.


# May 17, 2024

## 0.21.3

**`(internal):`** The generator now uses the latest FDR SDK.


# May 7, 2024

## 0.21.2

**`(fix):`** In-lined request body properties no longer include a non-empty `url` struct tag.


# April 29, 2024

## 0.21.1

**`(fix):`** The Go generator now escapes path parameters that would previously create invalid URLs (e.g. "\example").

**`(internal):`** Refactor endpoint URL mapping with `core.EncodeURL`.

## 0.21.0

**`(feat):`** Add support for cursor and offset pagination.


# April 26, 2024

## 0.20.2

**`(internal):`** Enhance extra property serialization performance.

**`(internal):`** Generate additional extra property tests into the SDK.

**`(fix):`** Resolve a non-deterministic key ordering issue for snippets of type `unknown`.

**`(fix):`** Resolve an issue with discriminated union serialization.


# April 25, 2024

## 0.20.1

**`(fix):`** The `omitempty` struct tag is now only used for nil-able types.

**`(fix):`** Update the query encoder to prevent unintentional errors whenever the `omitempty` is used for a non-optional field.


# April 24, 2024

## 0.20.0

**`(feat):`** The Go generator now supports extra properties.


# April 16, 2024

## 0.19.0

**`(feat):`** The Go generator now supports environment variable scanning.


# April 15, 2024

## 0.18.3

**`(fix):`** Path parameters are now applied in the correct order.


# April 2, 2024

## 0.18.2

**`(fix):`** Custom authorization header schemes had their values overridden by request options, which required using the generated request option at every call-site.


# March 12, 2024

## 0.18.1

**`(fix):`** Go snippets correctly handle unknown examples.


# March 4, 2024

## 0.18.0

**`(feat):`** Add support for simpler unions, which is configurable with `union: v1` (if omitted, the default `v0` version will be used).

**`(feat):`** Add support for multiple files in upload endpoints.


# February 26, 2024

## 0.17.0

**`(internal):`** No changes since previous release candidate.


# February 23, 2024

## 0.17.0-rc1

**`(fix):`** Snippets for aliases to optional primitive values.


# February 21, 2024

## 0.17.0-rc0

**`(fix):`** Package documentation is now generated into the correct package's `doc.go`.

**`(feat):`** Add support for generated endpoint snippets.


# February 12, 2024

## 0.16.0

**`(feat):`** The generator now supports whitelabelling.


# February 9, 2024

## 0.15.0

**`(feat):`** Enforce RFC3339 for date\[time] serialization in request bodies.


# February 7, 2024

## 0.14.1

**`(fix):`** Query parameter support for optional `time.Time` types.


# February 6, 2024

## 0.14.0

**`(feat):`** Add support for `deepObject` query parameters.

**`(chore):`** Refactor query parameter serialization with `url` struct tags.


# January 31, 2024

## 0.13.0

**`(feat):`** Add `packageName` generator configuration.

**`(feat):`** Add support for `bytes` request bodies wrapped in an in-lined request.

## 0.12.1

**`(fix):`** `text/plain` response handling.


# January 30, 2024

## 0.12.0

**`(feat):`** Add support for `bytes` request bodies with `Content-Type` set to `application/octet-stream`.


# January 29, 2024

## 0.11.0

**`(feat):`** Add automatic retry with exponential backoff.


# January 25, 2024

## 0.10.0

**`(feat):`** Refactor `ClientOption` as `RequestOption`.

**`(feat):`** Add `includeLegacyClientOptions` generator configuration.

**`(feat):`** Support idempotency headers as a special `RequestOption` only available on idempotent endpoints.

**`(fix):`** Placement of path parameter documentation.

**`(fix):`** Naming collision issue for undiscriminated unions that define more than one literal.


# January 10, 2024

## 0.9.4

**`(fix):`** File upload requests that specify query parameters.


# December 4, 2023

## 0.9.3

**`(fix):`** Optional query parameter dereferencing issue.


# November 30, 2023

## 0.9.2

**`(fix):`** Append version suffix for modules tagged with major versions greater than `1.X.X`.


# November 8, 2023

## 0.9.1

**`(fix):`** Support boolean literals.

**`(fix):`** Union subtypes with no properties are now go 1.13 compatible.


# October 31, 2023

## 0.9.0

**`(feat):`** Add support for streaming endpoints.

**`(feat):`** Add support for non-primitive file upload properties.

**`(chore):`** Refactor `core.DoRequest` with `core.Caller` abstraction.

**`(chore):`** Update pinned dependencies in generated `go.mod`.


# June 3, 2025

## 1.17.5

**`(internal):`** Update the IR to v58.


# May 16, 2025

## 1.17.4

**`(fix):`** Mock the OAuth endpoint for the wire tests.


# May 13, 2025

## 1.17.3

**`(fix):`** Add support for the custom introduction setting in the generated README.md.


# May 4, 2025

## 1.17.1

**`(chore):`** Self hosted github user defaults to `fern-api[bot]`.

## 1.17.0

**`(feat):`** Added support for pushing to GitHub.


# May 1, 2025

## 1.17.2

**`(fix):`** Install the generator-cli at build time as a fallback if runtime installation fails.


# April 23, 2025

## 1.16.3

**`(feat):`** Upgrade Csharpier formatter to `1.*` for faster and better formatting.


# April 22, 2025

## 1.16.2

**`(feat):`** Add `root-client-class-access` configuration option to control the access modifier of the root client class.
`root-client-class-access` defaults to `public`, but can be set to `internal` to make the root client class internal.

**`(fix):`** Pin `csharpier` formatter to `0.*` to avoid breaking changes in the formatter.


# April 11, 2025

## 1.16.1

**`(feat):`** Make minor improvements to the ReadOnlyAdditionalProperties and AdditionalProperties properties for internal usage.


# April 10, 2025

## 1.16.0

**`(feat):`** Add read-only and writeable additional properties for request and response types.

Example:

```csharp
var request = new FooRequest
{
    Id = "123",
    AdditionalProperties =
    {
        ["extra1"] = new { value = 42 },
        ["extra2"] = DateTime.Now,
        ["extra3"] = 99
    }
};

var response = await client.Foo.CreateAsync(request);

Dictionary jsonElements = response.AdditionalProperties.ToJsonElementDictionary();
Dictionary extra1 = jsonElements["extra1"].Deserialize>();
DateTime extra2 = jsonElements["extra2"].GetDateTime();
int extra3 = jsonElements["extra3"].GetInt32();
```

To enable this feature, configure `experimental-additional-properties: true` in the `config` section of your C# generator in generators.yml.
This will become the default in the future.


# April 7, 2025

## 1.15.14

**`(fix):`** Fix issue where read-only list properties wouldn't deserialize correctly.


# April 1, 2025

## 1.15.13

**`(chore):`** Mark `AdditionalProperties` property as experiment using XML docs.


# March 31, 2025

## 1.15.12

**`(fix):`** Fallback from `init` to `set` on .NET Framework & .NET Standard 2.0 for public and protected properties.
This ensures the properties can be set on older TFMs without compilation errors.


# March 25, 2025

## 1.15.11

**`(chore):`** Restructure internal HTTP classes to allow for more granular Fern ignoring.


# March 22, 2025

## 1.15.10

**`(fix):`** Fix generated tests that fail because of types containing OneOf or ReadOnlyMemory properties.


# March 21, 2025

## 1.15.9

**`(fix):`** Significantly improve performance of the generator itself by asynchronously formatting snippets in parallel.
For example, Square's SDK generates in less than 20 seconds as opposed to more than 3 minutes previously.

## 1.15.8

**`(fix):`** Fix issue where the `FileParameter` class was not generated in projects with gRPC/proto endpoints.


# March 19, 2025

## 1.15.6

**`(fix):`** Make tests pass that compare JSON strings regardless of how it is formatted by ignoring whitespace.

## 1.15.5

**`(fix):`** Fix issue where headers were shared across different client instantiations when they should maintain their own state.


# March 18, 2025

## 1.15.4

**`(feat):`** Make `FileParameter` disposable.

## 1.15.3

**`(fix):`** Fix multipart form tests and add charset tests for multipart form tests.

## 1.15.2

**`(fix):`** Fix a compilation error when using typed idempotency headers.


# March 17, 2025

## 1.15.1

**`(fix):`** If a Content-Type header does not include charset, make sure the charset is also not included in the HTTP request.

## 1.15.0

**`(feat):`** Add `AdditionalHeaders` to client and request options. This lets users add and override headers for each request.


# March 14, 2025

## 1.14.3

**`(fix):`** Escape summary node contents in XML doc comments to prevent XML parsing errors.


# March 13, 2025

## 1.14.2

**`(fix):`** Fix issue a NullReferenceException for generated root clients with typed headers in client options.

## 1.14.1

**`(fix):`** Fix issue where a type is written but conflicts with the namespace it is written in.

## 1.14.0

**`(feat):`** The SDK now supports the `AdditionalBodyProperties` and `AdditionalQueryParameters` request options, which
can be used to add arbitrary properties to the request. This is useful for interacting
with alpha or undocumented functionality.

```csharp
var response = await client.Users.Create(
  ...,
  new RequestOptions {
    AdditionalBodyProperties = new Dictionary {
      { "key", "value" }
    },
  }
);
```

## 1.13.2

**`(fix):`** Fix issue where MultipartFormTests wouldn't pass because the timezone on the local machine is different than the timezone on the CI machine.

## 1.13.1

**`(fix):`** Forward compatible enums has a static method `Custom(string value)` that allows you to create a new instance of the enum with a custom value.
"Custom" is a commonly used enum value, and we want to avoid conflicts with the static method, so we're renaming the static method to `FromCustom(string value)`.
This feature is gated behind the `experimental-enable-forward-compatible-enums` configuration option, so we're accepting this as a breaking change without a major version bump.

**`(feat):`** Forward compatible enums can be explicitly casted from and to strings.

```csharp
string myEnumAsString = (string)MyEnum.Enum1;
MyEnum myEnum = (MyEnum)"custom-value";
```

Note: We're not supporting implicit casts here because it could lead to behavior the user doesn't expect.

## 1.13.0

**`(feat):`** Add support for multipartform requests with file and non-file parameters.
This is useful when you want to send a file along with other form data in a single request.

For example, you can use the following code to upload a file with a description and some metadata:

```csharp
await client.UploadAsync(
    new UploadRequest
    {
        File = new FileParameter { Stream = fileStream, FileName = "file.txt" },
        Description = "This is a test file",
        Meta = new Meta {
            Key1 = "value1",
            Key2 = "value2"
        }
    }
);
```


# March 10, 2025

## 1.12.0-rc18

**`(fix):`** Make the behavior between a wrapped request with body properties and normal body request consistent.
Previously, a wrapped request with body properties would not omit `null` values even if the JSON configuration is configured to omit `null` values.

**`(fix):`** Fix a bug where required properties that were `[JsonIgnore]` threw an error during serialization.

**`(feat):`** Improve performance of query string value to string conversion by relying less on `JsonSerializer` and more on `ToString()`.


# March 9, 2025

## 1.12.0-rc17

**`(fix):`** Generate snippets for unions when `use-discriminated-unions` is `true` in the generator configuration.

## 1.12.0-rc16

**`(fix):`** Remove hardcoded namespace import from JsonElementComparer.cs

## 1.12.0-rc15

**`(feat):`** Generate **discriminated unions** with:

* Type safety with compile-time checking
* Exhaustive discriminant value matching
* JSON serialization support

Here's a simple example how to use a shape discriminated union:

```csharp
var shape = new Shape(new Circle { Radius = 5 });

// Type checking
if (shape.IsCircle) {
    Console.WriteLine($"Radius: {circle.AsCircle().Radius}");
}

// Discriminant value matching
var area = shape.Match(
    circle => Math.PI * circle.Radius * circle.Radius,
    square => square.Length * square.Length,
    (type, _) => throw new NotSupportedException($"Unknown: {type}")
);

// TryAs pattern
if (shape.TryAsCircle(out var circle)) {
    Console.WriteLine($"Radius: {circle.Radius}");
}
```

This feature is off by default for backward compatibility.
To enable it, set `use-discriminated-unions` to `true` in the generator configuration.

**`(feat):`** Improved serialization tests for generated classes for normal objects and discriminated unions.

**`(feat):`** Generated classes now follow the C# convention for odering consts, fields, constructors, properties, methods, operators, and inner classes.


# March 7, 2025

## 1.12.0-rc14

**`(feat):`** Add support for overriding literal global headers via the `ClientOptions` class.

## 1.12.0-rc13

**`(feat):`** Add support for receiving additional properties in object types with the new `AdditionalProperties` field.
This is useful when you want to parse an object that has properties that are not available in the SDK
(e.g. alpha and/or undocumented properties).

```csharp
// Call the endpoint.
var response = await client.GetUser(...);

// Print the additional properties.
Console.WriteLine(response.AdditionalProperties);
```


# March 5, 2025

## 1.12.0-rc12

**`(fix):`** Don't rely on the `FluentAssertions.Json` package to test serialization and deserialization.


# March 4, 2025

## 1.12.0-rc11

**`(internal):`** Update the IR to v57.

## 1.12.0-rc10

**`(feat):`** Compare .NET objects instead of JSON strings when comparing objects in mock wire tests.
With this change, we can remove the dependency on the FluentAssertions.Json package (and implicitly on the Newtonsoft.Json package).

**`(chore):`** Update dependencies in generated test project:

* `Microsoft.NET.Test.Sdk`: 17.12.0 => 17.13.0
* `NUnit`: 4.2.2 => 4.3.2
* `NUnit3TestAdapter`: 4.6.0 => 5.0.0
* `NUnit.Analyzers`: 4.4.0 => 4.6.0
* `coverlet.collector`: 6.0.2 => 6.0.4
* `WireMock.Net`: 1.6.8 => 1.7.4

**`(fix):`** Compare .NET objects instead of JSON strings when comparing objects in mock wire tests,
which fixes bugs where JSON deserialization and serialization would cause differences in the JSON strings.


# March 3, 2025

## 1.12.0-rc9

**`(fix):`** Fix inline path parameters with pagination endpoints.

## 1.12.0-rc8

**`(feat):`** Several class names are computed differently:

* Environment class name:
  * Use `environment-class-name` if configured,
  * otherwise, fall back to `exported-client-class-name` if configured, with `Environment` suffix,
  * otherwise, fall back to `client-class-name` if configured, with `Environment` suffix,
  * otherwise, fall back to the computed client name, with `Environment` suffix.
* Base exception class name:
  * Use `base-exception-class-name` if configured,
  * otherwise, fall back to `exported-client-class-name` if configured, with `Exception` suffix,
  * otherwise, fall back to `client-class-name` if configured, with `Exception` suffix,
  * otherwise, fall back to the computed client name, with `Exception` suffix.
* Base API exception class name:
  * Use `base-api-exception-class-name` if configured,
  * otherwise, fall back to `exported-client-class-name` if configured, with `ApiException` suffix,
  * otherwise, fall back to `client-class-name` if configured, with `ApiException` suffix,
  * otherwise, fall back to the computed client name, with `ApiException` suffix.

## 1.12.0-rc7

**`(internal):`** Move exception handler into client options as an internal property for SDK authors to configure.

## 1.12.0-rc6

**`(fix):`** Fix bug where a lambda for sending HTTP requests would use the HTTP request from the outer scope instead of the local scope.

## 1.12.0-rc5

**`(fix):`** Fix hardcoded namespace for Pager.cs

## 1.12.0-rc4

**`(feat):`** Add .editorconfig file to the generated SDK.


# March 2, 2025

## 1.12.0-rc3

**`(feat):`** Add support for schema properties with write-only and read-only access.

**`(feat):`** The JSON serializer will write with indentation during debugging, and without in production.

## 1.12.0-rc2

**`(feat):`** Pager and BiPager now have consistent properties and methods.
As part of this change, pagers are now generated asynchronously which is a breaking change for the endpoint methods.

```csharp
// Before:
var pager = client.GetItemsAsync(...);

// After:
var pager = await client.GetItemsAsync(...);
```

**`(fix):`** Fixed an issue where generated code for setting UUIDs in a query string parameter would generate uncompilable code.

**`(feat):`** Extend support for offset pagination to float, double, and decimal types.

## 1.12.0-rc1

**`(feat):`** Add support for the `include-exception-handler` configuration option, which generates an `ExceptionHandler` interface for the SDK.
This is useful when you want to act upon all exceptions thrown by the SDK (e.g. report them to a monitoring service).

You can configure this feature with the following:

```yaml
# generators.yml
- name: fern-api/fern-csharp-sdk
  version: 1.12.0-rc1
  config:
    include-exception-handler: true
```

**`(fix):`** Fixes a regression for mapping `ReadOnlyMemory` values in the generated Protobuf mapper.


# February 28, 2025

## 1.12.0-rc0

**`(feat):`** Add support for custom pagination.


# February 27, 2025

## 1.11.0

**`(feat):`** Add support for the `inline-path-parameters` configuration option, which generates
path parameters in the generated request type (if any) instead of as separate
positional parameters.

```yaml
# generators.yml

- name: fern-api/fern-csharp-sdk
  version: 1.11.0
  config:
    inline-path-parameters: true
```

**`(fix):`** Fix an issue where the `JsonIgnore` attribute was not included for query parameter or header properties.

## 1.10.1

**`(internal):`** Update the IR to v55.


# February 26, 2025

## 1.10.0

**`(feat):`** Add support for `exported-client-class-name` to allow you to export the client class name.
This is useful when you want to use a custom client class name for code snippets.


# February 24, 2025

## 1.9.33

**`(fix):`** Upload C# snippets to the registry.

## 1.9.32

**`(fix):`** JSON serialize `DateOnly` to `yyyy-MM-dd` format.

**`(internal):`** Add test for serializing and deserializing `DateOnly` abd `DateTime`.


# February 15, 2025

## 1.9.31

**`(fix):`** Use `global::System` instead of `System` to avoid conflicts when a type named `System` exists in the current namespace.

## 1.9.30

**`(fix):`** The Protobuf enum mapper now handles every enum variant.

## 1.9.29

**`(fix):`** The Protobuf package aliases now include the package name to avoid conflicts when multiple
Protobuf packages are used. For example, `com.acme.users.v1` would be aliased as `ProtoUsersV1`
instead of just `Proto`.

## 1.9.28

**`(fix):`** Fix the Protobuf mappers for the google.protobuf.Any type.

**`(fix):`** The Protobuf mappers now refer to the original name of the Protobuf type instead
of the PascalCase name.


# February 14, 2025

## 1.9.27

**`(fix):`** Fix the Protobuf mappers for enum and timestamp types.

## 1.9.26

**`(fix):`** Use `global::System.Type` instead of `System.Type` in `OneOfSerializer`
when a type named `System` exists in the current namespace.

## 1.9.25

**`(fix):`** Use `global::System.Type` instead of `System.Type` in generated code to avoid potential naming conflicts
when a type named `System` exists in the current namespace.

## 1.9.24

**`(fix):`** Use the original gRPC service name in the generated client reference instead of applying any casing transformations.

## 1.9.23

**`(fix):`** Fix method return types to use unqualified `Task` instead of `System.Threading.Tasks.Task`
when the method returns a response.

## 1.9.22

**`(feat):`** Generate a pagination section to the generated README.md file.

**`(feat):`** You can now `foreach(var item in page)` on `Page` instances.


# February 6, 2025

## 1.9.21

**`(fix):`** Support literals in query parameters and headers. For example, if a field in a wrapped request has a literal value of "foo", we will now set that value as the default value for the field.
Note that wrapped requests are just a bag of properties that include body properties.

## 1.9.20

**`(fix):`** Support literals in wrapped requests (). For example, if a field in a wrapped request has a literal value of "foo", we will now set that value as the default value for the field.
Note that wrapped requests are just a bag of properties that include body properties.

## 1.9.19

**`(fix):`** Fix serialization of enum path parameters. Previously, enum path parameters were serialized using their C# enum name, but now they are
correctly serialized using their wire value.

## 1.9.18

**`(fix):`** Fix serialization of enum path parameters. Previously, enum path parameters were serialized using their C# enum name, but now they are
correctly serialized using their wire value.

## 1.9.17

**`(fix):`** Support required literals. For example, if a field has a literal value of "foo", we will now set that value as the default value for the field.

## 1.9.16

**`(fix):`** Required client parameters that are headers are now sent when making API requests. For example if a bearer token is required to
instantiate the client, we will ensure that it is sent when making API requests.

## 1.9.15

**`(fix):`** Change unpaged endpoints from internal to private to avoid ambiguous references in test projects who have access to internals.

**`(fix):`** Fix an issue where enum values named `Equals` would always have be converted to `"Equals"` instead of their correct wire value.

**`(feat):`** Increase test performance by parallelizing tests and setting HTTP request retry delay to 0.


# February 3, 2025

## 1.9.14

**`(fix):`** Add support for nullable undiscriminated unions (`OneOf?`), and add tests for undiscriminated unions.


# February 2, 2025

## 1.9.13

**`(internal):`** Miscellaneous improvement for the C# generator

* Call `.ConfigureAwait(false)` on Tasks
* Use `Enumerable.Empty` instead of creating a new empty list
* Add PolySharp to test project and use C# 12
* Remove redundant `#nullable enable` directives
* Improve C# syntax


# January 22, 2025

## 1.9.12

**`(fix):`** Change serialization logic for headers and querystring parameters:

* Strings, enums, dates, times, and date times are serialized as before.
* Booleans are now serialized as `true` and `false` instead of `True` and `False`.
* Objects, lists, maps, dictionaries, undiscriminated, and discriminated unions are serialized to JSON.

**`(fix):`** Only use `.Value` on nullable structs when serializing parameters to headers and querystring parameters.


# November 25, 2024

## 1.9.11

**`(feat):`** Add two dependencies who previously were transitive dependencies to ensure the generated SDKs use the patched versions without vulnerabilities.

* `System.Net.Http` >= `4.3.4`
* `System.Text.RegularExpressions` >= `4.3.1`
  Update other dependencies to the latest version:
* `Portable.System.DateTimeOnly` = `8.0.2` (on net462 & netstandard2.0)
* `PolySharp` = `1.15.0`
* `OneOf` = `3.0.271`
* `OneOf.Extended` = `3.0.271`


# November 20, 2024

## 1.9.10

**`(feat):`** Add partial `JsonOptions.ConfigureJsonSerializerOptions` method to allow SDK maintainers to configure the `JsonSerializerOptions` used by the SDK.


# November 19, 2024

## 1.9.9

**`(feat):`** Add support for [Auto Pagination](https://buildwithfern.com/learn/sdks/features/auto-pagination).
When enabled, the endpoint methods will return a `Pager` object that you can use to iterate over all items of an endpoint.
Additionally, you can use the `Pager.AsPagesAsync` method to iterate over all pages of an endpoint.
The SDK will automatically make the necessary HTTP requests for you as you iterate over the items or the pages.


# November 14, 2024

## 1.9.8

**`(feat):`** Add support for [idempotency headers](https://buildwithfern.com/learn/sdks/capabilities/idempotency-headers).


# November 12, 2024

## 1.9.7

**`(feat):`** Set Content-Type header for HTTP requests when specified in the API spec/definition.


# November 9, 2024

## 1.9.6

**`(feat):`** Copy the csproj Version as the AssemblyVersion and FileVersion.

## 1.9.5

**`(feat):`** Copy the csproj Version as the AssemblyVersion and FileVersion.


# November 8, 2024

## 1.9.4

**`(feat):`** Generate a ProjectName.Test.Custom.props file for you to configure any MSBuild properties for your test project.

**`(feat):`** Only import ProjectName.Custom.props and ProjectName.Test.Custom.props if the file exists, so you can delete the file if you wish to.

**`(fix):`** Do not re-import the .NET SDK inside of ProjectName.Custom.props.


# November 7, 2024

## 1.9.3

**`(feat):`** Generate a ProjectName.Custom.props file for you to configure any MSBuild properties for your project.

**`(fix):`** Generate the license NuGet properties inside the .csproj file correctly.


# November 6, 2024

## 1.9.1

**`(chore):`** Update `System.Text.Json` dependency from `8.0.4` to `8.0.5` because a security patch was released to resolve [this vulnerability](https://github.com/advisories/GHSA-8g4q-xg66-9fp4).


# November 5, 2024

## 1.9.0

**`(feat):`** Add support for calling HTTP endpoints and gRPC endpoints within the same service.


# October 30, 2024

## 1.8.5

**`(feat):`** Add forward-compatible enums. Set `experimental-enable-forward-compatible-enums` to `true` in the configuration to generate forward-compatible enums.
With forward-compatible enums you can create and parse an enum value that is not predefined.

* Forward compatible enums are not compatible with the previously generated native enums.
  This is a breaking change for the users of the generated SDK, but only users using switch-case statements are affected.
* Use the `Value` property to get the string value of the enum. - For each value in the enum,
  * a public static property is generated, which is an instance of the enum class,
  * a public static property is generated within the nested `Values` class with the string value of the enum.

Here's a before and after for creating and parsing a resource with a predefined enum value and a custom enum value:
**Before**:
``csharp var resource = client.CreateResource(new Resource { Id = "2", EnumProperty = MyEnum.Value2 } ); // The line below does not compile because the enum does not have a `Value3` value. // resource = client.CreateResource(new Resource { Id = "3", EnumProperty = MyEnum.Value3 } ); resource = client.GetResource("3"); switch(resource.EnumProperty) {
    case MyEnum.Value1:
        Console.WriteLine("Value1");
        break;
    case MyEnum.Value2:
        Console.WriteLine("Value2");
        break;
    default:
        // this will never be reached until the SDK is updated with the new enum value
        Console.WriteLine("Unknown");
        break;
} if(resource.EnumProperty == MyEnum.Value1) {
        Console.WriteLine("Value1");
} else if (resource.EnumProperty == MyEnum.Value2) {
        Console.WriteLine("Value2");
} else {
    // this will never be reached until the SDK is updated with the new enum value
    Console.WriteLine("Unknown");
} ``
No exception is thrown, but the output incorrectly shows `Value1` because .NET falls back to the first value in the enum.
**After**:

````csharp var resource = client.CreateResource(new Resource { Id = "2", EnumProperty = MyEnum.Value2 } ); resource = client.CreateResource(new Resource { Id = "3", EnumProperty = MyEnum.Custom("value3") } ); resource = client.GetResource("3"); switch(resource.EnumProperty.Value) {
    case MyEnum.Values.Value1:
        Console.WriteLine("Value1");
        break;
    case MyEnum.Values.Value2:
        Console.WriteLine("Value2");
        break;
    default:
        Console.WriteLine(resource.EnumProperty.Value);
        break;
} if(resource.EnumProperty == MyEnum.Value1) {
    Console.WriteLine("Value1");
} else if (resource.EnumProperty == MyEnum.Value2) {
    Console.WriteLine("Value2");
} else {
    Console.WriteLine(resource.EnumProperty.Value);
} ```
The output correctly shows `Value3`.

````


# October 28, 2024

## 1.8.4

**`(fix):`** Make sure summary and code examples in XML code comments are XML encoded.

## 1.8.3

**`(fix):`** Update generated .gitignore files to not ignore C# files inside of folders named Logs and Releases.

## 1.8.2

**`(fix):`** Fixes a bug where the ClientOptions would not compile due to incorrect Clone method generation.


# October 8, 2024

## 1.8.1

**`(fix):`** Fixes a bug where the `OauthTokenProvider.cs` was incorrectly referencing
the endpoint method, causing code to fail to compile.


# August 29, 2024

## 1.8.0

**`(feat):`** Adds support for Client Credentials OAuth with token refresh.

Now you can instantiate your SDK by passing in clientId and clientSecret,
and let fern handle retrieving and refreshing the token.

```cs
var client = new ImdbClient("YOUR_CLIENT_ID", "YOUR_CLIENT_SECRET");
await client.doThing();
```

## 1.7.0

**`(feat):`** Add support for generated `reference.md` files.

## 1.6.0

**`(feat):`** Add support for generated `README.md` files.


# August 28, 2024

## 1.5.0

**`(feat):`** Add support for service-level headers.

**`(feat):`** Generate `snippet.json` file containing usage snippets for each endpoint.

**`(feat):`** Apply the timeout configured on the `ClientOptions` and `RequestOptions` type.

**`(feat):`** Add exponential backoff retrier, which acts upon `MaxRetries` configuration option specified on the `ClientOptions` and `RequestOptions`.

**`(feat):`** Generate the `RawClientTests.cs` file which includes retry logic tests.

**`(internal):`** Refactor the `RawClient` with additional helper methods so that it's easier to follow.

**`(fix):`** Fix a bug where `OneOf` used directly as request or response types fail serialization.


# August 26, 2024

## 1.4.0

**`(internal):`** Generate a `Version` class which is used to reference the current version.


# August 22, 2024

## 1.3.0

**`(internal):`** No changes.

## 1.3.0-rc2

**`(internal):`** Fix warnings in generated `RawClient`.

**`(internal):`** Use a simpler primitive instantiation for the various number types.

## 1.3.0-rc1

**`(feat):`** Generate the `ToString` method to write the JSON format of an object.

**`(feat):`** Generate snippets as example documentation.

## 1.3.0-rc0

**`(feat):`** Add support for sending the `User-Agent` header.

**`(internal):`** The `RawClient` now supports HTTP headers within the `ClientOptions` and `RequestOptions` types.

**`(feat):`** Add support for the `package-id` configuration, which is used to control the name of the package in NuGet.

**`(feat):`** Add support for mock server tests with `generate-mock-server-tests` configuration option.

**`(internal):`** Omit `null` property values in requests.

**`(fix):`** Fix a bug where request bodies are not sent for wrapped requests that include headers or query params.

**`(fix):`** Fix a bug where enums, dates, and datetimes are sometimes not serialized properly as query parameters and headers.

**`(feat):`** Add support for `read-only-memory-types` configuration.

**`(feat):`** Add the `CancellationToken` parameter as the last parameter to every endpoint method.

**`(feat):`** Add support for gRPC/Protobuf endpoints.


# August 12, 2024

## 1.2.1

**`(feat):`** Add support for Protobuf file dependencies to generate gRPC client stubs.

**`(fix):`** Fix potential namespace and type conflicts.


# August 11, 2024

## 1.1.0

**`(fix):`** Error strings are correctly mapped to an appropriate exception.

## 1.0.0

**`(break):`** The C# SDK is now on major version 1.0.0. To preserve compatibility with pre-1.0.0, set all of \{root-namespace-for-core-classes, pascal-case-environments, simplify-object-dictionaries} to `false`.

**`(internal):`** Core classes that are exposed publicly are now in the root namespace.

**`(internal):`** Types that were previously generated as `Dictionary` are now just `object`.

**`(internal):`** Environment names are pascal-cased.

**`(feat):`** Generating specific error types can now be turned off with the `generate-error-types` configuration.


# August 10, 2024

## 0.12.0

**`(feat):`** Get better Unit Testing JSON comparison results by using `FluentAssertions`.


# August 9, 2024

## 0.11.0

**`(internal):`** Mark internal files `internal`.

**`(feat):`** Make all client classes `Partial`.

**`(internal):`** Don't override `toString` on Exceptions.


# August 7, 2024

## 0.10.0

**`(fix):`** Fix a bug where conflicting class names and namespaces cause compile to fail.


# August 1, 2024

## 0.9.0

**`(feat):`** Add the `base-api-exception-class-name` and `base-exception-class-name` generator configuration. These control the class names of the generated `ApiException` and `Exception` class names.


# July 31, 2024

## 0.8.0

**`(feat):`** Support text response types.

**`(feat):`** Support inheritance for inlined request bodies.

## 0.7.0

**`(feat):`** Generate Exception types for all errors defined in the IR.

## 0.6.0

**`(feat):`** Add support for `RequestOptions` allowing request-specific option overrides.


# July 30, 2024

## 0.5.0

**`(feat):`** Add support for `uint`, `ulong`, and `float` types.

**`(internal):`** Bump to IRv53.

## 0.4.0

**`(feat):`** Add support for `allow-multiple` query parameters.

**`(feat):`** Generate `map` types as `Dictionary` to support explicit `null` values.

## 0.3.4

**`(internal):`** Make datetime deserialization more lenient and include milliseconds in serialization.

## 0.3.3

**`(internal):`** Generate types with `set` accessors instead of `init` to improve object construction flexibility.


# July 29, 2024

## 0.3.2

**`(feat):`** The C# generator now supports configuration to match namespaces to file paths.


# July 25, 2024

## 0.3.1

**`(internal):`** Add header suppliers to `RawClient` constructor parameters.

## 0.3.0

**`(break):`** Convert all usages of `Guid` to `string` to avoid casing issues.

## 0.2.1

**`(fix):`** Fix Multi URL environment classes compilation issue.

## 0.2.0

**`(break):`** Rename `Environments.cs` to `{OrgName}Environment`.

**`(feat):`** Generate classes for environments with different endpoint URLs.


# July 23, 2024

## 0.1.4

**`(internal):`** More improvements to datetime serialization.


# July 22, 2024

## 0.1.3

**`(fix):`** Fixed a bug with serializing datetimes.

**`(internal):`** Stop generating empty serialization unit test files when there are no examples.


# July 17, 2024

## 0.1.2

**`(chore):`** Bump IR to 51.

**`(feat):`** Generate serialization unit tests for models and add a GH workflow to run them.


# July 10, 2024

## 0.1.1

**`(internal):`** Enable generating unions with up to 32 types by adding the OneOf.Extended package.

**`(fix):`** Handle double optional fields properly with a single `?`.


# July 9, 2024

## 0.1.0

**`(feat):`** Add targets for .NET Standard 2.0 and .NET Framework 4.6.2.

**`(fix):`** Avoid duplicate key errors in `StringEnumSerializer`.

**`(fix):`** Fix bugs with root client requests causing generation failures.

**`(fix):`** Correctly handle environment values and literal header names.

**`(internal):`** Improve constructor parameters and other minor fixes.


# July 2, 2024

## 0.0.35

**`(fix):`** Ensure base client requests are generated correctly.

## 0.0.34

**`(fix):`** Implement base client methods instead of leaving them empty.


# June 21, 2024

## 0.0.33

**`(feat):`** Add support for specifying extra dependencies in the C# generator configuration.

## 0.0.32

**`(fix):`** Ensure enum values are JSON serialized before being sent to the server.

## 0.0.31

**`(fix):`** Ensure the HTTP client joins endpoint path with the base URL safely.


# June 20, 2024

## 0.0.30

**`(fix):`** The SDK now supports making requests with a Content-Type of `application/octet-stream` for byte data.

**`(fix):`** The SDK now safely handles API-wide path parameters, including their proper joining in `RawClient.cs`.

## 0.0.29

**`(fix):`** The generated SDK now correctly respects service base paths, which were previously omitted.

## 0.0.25

**`(feat):`** Discriminated unions are now generated as object.

**`(feat):`** Header parameters are no longer required in the constructor, eliminating the need for users to provide redundant information.


# June 19, 2024

## 0.0.28

**`(fix):`** Query and header parameters with optional datetimes are now encoded in ISO 8601 format before making requests.

## 0.0.24

**`(fix):`** Query and header parameters are now ISO 8601 encoded before making requests.


# June 7, 2024

## 0.0.23

**`(feat):`** The SDK is now compatible exclusively with .NET 6. This change reflects significant code adjustments needed for .NET 4+ compatibility.

## 0.0.22

**`(feat):`** The SDK now includes support for .NET 4.


# May 31, 2024

## 0.0.21

**`(fix):`** Array and list fields are now generated as `IEnumerable`.


# May 29, 2024

## 0.0.20

**`(internal):`** Enum serializers are now added directly to enum declarations.

**`(internal):`** OneOf serializers are now added as a core class.

## 0.0.19

**`(fix):`** Enum serializers now handle reading and writing enum string values.

**`(fix):`** Non-success status code errors are now thrown with the stringified response body.


# May 28, 2024

## 0.0.18

**`(internal):`** Generated GitHub workflows now run on dotnet-version 8.x.

## 0.0.17

**`(feat):`** Enabled nullable on all C# files.

**`(feat):`** Made project compatible with .NET 6, .NET 7, and .NET 8.


# May 23, 2024

## 0.0.16

**`(fix):`** Miscellaneous fixes.

### What's been fixed

* .csproj indentation
* Setting X-Fern-SDK-Name to the top-level namespace
* Passing through serializer options when serializing JSON messages

## 0.0.15

**`(fix):`** Inlined requests that are strictly bodies are JSON serializable.

## 0.0.14

**`(feat):`** The SDK now includes a `JsonEnumMemberStringEnumConverter`.


# May 22, 2024

## 0.0.13

**`(feat):`** If a LICENSE is specified, the generator now packages the license in the .csproj file.

## 0.0.12

**`(feat):`** The C# generator now generates an `Environments.cs` file containing URLs for different environments.


# May 20, 2024

## 0.0.11

**`(feat):`** The C# generator now generates a proper `.csproj` file with version, GitHub URL, and a reference to the SDK README.


# May 15, 2024

## 0.0.10

**`(feat):`** The generated SDK now publishes GitHub Actions to build and publish the generated package to NuGet.


# May 10, 2024

## 0.0.9

**`(fix):`** When an inlined request body is entirely made up of request body properties, the entire request can now be serialized as the request body.

## 0.0.8

**`(fix):`** Several bug fixes.

### What's new

* Support for arbitrary nested clients
* Query parameter serialization

### What's changed

* Property naming for async methods
* Properly formatted solution files


# June 4, 2025

## 2.37.0

**`(feat):`** Add support for generating a full project in filesystem mode.


# June 3, 2025

## 2.36.5

**`(internal):`** Update the IR to v58.


# May 21, 2025

## 2.36.4

**`(fix):`** Generates docs for method types.


# May 20, 2025

## 2.36.3

**`(fix):`** Updates the generator to always commit changes, even if there are none, in self-hosted mode. This
allows users to make sure that the generator actually ran and attempted to make a commit.


# May 15, 2025

## 2.36.2

**`(fix):`** Fix the generated README.md for the `maxRetries` configuration option, which is now
shown on the client constructor.


# May 13, 2025

## 2.36.1

**`(fix):`** Add support for the custom introduction setting in the generated README.md.


# May 11, 2025

## 2.36.0

**`(feat):`** Support sending requests with content type application/x-www-form-urlencoded.


# May 1, 2025

## 2.35.3

**`(fix):`** Rerelease with the latest generator-cli.

## 2.35.2

**`(fix):`** Install the generator-cli at build time as a fallback if runtime installation fails.

## 2.35.1

**`(fix):`** Self hosted github user defaults to `fern-api[bot]`.

## 2.35.0

**`(fix):`** Support pushing to GitHub enterprise.

## 2.34.0

**`(fix):`** Upgrade to irV57


# April 28, 2025

## 2.33.4

**`(fix):`** (Corrected from 2.33.2) Use non-deprecated method to create request body

## 2.33.3

**`(fix):`** Suppress unchecked cast warning for undiscriminated union visitor


# April 25, 2025

## 2.33.2

**`(fix):`** Use non-deprecated method to create request body


# April 24, 2025

## 2.33.1

**`(fix):`** Fix inline overrides undoing allow-multiple parameterization


# April 23, 2025

## 2.33.0

**`(fix):`** Support for literals in union types


# April 21, 2025

## 2.32.9

**`(fix):`** Auth header prefix should prepend with a concatenation operator


# April 9, 2025

## 2.32.8

**`(fix):`** Use safe name for version enum

## 2.32.7

**`(fix):`** Run v2 generation for SDK generator only

## 2.32.6

**`(fix):`** Fix getting the default version of an api versions enum to not require the `CURRENT` entry


# April 8, 2025

## 2.32.5

**`(fix):`** Fix inlining forward-compatible enums


# April 1, 2025

## 2.32.4

**`(fix):`** Fix typos in README generator

## 2.32.3

**`(fix):`** Add logging for Java v2 generator call

## 2.32.2

**`(fix):`** Add fallback snippet renderer for readme generation


# March 31, 2025

## 2.32.1

**`(fix):`** Fix pagination in raw clients


# March 29, 2025

## 2.32.0

**`(feat):`** Generate snippet.json


# March 27, 2025

## 2.31.0

**`(fix):`** Apply content type to request body creation

## 2.30.0

**`(feat):`** Include response headers in API exceptions

## 2.29.0

**`(fix):`** Query params respect allow-multiple


# March 26, 2025

## 2.28.0

**`(feat):`** Expose response headers


# March 24, 2025

## 2.27.1

**`(fix):`** Change method to `public static void main(String[] args)` in snippet generation


# March 21, 2025

## 2.27.0

**`(feat):`** Support automatic README.md generation


# March 13, 2025

## 2.26.0

**`(feat):`** Expose max retries for clients

## 2.25.0

**`(feat):`** Add config to inline file properties


# March 12, 2025

## 2.24.4

**`(fix):`** Prevent put requests from generating without a request body

## 2.24.3

**`(fix):`** Fix double unknown in forward-compatible enums

**`(fix):`** Prevent enum keyword use in package paths

## 2.24.2

**`(fix):`** Remove 'object' from Java reserved strings list


# March 11, 2025

## 2.24.1

**`(fix):`** Add @JsonIgnore to non-serialization getters for nullables

## 2.24.0

**`(fix):`** Fix wrapped request paths in flat mode


# March 7, 2025

## 2.23.1

**`(fix):`** Fix async client builder generation


# March 6, 2025

## 2.23.0

**`(fix):`** Represent protobuf uint as int rather than long


# March 5, 2025

## 2.22.0

**`(feat):`** Add support for explicit nulls in serialization


# March 4, 2025

## 2.21.0

**`(feat):`** Add async clients


# March 2, 2025

## 2.20.1

**`(fix):`** Fix type reference syntax in readValue calls


# February 27, 2025

## 2.20.0

**`(fix):`** Fix collection serialization in multipart form body without form encoding


# February 26, 2025

## 2.19.0

**`(feat):`** Enable overriding literal headers


# February 25, 2025

## 2.18.1

**`(fix):`** Fix form body serialization


# February 24, 2025

## 2.18.0

**`(feat):`** Support form-data with deep object query params

## 2.17.0

**`(feat):`** Support deep object query parameters


# February 20, 2025

## 2.16.0

**`(chore):`** Upgrade IR version dependency to v55


# February 19, 2025

## 2.15.0

**`(feat):`** Add support for custom HTTP client in Java SDK

## 2.14.0

**`(feat):`** Support user-agent header


# February 18, 2025

## 2.13.0

**`(feat):`** Flat package layout by setting `page-layout: flat`


# February 14, 2025

## 2.12.1

**`(fix):`** Fix collision with variant type called "Value" and internal interface name.

**`(fix):`** Prevent discriminant from deserializing as additional property in unwrapped variant.


# February 10, 2025

## 2.12.0

**`(feat):`** Let users define custom headers in request options


# February 4, 2025

## 2.11.3

**`(fix):`** Don't add a semicolon twice when rendering accept header


# February 3, 2025

## 2.11.2

**`(fix):`** Add accept header if endpoint has errors

## 2.11.1

**`(fix):`** Send only request body reference for body-only wrapped request


# January 29, 2025

## 2.11.0

**`(feat):`** Add deep cursor path pagination support.


# January 23, 2025

## 2.10.7

**`(fix):`** Fix wrapped requests without inline path parameters checking not rendering
no-request endpoint because of non-optional parameters


# January 21, 2025

## 2.10.6

**`(fix):`** Prevent accept header from being removed in wrapped requests

## 2.10.5

**`(fix):`** Add Accept header for json responses


# January 19, 2025

## 2.10.4

**`(fix):`** Fix potential NPE initializing client options with default version


# January 17, 2025

## 2.10.3

**`(fix):`** Fix inlining unwrapped alias types.


# January 16, 2025

## 2.10.2

**`(fix):`** Omit methods with inlined types from interface definitions.

## 2.10.1

**`(fix):`** Fix union inline type name conflict resolution.

## 2.10.0

**`(feat):`** Support inline types in the Java generator.


# January 7, 2025

## 2.9.0

**`(feat):`** Support version headers in request and client options.


# December 23, 2024

## 2.8.1

**`(feat):`** Implement global timeout configuration for generated clients.

```java
var client = Client.builder()
  .apiKey("...")
  .timeout(40)
  .build();
```


# December 20, 2024

## 2.8.0

**`(feat):`** Generate inline request bodies with their path parameters in the object.


# December 11, 2024

## 2.7.0

**`(feat):`** Apply Content-Type header from endpoint definition in SDK generator.


# December 10, 2024

## 2.6.0

**`(fix):`** Don't generate pagination with nonempty path. Fixes pagination seed tests breaking.

## 2.5.0

**`(chore):`** Bump IR version to latest (v53)

## 2.4.0

**`(feat):`** We now support overriding sdk package prefixes by adding a "package-prefix" key under the java-sdk generator
configuration.


# December 4, 2024

## 2.3.1

**`(fix):`** The rootProject.name is now set in settings.gradle and ci.yml uses ./gradlew sonatypeCentralUpload for publishing.

## 2.3.0

**`(feat):`** Fix publishing to Maven Central with proper signing configuration and metadata.


# September 26, 2024

## 2.2.0

**`(feat):`** We now provide endpoint methods for streaming byte array requests in addition to the previous methods accepting
byte array directly.

**`(chore):`** Bump Jackson version to latest (2.17.2)


# September 11, 2024

## 2.1.0

**`(feat):`** We no longer enforce non-null constraints for Object type properties in builders.


# September 5, 2024

## 2.0.0

**`(break):`** The SDK generator is now on major version 2. To take this upgrade without any breaks, please add the below
configuration to your `generators.yml` file:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    config:
      disable-required-property-builder-checks: true
```

**`(feat):`** Generated builder methods now enforce non-null checks for required fields, ensuring that all required
fields are properly validated during object construction:

```java
@java.lang.Override
@JsonSetter("name")
public NameStage name(@NotNull String name) {
    this.name = Objects.requireNonNull(name, "name must not be null");
    return this;
}
```


# September 4, 2024

## 1.0.7

**`(feat):`** Public constructors can now be generated for all model types:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    config:
      enable-public-constructors: true # default false
```

## 1.0.6

**`(fix):`** Fixed a bug where optional collections are not handled properly in paginated responses.


# July 26, 2024

## 1.0.5

**`(fix):`** Fixed a bug where local generation custom config doesn't pick up some values, including exception naming.


# July 24, 2024

## 1.0.4

**`(fix):`** Fixed a bug where OkHttp responses could be closed prematurely.


# July 23, 2024

## 1.0.3

**`(feat):`** Generated builder methods for optional fields can now accept null directly.


# July 2, 2024

## 1.0.2-rc0

**`(feat):`** The generator now adds a class-level `@JsonInclude(JsonInclude.Include.NON_ABSENT)` annotation to
each generated type in place of the previous `@JsonInclude(JsonInclude.Include.NON_EMPTY)` by default. This is
configurable in the `generators.yml` file:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    config:
      json-include: non-empty # default non-absent
```


# June 26, 2024

## 1.0.1

**`(break):`** The Java SDK is now on major version 1. To take this upgrade without any breaks, please add the below
configuration to your `generators.yml` file:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    config:
      base-api-exception-class-name: ApiError
      base-exception-class-name: CompanyException # Optional: This should only be set if default naming is undesirable
```

**`(feat):`** We now generate Exception types for all errors that are defined in the IR. Generated clients with an
error discrimination strategy of "status code" will throw one of these typed Exceptions based on the status code of
error responses. Example error type:

```java
public final class BadRequest extends MyCompanyApiError {
  public BadRequest(Object body) {
      super("BadRequest", 400, body);
  }
}
```


# June 13, 2024

## 0.10.1

**`(feat):`** Add support for cursor and offset pagination.

### What's new

* Add support for cursor and offset pagination.

For example, consider the following endpoint `/users` endpoint:

```yaml
types:
  User:
    properties:
      name: string

  ListUserResponse:
    properties:
      next: optional
      data: list

service:
  auth: false
  base-path: /users
  endpoints:
    list:
      path: ""
      method: GET
      pagination:
        cursor: $request.starting_after
        next_cursor: $response.next
        results: $response.data
      request:
        name: ListUsersRequest
        query-parameters:
          starting_after: optional
      response: ListUsersResponse
```

The generated `SyncPagingIterable` can then be used to traverse through the `User` objects:

```java
for (User user : client.users.list(...)) {
    System.out.println(user);
}
```

Or stream them:

```java
client.users.list(...).streamItems().map(user -> ...);
```

Or statically calling `nextPage()` to perform the pagination manually:

```java
SyncPagingIterable pager = client.users.list(...);
// First page
System.out.println(pager.getItems());
// Second page
pager = pager.nextPage();
System.out.println(pager.getItems());
```


# June 7, 2024

## 0.10.0

**`(feat):`** The generator now supports BigInteger types.


# June 6, 2024

## 0.9.8

**`(feat):`** `RequestOptions` are now generated with the `timeout` field initialized to `Optional.empty()` instead of `null` to avoid NPEs if `timeout` is not set in the builder.

## 0.9.7

**`(feat):`** The SDK generator now generates `@java.lang.Override` over `@Override` in all files to avoid clashes with any
`Override.java` class that may have been generated in the same package. The former was used most places, but not all,
until this release.


# June 5, 2024

## 0.9.6

**`(feat):`** The SDK generator now supports returning response properties from client methods rather than just the responses themselves.


# May 30, 2024

## 0.9.5

**`(fix):`** Types without fields are now generated with builders. Previously, they were not, which made them impossible to initialize.

## 0.9.4

**`(fix):`** The SDK now generates undiscriminated unions with de-conflicted method signatures. Previously, certain undiscriminated unions would have failed to compile due to Java's type erasure causing conflicts.


# May 23, 2024

## 0.9.3

**`(feat):`** Generated SDK clients with an OAuth security scheme will now automatically refresh access tokens before they expire.


# May 21, 2024

## 0.9.2

**`(fix):`** Java 8 Compatibility.


# May 15, 2024

## 0.9.1

**`(fix):`** Support OAuth without token refresh. Example of initializing a client with OAuth:

```java
ExampleApiClient client = ExampleApiClient
    .builder()
    .clientId("4bf2a37d-8512-44a2-af50-28a7701d9f2e")
    .clientSecret("b3b187b0-ef48-49ba-9d99-80d89fd11c4a")
    .build();
```


# May 13, 2024

## 0.9.0-rc0

**`(internal):`** Bump intermediate representation to v42


# May 8, 2024

## 0.8.11

**`(fix):`** Corrects the fix in 0.8.10 to check null value as opposed to a .isPresent check, given the header is not `Optional`, it's always `String`

## 0.8.10

**`(fix):`** Fixes regression from 0.8.8, headers are no longer added to the header map unless they are non-null.


# May 7, 2024

## 0.8.9

**`(fix):`** Generated SDK clients now handle null response bodies and avoid NPEs when they receive error responses.

## 0.8.8

**`(fix):`** The generated SDKs no longer require global headers that are not directly related to auth if auth is mandatory within the SDK. Previously, the generator would require all global headers if auth was mandatory.


# March 21, 2024

## 0.8.7

**`(feat):`** You can now specify publishing metadata to populate your POM on publish:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    version: 0.X.Y
    output:
      location: maven
      registryUrl: ""
      publish-metadata:
        author: ""
        email: ""
        package-description: ""
        reference-url: ""
```


# March 20, 2024

## 0.8.6

**`(fix):`** The SDK now generates RequestOptions functions for timeouts with IdempotentRequestOptions correctly, previously
timeout functions were only taking in regular RequestOptions. This also addresses a JavaPoet issue where fields were
being initialized twice across RequestOptions and IdempotentRequestOptions classes, preventing the SDK from generating at all.


# March 18, 2024

## 0.8.5

**`(feat):`** Add in publishing config that allows for signing published artifacts, this is required for publishing to Maven
Central.
To sign your artifacts, you must add the below to your publishing config:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    version: 0.X.Y
    output:
      location: maven
      registryUrl: ""
      signature:
        keyId: ""
        password: ""
        secretKey: ""
```

and secrets can be used, similar to how API keys are specified today:

```yaml
generators:
  - name: fernapi/fern-java-sdk
    version: 0.X.Y
    output:
      location: maven
      registryUrl: ""
      signature:
        keyId: ${MY_KID_ENVVAR}
        password: ${MY_SECRET_ENVVAR}
        secretKey: ${MY_SECRET_KEY_ENVVAR}
```


# February 23, 2024

## 0.8.5-rc0

**`(internal):`** Update docker image for Java SDK task runner.

## 0.8.4

**`(fix):`** The timeout specified on the RequestOptions object now sets the timeout on the entire call, not just the
read timeout of the request.
As a refresher, a timeout can be added per request like so:

```java
RequestOptions ro = RequestOptions.builder().timeout(90).build(); // Creates a timeout of 90 seconds for the request
//  You could also specify the timeunit, similar to as if you were using OkHttp directly
//  RequestOptions ro = RequestOptions.builder().timeout(2, TimeUnit.MINUTES).build();
client.films.list(ro);
```

## 0.8.3

**`(fix):`** The SDK generator now always creates a valid name for union discriminator wrapper classes.


# February 21, 2024

## 0.8.2

**`(fix):`** File upload endpoints no longer fail to compile because the reference to
the mime type variable is present.

```java
// Code that failed to compile
String fileMimeType = Files.probeContentType(file.toPath());
MediaType fileMediaType = fileMimeType != null ? MediaType.parse(mimeType) : null; // mimeType undefined
// Code that now compiles
MediaType fileMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
```


# February 14, 2024

## 0.8.1

**`(feat):`** The RequestOptions object now supports configuring an optional timeout to apply per-request.

```java
RequestOptions ro = RequestOptions.builder().timeout(90).build(); // Creates a timeout of 90 seconds for the request
//  You could also specify the timeunit, similar to as if you were using OkHttp directly
//  RequestOptions ro = RequestOptions.builder().timeout(2, TimeUnit.MINUTES).build();
client.films.list(ro);
```


# February 11, 2024

## 0.8.0

**`(feat):`** The SDK generator now supports whitelabelling. When this is turned on,
there will be no mention of Fern in the generated code.

**Note**: You must be on the enterprise tier to enable this mode.


# February 4, 2024

## 0.7.1

**`(feat):`** The SDK generator now supports idempotency headers. Users
will be able to specify the idempotency headers in RequestOptions.

```java
Imdb imdb = Imdb.builder()
  .apiKey("...")
  .build();

var response = imdb.ticket.purchase("theatre-id", IdempotentRequestOptions.builder()
  .idempotencyKey("...")
  .build());
```

**`(feat):`** The SDK generator now supports scanning API credentials
via environment variables.

```java
Imdb imdb = Imdb.builder()
  .apiKey("...") // defaults to System.getenv("IMDB_API_KEY")
  .build();
```

**`(feat):`** The generated models now support boolean literals and users
do not have to specify them in the builder.
For example, for the following object

```yaml
Actor:
  properties:
    name: string
    isMale: literal
```

the user will not need to specify the literal properties when building
the object.

```java
var actor = Actor.builder()
  .name("Brad Pitt")
  .build();
```


# February 3, 2024

## 0.6.1

**`(internal):`** Release version 0.6.1


# June 3, 2025

## 1.15.1

**`(internal):`** Update the IR to v58.


# April 29, 2025

## 0.15.0

**`(feat):`** Support custom package path


# April 8, 2025

## 0.14.2

**`(fix):`** This updates the PHP generator to better support undiscriminated unions that define one or more `optional` types.
With this, the generator unwraps each of the optional types, and includes a `|null` variant (e.g. `array|Metadata|null`).


# March 4, 2025

## 0.14.1

**`(internal):`** Upgrade to IRv57.


# February 13, 2025

## 0.14.0

**`(feat):`** Support literal types

## 0.13.7

**`(fix):`** Make constructor private for union types and remove static unknown constructor

## 0.13.6

**`(fix):`** Fix an issue where the value field of the deserialized discriminated union was null.

## 0.13.5

**`(fix):`** Change discriminated union method name from `->getvalue()` to `->getValue()`.

## 0.13.4

**`(fix):`** Flatten test directory structure from `tests/package-name/**` to `tests/**` so it matches the psr-4 structure defined in composer.json. Without this change, you cannot reference classes within the `tests` directory from your tests, for example, a `Helpers` class for common test utilities.

## 0.13.3

**`(fix):`** Fix issue where an empty request would be JSON serialized as an empty array instead of an empty object.

## 0.13.2

**`(fix):`** Fix a bug where literal global headers could not be overridden in the root client constructor.

## 0.13.1

**`(fix):`** Render union references as their type references rather than mixed.

## 0.13.0

**`(feat):`** Add support for configuring a request timeout.

**`(fix):`** Fix a bug where the private pagination method helpers collided with magic methods (e.g. `__get`).

## 0.12.0

**`(feat):`** Add support for discriminated unions.


# February 12, 2025

## 0.11.0

**`(feat):`** The SDK now supports a `bodyProperties` and `queryParameters` request option, which can be used to add arbitrary properties to the request. This is useful for interacting with alpha or undocumented functionality.

````php $response = $client->users->list(
  new ListUsersRequest([
    ...
  ]),
  [
    'queryParameters' => [
      'limit' => 100,
    ],
  ]
); ```

````


# February 11, 2025

## 0.10.0

**`(feat):`** You can now modify the generated `composer.json` file by adding a `composerJson` property to your generator configuration.
Here's an example of the `generators.yml` file with the `composerJson` property:

```yaml generators.yml ... groups:
  php-sdk:
    generators:
      - name: fernapi/fern-php-sdk
        ...
        config:
          composerJson:
            description: This is my PHP library
            keywords:
            - myCustomTag
            license:
            - "LGPL-2.1-only"
            - "GPL-3.0-or-later"
            scripts:
              hello: echo hello
```

Which will result in the following composer.json file:

````jsonc composer.json {
  // ...,
  "description": "This is my PHP library",
  "keywords": [
    "myCustomTag",
    // ...,
  ],
  "license": [
    "LGPL-2.1-only",
    "GPL-3.0-or-later"
  ],
  // ...,
  "scripts": {
    // ...,
    "hello": "echo hello"
  }
} ```

## 0.9.0
**`(feat):`** Add the ability to access alpha or undocumented response properties from every class. Users can access the additional properties like so:
```php $response = $client->users->get(...); $additionalProperties = $response->getAdditionalProperties(); ```

## 0.8.0
**`(feat):`** Add automatic pagination support for endpoints that return a paginated response.
Here's an example of how users can use paginated endpoints:
```php $items = $client->list($request); foreach($items as $item){
    echo $item;
} $pages = $items->getPages(); foreach($pages as $page){
    foreach($page as $item){
        echo $item;
    }
} ```

````


# February 9, 2025

## 0.7.0

**`(feat):`** The SDK now supports inline path parameters in the generated request class like so:

````php class GetUserRequest extends JsonSerializableType {
    /**
    * @var string $userId
    */
    public string $userId;
} ```
You can configure this in your `generators.yml` like so:
```yaml - name: fernapi/fern-php-sdk
  version: 0.7.0
  config:
    inlinePathParameters: true
````

## 0.6.0

**`(feat):`** You can now configure the generated class property access to be `public` or `private`.

* When the access is public, both the getter and setter methods are omitted (default).
* When the access is private, both the getter and setter methods are generated.

You can configure this in your `generators.yml` like so:

```yaml - name: fernapi/fern-php-sdk
  version: 0.6.0
  config:
    propertyAccess: private
```

## 0.5.2

**`(fix):`** Update the endpoint generator to not require the in-lined request wrapper if it's only composed of optional properties.

**`(fix):`** Update optional query parameters lists to be generated as an optional array instead of an array of optional values.


# February 7, 2025

## 0.5.1

**`(fix):`** Catch HTTP request exceptions and rethrow it as a FooApiException.

## 0.5.0

**`(feat):`** Add the `__toString()` magic method to all generated class types.


# February 5, 2025

## 0.4.0

**`(feat):`** Retry HTTP requests on status codes 408, 429, 5XX. You can configure the maximum number of retries like this:
`php $client = new FooClient("token", ['maxRetries' => 3]) $client->bar($request, ['maxRetries' => 5]); `
The default for `maxRetries` is 2, meaning up to 3 HTTP requests may be sent. Set `maxRetries` to 0 to disable retries.
If you create your own HTTP client and pass it to the root client, you must add the desired middlewares yourself. Here's how you would add the `RetryMiddleware` to a custom HTTP client:
`php $handlerStack = HandlerStack::create(); $handlerStack->push(RetryMiddleware::create()); $httpClient = new Client(['handler' => $handlerStack]); $client = new FooClient(['client' => $client]); `

## 0.3.2

**`(internal):`** Upgrade to IRv55 to recognize nullable types.

## 0.3.1

**`(fix):`** Improve multiline parameter docs by writing them above the tag, e.g.

````php class UpdateUserRequest extends JsonSerializableType {
    /**
    * The user to update.
    *
    * See [User](https://acme.co/user) for more information.
    *
    * @var ?User $user
    */
    public ?User $user;
} ```

**`(fix):`** Add .idea to the generated .gitignore file.

````


# February 3, 2025

## 0.3.0

**`(feat):`** Add support for customizing the package name, which is used in the `User-Agent` header. Users can configure this like so:

```yaml - name: fernapi/fern-php-sdk
  version: 0.3.0
  config:
    packageName: acme/acme-php
```

## 0.2.3

**`(fix):`** Updates a variety of properties in the generated composer.json file, including:

* Pin guzzlehttp/guzzle to version ^7.4.
* Custom license support.
* Set `memory-limit` to 1G in the `analyze` script.


# December 12, 2024

## 0.2.2

**`(fix):`** Handle cross package type name deconfliction


# November 20, 2024

## 0.2.1

**`(fix):`** Override escaped method names in the generated client.


# October 30, 2024

## 0.2.0

**`(feat):`** Add support for multipart file uploads.


# October 3, 2024

## 0.1.4

**`(fix):`** Add `null` to annotations for optional undiscriminated unions.

## 0.1.3

**`(feat):`** Support inheritance for types and inlined requests.

**`(feat):`** Support undiscriminated unions.

**`(fix):`** Fix ci.yml `php-version` field name.

**`(feat):`** We now allow an empty constructor on types with no required properties.


# September 25, 2024

## 0.1.2

**`(feat):`** Represent enums in objects as strings.

**`(fix):`** Generated wrapped requests now implement `JsonSerializableType`.

**`(fix):`** Fix a bug where we don't set the request options baseurl properly.

**`(fix):`** Fix bugs in our numeric type serde and add tests.


# September 24, 2024

## 0.1.1

**`(fix):`** The generated `.github/workflows/ci.yml` file now uses 'shivammathur/setup-php\@v2' to install `php` and `composer`.

## 0.1.0

**`(feat):`** Initial release.


# August 5, 2024

## 0.8.2

**`(fix):`** The generated endpoint functions no long include object utilities such as `_field_set` or `additional_properties`.


# July 22, 2024

## 0.8.1

**`(fix):`** Address serialization issues within iterable types

### What's been fixed

* Nested `hash` types are recursively resolved in `from_json` such that they come back as true hashes, as opposed to structs
* Pass through additional params from request options even if the original request did not have those types of params (ex: query parameters)


# July 3, 2024

## 0.8.0

**`(fix):`** Date snippets now wrap their examples in quotation marks to correctly use `.parse`


# July 1, 2024

## 0.8.0-rc0

**`(feat):`** allow users to specify additional dependencies and dev dependencies for Ruby SDKs.


# June 13, 2024

## 0.7.0-rc0

**`(feat):`** Introduce automatic token refresh for OAuth credentials

### What's new

* The Ruby SDK now generates an OAuth client to automate token refresh.

### What's been fixed

* The Ruby SDK now no longer requires users specify literals in method signatures


# May 27, 2024

## 0.6.3

**`(feat):`** Generated SDK snippets now leverage the full function module path.


# May 17, 2024

## 0.6.2

**`(internal):`** The generator now uses the latest FDR SDK


# April 9, 2024

## 0.5.0-rc0

**`(feat):`** The generated SDK now includes a rakefile to run any tests prefixed with `test_` in the `test` directory

### What's new

* Consumers of the SDK can now pass in a base URL override into the root client, as well as the request's RequestOptions

### What's been fixed

* This PR includes a number of typing annotation and cleanliness/QOL fixes.


# April 8, 2024

## 0.7.0-rc5

**`(feat):`** additional fix for the same issue within 0.7.0-rc4 (regression introduced within the 0.7.0 RCs where the token prefix was dropped from requests).

## 0.7.0-rc4

**`(feat):`** fixes regression introduced within the 0.7.0 RCs where the token prefix was dropped from requests.

## 0.7.0-rc3

**`(fix):`** Module references are now consistent throughout the generated SDK, this was a regression in the previous release.

## 0.7.0-rc2

**`(feat):`** the ruby generator now nests types under a type module to avoid naming conflicts, this is behind a configuration flag

## 0.7.0-rc1

**`(feat):`** Address serialization issues within iterable types

### What's been fixed

* nested loops leverage different variable names to deconflict
* nested loops do not call to\_json prior to the subsequent loop

## 0.6.1

**`(internal):`** Release Generator

## 0.6.1-rc0

**`(internal):`** Improve logging within the Ruby generator

## 0.6.0-rc1

**`(fix):`** fix regression where sometimes the parsed\_json variable would not be instantiated, and so there'd be a nil ref in the generated code

## 0.6.0-rc0

**`(feat):`** Introduce code snippets and examples for Ruby SDKs

## 0.5.0-rc2

**`(fix):`** Call JSON.parse prior to iterating through an iterable response

## 0.4.0

**`(feat):`** The generated SDK now includes a rakefile to run any tests prefixed with `test_` in the `test` directory

### What's new

* The generators now create a rakefile to run any tests prefixed with `test_` in the `test` directory. A step is also added to CI to run these test. The dummy test now running also provides a sanity check on the health of the build of the gem, even if no tests are added given the gem is imported.


# March 22, 2024

## 0.3.3

**`(internal):`** Leverage shared generator notification and config parsing logic.

## 0.1.0-rc0

**`(chore):`** Loosen the Faraday dependencies within the generated SDKs

### What's changed

* loosen the Faraday dependencies within the generated SDKs, now we are supporting Faraday 1.x, while continuing to support the same upperbound (specifically supporting the latest major version as well).
* release a minor version as the Ruby generator is now being used in beta!

## 0.0.6

**`(feat):`** license files are now specified within the gem config if they are provided

## 0.0.5

**`(fix):`** Address parsing issues within the SDK

### What's been fixed

* Syntactic error in block parameter usage: we now ensure block parameters are the final parameter for functions
* Add properties to subpackages: previously properties on subpackages were not being exposed
* Ensure optional properties in from\_json are only parsed if present

## 0.0.4

**`(fix):`** ensures files are written at the gem name path over client name, and addresses string escaping on one of the Fern headers

## 0.0.3

**`(fix):`** addresses a number of typos and other issues previously contained within the generation code

## 0.0.2

**`(feat):`** Support rubygems output type within `generators.yml`


# March 18, 2024

## 0.3.2

**`(feat):`** type bytes requests to also take in IO types, indicating to users that they may pass in a stream of bytes


# March 12, 2024

## 0.3.1

**`(fix):`** use strings instead of UUIDs, which are helper classes in Ruby


# February 27, 2024

## 0.3.0

**`(fix):`** Generated yardoc now appropriately reflects the typehint of the value type in maps

### What's been fixed

* Ensure the name passed into the 'X-Fern-SDK-Name' header is the name of the gem, not the client class
* If an envvar is specified as a fallback for an auth header, the SDK will now mark that parameter as optional to allow fallback to actually happen
* Generated yardoc now appropriately reflects the typehint of the value type in maps


# February 20, 2024

## 0.2.0

**`(feat):`** Add support for idempotency headers

### What's changed

* Ruby enum construct now leverages class constants instead of hashes to support better autocomplete
* Discriminated unions are no longer wrapped within a parent object, rather, any field or parameter that depends on a discriminated union now explicitly references the member types in support of better autocomplete.
* Undiscriminated unions are no longer allowed as hashes as input to SDK functions, this is in support of better autocomplete as well.
* The generated Ruby SDKs now support idempotency headers, users may specify idempotency headers within the RequestOptions object


# February 15, 2024

## 0.1.1

**`(internal):`** Ensure the Ruby generators do not have strict dependencies on the IR


# February 1, 2024

## 0.0.1

**`(feat):`** Support client generation (async and sync) as well as most endpoint types (except streaming)


# January 30, 2024

## 0.0.0

**`(internal):`** Initialize the changelog


# Strongly Typed

> Move fast and break nothing with type safety

Fern generated SDKs are optimized for great autocompletion in
code editors. Developers will receive compile errors when they forget to
specify required fields or attempt to access fields that do not exist.


  
    TypeScript SDKs are published with type declarations (i.e. `.d.ts` files). This
    ensures that TypeScript consumers can leverage compile-time safety and
    intellisense when using the SDK.

    Each SDK method is annotated with request and response types.

    ```typescript maxLines=0 {10}
    import { Genre } from "../genre";

    export interface MovieClient {

      /**
       * Creates a movie
       * @param request the movie to create
       * @returns the created Movie
       */
      void create(request: CreateMovieRequest): Promise; 
    }

    export interface CreateMovieRequest {
      name: string;
      genre: Genre; 
    }

    export interface Movie {
      /* Generated ID for the movie */
      id: string;
      name: string;
      genre: Genre; 
    }
    ```
  



# Idiomatic Method Names

> Fine-tune SDK resources and method names

Fern allows you to fine-tune your SDK method and group names so that
your SDK reads exactly how you want it to. For example, instead of
`client.postUsers` you can configure the SDK to read `client.users.create()`.


  
    ```ts
    const response = await client.users.create();
    ```
  

  
    ```python
    response = client.users.create()
    # or async
    response = await async_client.users.create()
    ```
  

  
    ```java
    const response = client.users().create();
    ```
  

  
    ```go
    const response = client.Users.Create();
    ```
  


Groups can also be arbitrarily nested. For example, if you want to nest the `users`
endpoints under an `admin` group, the SDK would then read:


  
    ```ts
    const response = await client.admin.users.create();
    ```
  

  
    ```python
    response = client.admin.users.create()
    # or async
    response = await async_client.admin.users.create()
    ```
  

  
    ```java
    const response = client.admin().users().create();
    ```
  

  
    ```go
    const response = client.Admin.Users.Create();
    ```
  



  See how merge.dev uses nested groups [here](https://github.com/merge-api/merge-node-client?tab=readme-ov-file#create-link-token).


If you're using an OpenAPI Specification, you'll need to leverage the [`x-fern-sdk-method-name`](/learn/api-definition/openapi/extensions#sdk-method-names)
extension. If you're using the fern definition, then the method name comes from the endpoint directly.

## Casing

Additionally, Fern handles choosing the appropriate casing for each SDK
language: `snake_case` in python, `camelCase` in TypeScript and `PascalCase` in Go, etc.


# Schema validation

> Fail-fast if the payloads diverge from your schema

Often times, your API Definition may drift from your server implementation.
If you are concerned about this, you can toggle on schema validation in the
SDKs.

It's worth nothing that this feature is **optional** for duck-typed
languages like Python, TypeScript, and Ruby. However, for strongly typed
languages like Go, Java, and C# this is always on.


  
    The TypeScript SDK contains a `serialization` folder when generated.

    ```{5}
    src/
      api/
      core/
      errors/
      serialization/
      Client.ts
      index.ts
    ```

    Inside of this serialization folder, are [zod](https://github.com/colinhacks/zod)-like schemas for every
    generated model.

    For example, if you had a `Movie` schema defined in your API Definition and
    wanted to validate the schema, you could simply do:

    ```ts
    import { Movie } from "@my-company/sdk";
    import * as serializers from "@my-company/sdk/serialization";

    const movie: Movie = {
      name: "GoodwillHunting";
    }
    // serialize 
    serializers.Movie.jsonOrThrow(movie);
    // deserialize
    serializers.Movie.parseOrThrow({ "name": "Goodwill Hunting" });
    ```

    Fern allows you to generate the SDK in three different modes:

    1. **No validation**: In this mode, there is no serialization layer generated. Types exist at
       compile time, but they are completely removed at runtime.
    2. **Request validation only**: In this mode, the serialization layer is only used to
       validate requests. Responses are always returned even if they do not match the schema. This is
       the recommended mode for public API companies.
    3. **Full validation**: In this mode, the serialization layer is used to validate both
       requests and responses. This is the recommended mode for internal SDKs so that you can catch
       issues as soon as possible.
  



# Discriminated Unions

> Fern SDKs include idiomatic support for discriminated unions

The SDKs natively support [discriminated unions](/learn/api-definition/fern/types#discriminated-unions) for both OpenAPI and Fern APIs.


  
    Discriminated unions are defined with the `union` key. For example, a simple
    `Shape` type that can either be a `Triangle` or a `Square` can be defined as follows:

    
      ```yaml
      types:
        Shape:
        union:
          triangle: Triangle
          square: Square

      Triangle:
        properties:
          a: double
          b: double
          c: double

      Square:
        properties:
          side: double
      ```
    

    With this, the JSON representation for a `Shape` looks like the following:

    
      ```json
      {
        "type": "triangle",
        "a": 3,
        "b": 4,
        "c": 5
      }
      ```
    

    or

    
      ```json
      {
        "type": "square",
        "side": 5
      }
      ```
    
  

  
    Discriminated unions are defined with the `oneOf` and `anyOf` keys. For example, consider
    the following `Shape` definition:

    
      ```yaml
      components:
        schemas:
          Shape:
            oneOf:
              - $ref: "#/components/schemas/Triangle"
              - $ref: "#/components/schemas/Square"
          Triangle:
            type: object
            properties:
              type:
                type: string
                enum:
                  - triangle
              a:
                type: number
              b:
                type: number
              c:
                type: number
            required:
              - type
              - a
              - b
              - c
          Square:
            type: object
            properties:
              type:
                type: string
                enum:
                  - square
              side:
                type: number
            required:
              - type
              - side
      ```
    

    With this, the JSON representation for a `Shape` looks like the following:

    
      ```json
      {
        "type": "triangle",
        "a": 3,
        "b": 4,
        "c": 5
      }
      ```
    

    or

    
      ```json
      {
        "type": "square",
        "side": 5
      }
      ```
    
  



  
    ```ts maxLines=0 {1}
    export type Shape = Triangle | Square;

    export interface Triangle {
      type: "triangle";
      a: number;
      b: number;
      c: number;
    }

    export interface Square {
      type: "square";
      side: number;
    }
    ```

    Callers can create a `Shape` object by simply constructing the appropriate type. For example, creating
    a `Triangle` shape looks like the following:

    ```ts
    const shape: Shape = {
      type: "triangle",
      a: 3,
      b: 4,
      c: 5,
    };
    ```

    Consumers can easily write branching logic by checking the discriminant.

    ```ts {4, 6}
    import { Shape } from "sdk";

    export function computeArea(shape: Shape): number {
      if (shape.type === "triangle") {
        // compute triangle area
      } else if (shape.type === "square") {
        // compute square area
      }
    }
    ```
  

  
    Go does not have a built-in support for discriminated unions. However, you can define a union struct
    to achieve the same effect:

    ```go maxLines=0 {1-5}
    type Shape struct {
    	Type     string
    	Triangle *Triangle
    	Square   *Square
    }

    type Triangle struct {
    	A float64 `json:"a" url:"a"`
    	B float64 `json:"b" url:"b"`
    	C float64 `json:"c" url:"c"`
    }

    type Square struct {
    	Side float64 `json:"side" url:"side"`
    }
    ```

    Callers can create a `Shape` object by simply setting the appropriate key. For example, creating
    a `Triangle` shape looks like the following:

    ```go
    shape := &Shape{
      // You do not need to set the Type field manually, the SDK will automatically set it for you.
      Triangle: &Triangle{
        A: 3,
        B: 4,
        C: 5,
      },
    }
    ```

    Consumers can easily write a `switch` statement by checking the discriminant:

    ```go {3, 5}
    func ComputeArea(shape *Shape) float64 {
      switch shape.Type {
      case "triangle":
        // compute triangle area
      case "square":
        // compute square areair
      }
    }
    ```
  



# Multipart Form Data

> SDKs that handle multipart form data

Fern generated SDKs natively support uploading files and other media through
multipart form data uploads.


  
    The TypeScript SDK will accept either a `fs.readStream`, `fs.ReadableStream` or a
    `Blob` for the file types. This is to ensure that the file upload functionality
    can be used in the browser, Node.js and edge runtimes like Next.js and Cloudflare.

    This is what the SDK method signature would look like:

    ```ts DocumentClient.ts
    export interface DocumentClient {
      
      /**
       * Upload a document.
       */
      public async upload(
          contents: fs.ReadStream | fs.ReadableStream | Blob,
          request: UploadDocumentBodyRequest,
          requestOptions?: RequestOptions
      ): Promise  
    }
    ```

    and how a user would consume it

    ```ts
    await client.documents.upload(fs.createReadStream('/path/to/your/file.txt'), {
      label: 'Human-friendly label for your document',
    });
    ```
  



# Forward compatibility

> SDKs that are fault-tolerant as your API evolves

Fern SDKs are designed so that you can evolve your API without breaking users on
legacy SDKs. You can safely add additional response properties, enum values, and union variants.
The legacy SDKs will safely handle deserializing extra information.


  
    ### Additional Response Properties

    As you make new response properties available,
    the legacy SDKs will continue to work. For example, let's say you
    generated an SDK that had the following `Movie` object:

    ```ts
    export interface Movie {
      name: string;
      id: string;
    }
    ```

    If you decided to add a new `genre` property on your server, the SDK will
    simply pass the extra property back. Users would also be able to access
    the property by doing

    ```ts
    const genre = movie['genre'];
    ```

    ### Additional Enum values

    As you add additional enum properties on your server, the
    legacy SDKs will continue to work. For example, let's say your generated SDK
    had the following `Genre` type:

    ```ts
    export type Genre =
      | "horror"
      | "action"
      | "thriller"
      | "drama";
    ```

    If you decided to add a new enum value `comedy`, the SDK will simply pass
    the string value back to the user. The consumer can then handle this case
    in the default case of a switch statement.

    ```ts {6-7}
    switch(genre) {
      case "horror": 
      case "action": 
      case "thriller": 
      case "drama": 
      default: 
        console.log(genre); // prints out comedy
    }
    ```

    ### Additional union variants

    Similar to additional enum properties, if you add additional union types
    on your server, the legacy SDKs will continue to work. For example, let's say your
    generated SDK had the following `Shape` type:

    ```ts
    export type Shape = Square | Circle;

    export interface Circle {
      type: "circle",
      radius: number
    }

    export interface Square {
      type: "square",
      side: number
    }
    ```

    If you decided to add an additional union type called `Triangle`

    ```ts
    + export type Shape = Square | Circle | Triangle;

    + export interface Triangle {
    +   type: "triangle",
    +   a: number
    +   b: number
    +   c: number
    + }
    ```

    then the user could simply handle the unknown case in their legacy SDK.

    ```ts {6-7}
    switch (type) {
      case "circle": 
        ...
      case "square": 
        ...
      default: 
        console.log(type); // prints out triangle
    }
    ```
  



# Automated publishing to registries

> Fern will automatically publish your SDKs to registries like NPM, PyPI, and Maven


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern will automatically publish your SDKs to registries like NPM, PyPI, and Maven. This means
that you can easily distribute your SDKs to your users without having to worry
about the publishing process.


  ### Configure your output location

  In your `generators.yml` you can specify which generators (e.g. Python, Go, TypeScript) you
  would like to subscribe to. To publish to a registry, you will need to specify the `output`
  location for the SDK.

  
    
      ```yaml {7-10}
        groups: 
          ts-sdk: 
            - name: fernapi/fern-typescript-node-sdk
              version: 0.13.0
              config: 
                namespaceExport: Imdb
              output: 
                location: npm
                package-name: "@imdb/sdk"
                token: ${ NPM_TOKEN } # must be present in the environment
      ```
    

    
      ```yaml {7-10}
        groups: 
          python-sdk: 
            - name: fernapi/fern-python-sdk
              version: 1.0.0
              config: 
                client_class_name: Imdb
              output: 
                location: pypi
                package-name: "imdb"
                token: ${ PYPI_TOKEN } # must be present in the environment
      ```
    

    
      ```yaml {7-10}
        groups: 
          java-sdk: 
            - name: fernapi/fern-java-sdk
              version: 0.12.0
              config: 
                client-class-name: Imdb
              output: 
                location: maven
                username: ${ MAVEN_USERNAME } # must be present in the environment
                password: ${ MAVEN_PASSWORD } # must be present in the environment
                coordinate: com.imdb:imdb-java
      ```
    
  

  ### Run `fern generate`

  Once you have configured your `generators.yml`, you can run `fern generate` to
  trigger the SDK generation process.

  
    To control the version of your package specify the `--version` flag. For example,
    `fern generate --version 1.0.0` would publish version `1.0.0`.
  


### Private registries

In some cases, you may want to publish your SDKs to a private registry. Fern hosts
private registries for you at `npm.buildwithfern.com`, `pypi.buildwithfern.com`,
`maven.buildwithfern.com`, etc. To use an internal registry, simply specify the
`url` field in your `generators.yml`:


  If you are using a private registry, then your package name must have `fern` postfixed to it.
  For example, `@imdb-fern/sdk`, `imdb-fern`, and `com.imdb.fern:imdb-java`.



  
    ```yaml {8}
      groups: 
        ts-sdk: 
          - name: fernapi/fern-typescript-node-sdk
            version: 0.13.0
            config: 
              namespaceExport: Imdb
            output: 
              url: npm.buildwithfern.com
              location: npm
              package-name: "@imdb-fern/sdk"
    ```
  

  
    ```yaml {8}
      groups: 
        ts-sdk: 
          - name: fernapi/fern-python-sdk
            version: 1.0.0
            config: 
              client_class_name: Imdb
            output: 
              url: pypi.buildwithfern.com
              location: pypi
              package-name: "imdb-fern"
    ```
  

  
    ```yaml {8}
      groups: 
        ts-sdk: 
          - name: fernapi/fern-java-sdk
            version: 0.12.0
            config: 
              client-class-name: Imdb
            output: 
              url: maven.buildwithfern.com
              location: maven
              coordinate: com.imdb.fern:imdb-java
    ```
  



  To use a private registry, you will need to set the `FERN_TOKEN` environment variable.



# Auto Pagination

> Paginate through API responses easily with offset, cursor, and link-based pagination.


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Instead of forcing SDK users to learn the intricacies of your pagination system, Fern SDKs will return an iterator so that users can simply loop through all the results.


  
    When pagination for an endpoint is configured, the TypeScript SDK method
    will return a `Page` where `T` is the underlying data type. The `Page`
    will implement the `AsyncIterable` interface, allowing you to use it in a
    `for await` loop.

    Below is an example method signature for a list endpoint:

    ```typescript UsersClient.ts {10-13}
    import core from "../core";

    export interface UsersClient {

      /**
       * List all users
       * @param props 
       * @returns A page of users
       */
      list(
        request: ListUsersRequest = {}, 
        requestOptions: core.RequestOptions = {}
      ): core.Page;
    }
    ```

    And here is an example of how a user would use the `list` method:

    ```typescript
    const response = await client.users.list();
    for await (const user of response) {
      console.log(user);
    }
    ```
  

  
    When pagination for an endpoint is configured, the Python SDK method
    will return a `Pager[T]` (specifically a `SyncPager[T]` or an `AsyncPager[T]`) where `T` is the underlying data type. The `Pager[T]`
    will implement the `Generator` interface, allowing you to use it in a
    `for ... in` loop.

    Below is an example method signature for a list endpoint:

    ```python client.py {3-9}
    class UsersClient:

      def list_with_cursor_pagination(
          self,
          *,
          page: typing.Optional[int] = None,
          page_size: typing.Optional[int] = None,
          request_options: typing.Optional[RequestOptions] = None,
      ) -> SyncPager[User]:
        ...
    ```

    And here is an example of how a user would use the `list` method:

    ```python
    for user in client.users.list(page=1, page_size=10):
      print(user)
    ```

    or if the user is leveraging the asynchronous client:

    ```python
    async for user in await client.users.list(page=1, page_size=10):
      print(user)
    ```
  


### Supported pagination types

Fern supports the following pagination schemes:

| Pagination Scheme | Supported                             |
| ----------------- | ------------------------------------- |
| Offset-based      |  |
| Cursor-based      |  |
| Link-based        |                                       |

#### Configuration

Annotate the desired paginated endpoint with the `x-fern-pagination` extension.
For these fields, you can simply specify the dot-access path to the related request or response property.

For example, should the results of the following object be found in the subfield `inner_list`, you would specify `results: $response.my_nested_object.inner_list`.

```yaml
MyResponseObject:
  type: object
  properties:
    my_nested_object:
      type: object
      properties:
        inner_list:
          type: array
          items:
            $ref: '#/components/schemas/MyObject'
```


  
    
      ```yaml Offset
      ...
      paths:
        /path/to/my/endpoint:
          x-fern-pagination:
            offset: $request.page_number
            results: $response.results
      ...
      ```

      ```yaml Cursor
      ...
      paths:
        /path/to/my/endpoint:
          get:
            x-fern-pagination:
              cursor: $request.cursor
              next_cursor: $response.next
              results: $response.results
      ...
      ```
    
  

  
    
      ```yaml Offset
      service:
        endpoints:
          listWithOffsetPagination:
            pagination: 
              offset: $request.page
              results: $response.data
      ```

      ```yaml Cursor
      service:
        endpoints:
          listWithCursorPagination:
            pagination: 
              cursor: $request.starting_after
              next_cursor: $response.page.next.starting_after
              results: $response.data
      ```
    
  



# OAuth

> Fern supports OAuth as a first class citizen


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern supports the OAuth 2.0 authorization framework as a first class citizen. With Fern, users don't need
to retrieve and manage access tokens manually. Instead, Fern SDKs will handle the entire OAuth flow.

For the `client-credentials` OAuth flow, the user simply provides their `client-id` and `client-secret`,
and they're ready to go.


  
    When OAuth is configured, the TypeScript SDK's client constructor will include the `clientId` and
    `clientSecret` parameters.

    Constructing the client is as simple as:

    ```typescript Client.ts
    client = new Client({
      clientId: 'YOUR_CLIENT_ID',
      clientSecret: 'YOUR_CLIENT_SECRET',
    });
    ```

    Behind the scenes, the `core.OAuthTokenProvider` retrieves an access token and refreshes it as needed. With this,
    the rest of the API (like the `User` client) can use the token to authenticate every request.
  

  
    When OAuth is configured, the Python SDK's client constructor will include the `client_id` and
    `client_secret` parameters.

    Constructing the client is as simple as:

    ```python client.py
    client = Client(
      client_id="YOUR_CLIENT_ID",
      client_secret="YOUR_CLIENT_SECRET",
    )
    ```

    Behind the scenes, the `core.OAuthTokenProvider` retrieves an access token and refreshes it as needed. With this,
    the rest of the API (like the `UserClient`) can use the token to authenticate every request.
  

  
    When OAuth is configured, the Java SDK’s builder methods for setting the `clientId` and `clientSecret` are available.

    Constructing the client is as simple as:

    ```java client.java
    Client client = Client.builder()
        .clientId("YOUR_CLIENT_ID")
        .clientSecret("YOUR_CLIENT_SECRET")
        .build();
    ```

    Behind the scenes, the `core.OAuthTokenProvider` retrieves an access token and refreshes it as needed. With this,
    the rest of the API (like the `UserClient`) can use the token to authenticate every request.
  


### Supported authorization flows

Fern supports the following OAuth authorization flows:

| Authorization Flow | Supported                             | Example                                                     |
| ------------------ | ------------------------------------- | ----------------------------------------------------------- |
| client-credentials |  | [Sayari](https://github.com/sayari-analytics/sayari-python) |
| authorization-code |  | [Webflow](https://github.com/webflow/webflow-python)        |
| pkce               |                                       |                                                             |


# Retries with Backoff

> Automatically retry failures with exponential backoff


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern SDKs will automatically retry failed requests with exponential backoff. A request will be retried as
long as the request is deemed retryable and the number of retry attempts has
not grown larger than the configured retry limit.

### Retryable status codes

A request is deemed retryable when any of the following HTTP status codes is returned:

* [408](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) (Timeout)
* [429](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) (Too Many Requests)
* [5XX](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) (Internal Server Errors)

Note that you can configure the list of retryable status codes as well. For example,
if you want to remove the `429` status code from the list of retryable status codes, you can do so.

### Overriding the retry limit

By default, the SDK will retry a failed request up to 2 times. SDK users can override the global
default retry limit when instantiating the client.


  
    ```ts {4}
    import { ImdbClient } from "imdb";

    const client = new ImdbClient({
      maxRetries: 1 // overrides the default retry limit to 1
    });
    ```
  

  
    ```python {4, 8}
    from imdb.client import Imdb, AsyncImdb

    client = Imdb({
      max_retries: 1 # overrides the default retry limit to 1
    })

    async_client = AsyncImdb({
      max_retries: 1 # overrides the default retry limit to 1
    })
    ```
  

  
    ```java {4}
    import com.imdb.ImdbClient;

    ImdbClient client = new ImdbClient.Builder()
      .maxRetries(1) // overrides the default retry limit to 1
      .build();
    ```
  

  
    ```go {7}
      import (
        imdbclient "github.com/fern-workos/workos-go/client"
        "github.com/fern-workos/workos-go/option"
      )

      client := imdbclient.NewClient(
        option.WithMaxAttempts(1), // overrides the default retry limit to 1
      )
    ```
  


It's also possible to override the retry limit on a per-request basis.


  
    ```ts {2}
      client.movie.get("tt0111161", {
        maxRetries: 3 // overrides the default retry limit to 3
      });
    ```
  

  
    ```python {2}
      client.movie.get("tt0111161", {
        max_retries: 3 // overrides the default retry limit to 3
      })
    ```
  

  
    ```java {2}
      client.movie().get("tt0111161", RequestOptions.builder()
        .maxRetries(3) // overrides the default retry limit to 3
        .build());
    ```
  

  
    ```go {4}
      response, err := client.Movies.Get(
        ctx,
        "tt0111161",
        option.WithMaxAttempts(1),
      )
    ```
  



# Webhook Signature Verification

> Verify the signature of incoming webhook requests


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern's SDKs export helper function to verify the signature of incoming webhook requests.
There are three benefits to using this feature:

1. **Security**: Users can ensure that the incoming webhook request is from your server.
2. **Ease of Use**: Instead of making consumers write signature verification logic, you can use the SDK's helper function.
3. **Strongly Typed**: The SDK will parse the incoming payload and return a strongly typed object.

Each SDK exports a `constructEvent` function that takes in the incoming payload and the signature. The
function will return a strongly typed object that represents the incoming webhook event.


  
    ```ts
    const payload = client.webhooks.constructEvent({
      body: req.body,
      signature: req.headers['x-imdb-signature'],
      secret: process.env.WEBHOOK_SECRET
    })
    ```
  

  
    ```python
    payload = client.webhooks.construct_event(
      body=request.text(),
      signature=request.headers['x-signature'],
      secret=os.environ['WEBHOOK_SECRET']
    )
    ```
  



# Idempotency Headers

> SDKs that safely support retrying requests


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


For any idempotent endpoints, Fern's SDKs will allow you to specify idempotency headers.
Typically the headers include `Idempotency-Key`, but you can also specify additional headers.


  
    ```ts {5}
    const response = await client.transactions.send({
      amount: 100,
      currency: "usd",
    }, {
      idempotencyKey: "64099353-b48b-4dcd-98b7-74df1cc57933"
    });
    ```
  

  
    ```python {4}
    response = client.transactions.send(
      amount=100, 
      currency="USD", {
      idempotency_key="64099353-b48b-4dcd-98b7-74df1cc57933"
    })
    ```
  

  
    ```java {7}
    var response = client.transactions().send(
      SendTransactionsRequest.builder()
        .amount(100)
        .currency(Currency.USD)
        .build(),
      IdempotentRequestOptions.builder()
        .idempotencyKey("64099353-b48b-4dcd-98b7-74df1cc57933")
        .build()
    );
    ```
  

  
    ```go {7}
    response, err := client.Transactions.Send(
      ctx,
      &SendTransactionsRequest{
        Amount: 100,
        Currency: Currency.USD,
      },
      option.WithIdempotencyKey("64099353-b48b-4dcd-98b7-74df1cc57933"),
    )
    ```
  


Note that the generated SDKs will not allow you to specify idempotency headers
for non-idempotent endpoints. This is to ensure that the user knows exactly
which invocations are idempotent and which are not.

### Configuration

To enable idempotency headers in your API, you need to do the following in your overrides file:

1. Configure the idempotency headers
2. Mark individual endpoints as idempotent


  
    
      
        ```yaml
        # Configure the idempotency headers
        x-fern-idempotency-headers:
          - header: IDEMPOTENCY-KEY
            name: idempotency_key

        # Mark an individual endpoint as idempotent
        paths:
          /foo:
            post:
              x-fern-idempotent: true
        ```
      
    
  

  
    
      
        ```yaml
        # Configure the idempotency headers
        name: idempotency-headers
        auth: bearer
        idempotency-headers:
          Idempotency-Key: string
          Idempotency-Expiration: integer
        ```
      

      
        ```yaml
        # Mark an individual endpoint as idempotent
        endpoints:
          foo:
            idempotent: true
        ```
      
    
  


```
```


# Server-Sent Events

> Stream JSON data from your server to your client (i.e. chat completions)


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern's SDKs support Server-Sent Events (SSE) out of the box. This feature is
especially relevant for chat completions, where you want to stream LLM
outputs in real-time.


  
    When an endpoint is configured to use Server-Sent Events, the TypeScript SDK
    method will return an `AsyncIterable` of the underlying data type. This
    allows you to use it in a `for await` loop.

    Below is an example method signature for a stream endpoint:

    ```ts ChatClient.ts {10-13}
    import core from "../core";

    export interface ChatClient {

      /**
      * Stream chat completions
      * @param props 
      * @returns An async iterable of chat completions
      */
      stream(
        request: ChatStreamRequest, 
        requestOptions: core.RequestOptions = {}
      ): AsyncIterable;
    }
    ```

    And here is an example of how a user would use the `stream` method:

    ```ts
    const response = await client.chat.stream({
      query: "What is the weather in New York?"
    });
    for await (const completion of response) {
      console.log(completion);
    }
    ```
  

  
    When an endpoint is configured to use Server-Sent Events, the Python SDK
    method will return an `typing.Iterator` of the underlying data type.

    Below is an example method signature for a chat endpoint:

    ```py chat_client.py {5-10}
    from fern import core

    class ChatClient:

      def stream(
        self, 
        *, 
        query: str,
        request_options: typing.Optional[RequestOptions]
      ) -> typing.Iterator[StreamedChatResponse]:
        pass
    ```

    And here is an example of how a user would use the `stream` method:

    ```py
    response = client.chat.stream(
      query = "What is the weather in New York?",
    )
    for completion in response:
      print(completion)
    ```

    ### Async client

    The Python SDK will also export an asynchronous version of the client. The async client
    will return an `AsyncIterator` instead of a regular iterator.

    ```py chat_client.py {5-10}
    from fern import core

    class ChatClient:

      def stream(
        self, 
        *, 
        query: str,
        request_options: typing.Optional[RequestOptions]
      ) -> typing.AsyncIterator[StreamedChatResponse]:
        pass
    ```

    And here is an example of how a user would use the async `stream` method:

    ```py
    import asyncio

    async def main(): 
      response = await client.chat.stream(
        query = "What is the weather in New York?",
      )
      async for completion in response:
        print(completion)

    asyncio.run(main())
    ```
  



# Integration Tests

> Test your SDK against a mock server


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


To make sure that your SDK works in production, Fern will auto-generate
integration tests that run before release. The release will only take place
if no tests fail.

### What gets generated?


  
    Fern will use your API Definition to generate a mock server that will be used
    in the integration tests. The mock server will assert that the SDK is
    making the correct requests.

    By default, the mock server will use the examples specified in your
    API Definition. If no examples are specified, Fern will generate examples to
    the best of its ability.

    
      Specifying examples in your API Definition is recommended to ensure so that you can
      control what data is used in the tests.
    
  

  
    Fern will generate integration tests as part of your SDK. These integration tests
    will run against the mock server and assert validity of requests and responses.

    The generated tests will use appropriate testing framework for the language:

    * Jest for JavaScript/TypeScript
    * Pytest for Python
    * JUnit for Java
    * RSpec for Ruby
    * NUnit for C#
    * The standard library for Go
  

  
    Fern will generate a GitHub workflow that will run the integration tests
    on every pull request, commit and release.

    
      ![GitHub Workflow](https://fern-image-hosting.s3.amazonaws.com/fern/test-ci.png)
    
  


### Adding additional tests

If you would like to add additional tests, you can do so by committing them
directly to the generated SDK repositories. Note that you will need to
add the test files to your `.fernignore` file to prevent them from being
overwritten by Fern.


  
    
      ### Create `tests/custom.test.ts`

      ```typescript
        import { MyClient } from '../src';

        describe('MyClient', () => {
          it('should do something', async () => {
            const client = new MyClient();
            const response = await client.resource.get();
            expect(response).toEqual({ something: 'something' });
          });
        });
      ```

      ### Run your test

      ```bash
      yarn install
      yarn test tests/custom.test.ts
      ```

      ### `.fernignore` your test file

      ```yaml .fernignore {3}
      # Specify any files that shouldn't be modified by Fern

      tests/custom.test.ts
      ```
    
  

  
    
      ### Create `tests/test_custom.py`

      ```python
          from package.client import MyClient

          def test() -> None:
              client = MyClient()
              response = client.resource.get()
              assert response.something === "something"
      ```

      ### Run your test

      ```bash
      poetry install
      poetry run pytest tests/test_custom.py -rP
      ```

      ### `.fernignore` your test file

      ```yaml .fernignore {3}
        # Specify any files that shouldn't be modified by Fern

      tests/test_custom.py
      ```
    
  

  
    
      ### Create `src/test/java/com/example/MyClientTest.java`

      ```java
      package com.example;

      import static org.junit.jupiter.api.Assertions.assertEquals;
      import org.junit.jupiter.api.Test;
      import com.example.MyClient;

      public class MyClientTest {

        @Test
        public void testSomething() {
          MyClient client = new MyClient();
          var response = client.getResource().get();
          assertEquals("something", response.getSomething());
        }

      }
      ```

      ### Run your test

      ```bash
      ./gradlew test --tests com.example.MyClientTest
      ```

      ### `.fernignore` your test file

      ```yaml .fernignore {3}
      # Specify any files that shouldn't be modified by Fern

      src/test/java/com/example/MyClientTest.java
      ```
    
  



# Code Snippets

> No longer depend on manually written code snippets


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern generates code snippets of how to consume the SDK in various languages.
These code snippets are embedded in a variety of different locations:

### Snippets in the SDK

Each SDK contains code snippets so that users can see usage examples
on hover. See examples below:


  
    ```typescript focus={6-11} maxLines=0
    export interface MovieClient {
      /**
       * Create a new movie
       * @param request: a request to create a movie
       * 
       * @example
       * const response = await client.movie.create({
       *  title: 'Inception',
       *  year: 2010,
       *  director: 'Christopher Nolan'
       * });
       */
      create(request: CreateMovieRequest): Promise; 
    }
    ```
  

  
    ```python focus={18-25} maxLines=0
    class MovieClient:

      def create(
        self, 
        *,
        title: str,
        year: int,
        director: str
      ) -> CreateMovieResponse: 
          """
          Create a new movie
          
          Parameters: 
            - title: str. The title of the movie.
            - year: int. The year the movie was released.
            - director: str. The director of the movie.
          ---
          from imdb.client import Imdb
          
          client = Imdb()
          response = client.movie.create(
            title='Inception',
            year=2010,
            director='Christopher Nolan'
          )
          """
    ```
  


### Snippets in documentation

If you use Fern to generate your developer documentation, then you can configure the code
snippets to be automatically populated in your documentation.


  ![Code snippets](https://fern-image-hosting.s3.amazonaws.com/fern/sdk-code-snippets-in-docs.png)


### Snippets over API

We also provide a public API that you can use to [fetch code snippets](/learn/api-reference/snippets/get). This is useful if you
want to display code snippets in your own documentation or website.


  ![Code snippets](https://fern-image-hosting.s3.amazonaws.com/fern/merge-code-snippets.png)



# Augment with custom code

> Extend the generated SDK to provide additional functionality


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


The Fern generated SDKs are designed to be extended with custom code. Your custom code
can be used to add additional functionality to the SDK and will live in harmony with
the generated code.

## Custom logic

If you want to provide any logic in your SDK that goes beyond hitting the REST API, you can
do so by leveraging `.fernignore`.

Simply add your custom files to the SDK repository and  list them out in `.fernignore`. Fern
won't override any files that you add in `.fernignore`.


  
    
      ### Create a new file `src/helper.ts`

      ```typescript
      export function myHelper(): void {
        return console.log("Hello world!");
      }
      ```

      ### Add `src/helper.ts` to `.fernignore`

      
        ```yaml {3}
        # Specify files that shouldn't be modified by Fern

        src/helper.ts
        ```
      

      ### Consume the helper

      Now your users can consume the helper function by importing it from the SDK:

      ```typescript
      import { myHelper } from "sdk/helper";

      myHelper();
      ```
    
  

  
    
      ### Create a new file `src//helper.py`

      ```python
      def my_helper() -> None:
        print "Hello World!"
      ```

      ### Add `src//helper.py` to `.fernignore`

      
        ```yaml {3}
        # Specify files that shouldn't be modified by Fern

        src//helper.py
        ```
      

      ### Consume the helper

      Now your users can consume the helper function by importing it from the SDK:

      ```python
      from package.helper import my_helper

      my_helper()
      ```
    
  

  
    
      ### Create a new file `src/main/java//Helper.java`

      ```java
      package com.example.helper;

      public class Helper {

        public static void myHelper() {
          System.out.println("Hello World!");
        }

      }
      ```

      ### Add `src/main/java//Helper.java` to `.fernignore`

      
        ```yaml {3}
        # Specify files that shouldn't be modified by Fern

        src/main/java//Helper.java
        ```
      

      ### Consume the helper

      Now your users can consume the helper function by importing it from the SDK:

      ```java
      import com.example.helper.Helper;

      public class Main {

        public static void main(String[] args) {
          Helper.myHelper();
        }

      }
      ```
    
  

  
    
      ### Create a new file `helper.go`

      ```go
      func MyHelper() {
        fmt.Println("Hello World!")
      }
      ```

      ### Add `helper.go` to `.fernignore`

      
        ```yaml {3}
        # Specify files that shouldn't be modified by Fern

        helper.go
        ```
      

      ### Consume the helper

      Now your users can consume the helper function by importing it from the SDK:

      ```go
      import "github.com/package/example"

      example.MyHelper();
      ```
    
  


## Custom SDK methods

Fern also allows you to add custom methods to the SDK itself (e.g. `client.my_method()` ).

While the specifics are slightly different for each language, the underlying
principle is the same: **extension**. You can inherit the
Fern generated client and add whatever methods you want.


  
    
      See an example from Flatfile using this process in their [TypeScript SDK](https://github.com/FlatFilers/flatfile-node)
    

    
      ### Create a new file `src/wrapper/MyClient.ts`

      You can import the Fern generated client from `../client` and alias it to `FernClient`.
      Next, extend `FernClient` and add whatever methods you want.

      ```typescript
      import { MyClient as FernClient } from "../client"; // alias the Fern generated client

      export class MyClient extends FernClient { // extend the Fern generated client

        public myHelper(): void {
          console.log("Hello world!");
        }

      }
      ```

      ### Export the extended client

      Instead of exporting the generated client, export the extended client. To do this,
      you will need to update the `index.ts` file.

      
        ```typescript
        export { MyClient } from src/wrapper/MyClient; // instead of `src/Client`
        ```
      

      ### Update `.fernignore`

      Add both the `wrapper` directory and `index.ts` to `.fernignore`.

      
        ```diff
        + src/wrapper
        + src/index.ts
        ```
      

      ### Consume the method

      Now your users can consume the helper function by importing it from the SDK:

      ```typescript
      client.myHelper()
      ```
    
  

  
    
      See an example from ElevenLabs using this process in their [Python SDK](https://github.com/elevenlabs/elevenlabs-python/blob/main/src/elevenlabs/client.py).
    

    
      ### Update `generators.yml` configuration

      To add a custom method to the Python SDK, you will need to configure the
      generator to output the client in a file called `base_client.py`. Then, you can
      extend the base client and add whatever methods you want. See the

      ```yaml {4-8}
      - name: fernapi/fern-python-sdk
        version: "..."
        config:
          client:
            class_name: BaseClient        # The name of the generated client you will extend
            filename: base_client.py      # The name of the file the generated client will live in
            exported_class_name: Client   # The name of the class you will be creating that extends the generated client
            exported_filename: client.py
      ```

      ### Generate the SDK

      Trigger SDK generation by running `fern generate`.

      ### Create a new file `src//client.py`

      You can import the Fern generated client from `../client` and alias it to `FernClient`.
      Next, extend `FernClient` and add whatever methods you want.

      ```python
      from .base_client import \
        BaseClient, AsyncBaseClient

      class YourClient(BaseClient):

        def my_helper(): -> None
          print("Hello World")

      class AsyncYourClient(AsyncBaseClient):

        def my_helper(): -> None
          print("Hello World")

      ```

      ### Update `.fernignore`

      Add the `client.py` to `.fernignore`.

      
        ```diff
        + src//client.py
        ```
      

      ### Consume the method

      Now your users can consume the helper function by importing it from the SDK:

      ```typescript
      client.my_helper()
      ```
    
  

  
    
      ### Rename the Fern-generated client

      We suggest naming your Fern-generated client something like `BaseClient`to reflect that this client will be extended.

      ```yml {4}
      - name: fernapi/fern-java-sdk
          version: "..."
          config:
            client-class-name: BaseClient
      ```

      ### Create a new file `src/main/java/com/example/MyClient.java`

      You can extend the Fern client and add whatever methods you want.

      ```java
      package com.example;

      import com.example.client.BaseClient;

      public class MyClient extends BaseClient { // extend the Fern generated client

        public void myHelper() {
          System.out.println("Hello World!");
        }

      }
      ```

      ### Update `.fernignore`

      Add the `MyClient.java` to `.fernignore`.

      
        ```diff
        + src/main/java/com/example/MyClient.java
        ```
      

      ### Consume the method

      ```java
      client.myHelper();
      ```
    
  

  
    
      ### Create a new file `client/my_client.go`

      You can import the Fern generated client from the same package and add whatever methods you want.

      ```go
      type MyClient struct {
        *Client // Embed the Fern generated client.
      }

      func NewMyClient(opts ...option.RequestOption) *MyClient {
        return &MyClient{
          Client: NewClient(opts...),
        }
      }

      func (m *MyClient) MyHelper() {
        fmt.Println("Hello World!")
      }
      ```

      ### Export the extended client

      Instead of constructing the generated client, your users will want to construct the extended client.

      
        ```go
        import exampleclient "github.com/package/example/client"

        client := exampleclient.NewMyClient():
        ```
      

      ### Update `.fernignore`

      Add the \`client/my\_client.go.

      
        ```diff
        + client/my_client.go
        ```
      

      ### Consume the method

      Now your users can consume the helper function by importing it from the SDK:

      ```go
      client.MyHelper()
      ```
    
  


## Custom dependencies

To add custom dependencies to your generated SDKs, you can update your `generators.yml`.


  
    ```yaml {4-7}
    - name: fernapi/fern-typescript-node-sdk
      version: "..."
      config:
        extraDependencies:
          lodash-es: '1.0.0'
        extraDevDependencies:
          "@types/lodash-es": '1.0.0'
    ```
  

  
    ```yaml {4-7}
    - name: fernapi/fern-python-sdk
      version: "..."
      config:
        extra_dependencies:
          numpy: '1.2.0'
        extra_dev_dependencies:
          requests_mock: '1.12.1'
    ```
  



# Merging multiple API specs

> Multiple API Definitions. One SDK.


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern supports intelligently merging multiple API Definitions into a single SDK. This feature
is useful when you have multiple micro-services that you would like to expose as a single
SDK.


  
    You can specify your API Definition in `generators.yml`. In the normal case, you would have
    a single API Definition.

    
      
        ```yaml
        api: path/to/petstore.yml
        ```
      

      
        ```ts
        client.pet.getPetById(1);
        ```
      
    
  

  
    If you have multiple API Definitions, you can specify them in `generators.yml` as follows:

    
      
        ```yaml
        api: 
          - path/to/petstore.yml
          - path/to/plantstore.yml
        ```
      

      
        ```ts
        client.pet.getPetById(1);

        client.plant.getPlantById(1); 
        ```
      
    
  

  
    If you have multiple API Definitions that have overlapping schema names or operation names,
    you can specify a `namespace` for each API Definition. A namespace is often used to
    handle API versioning. Note these are nested under a `namespaces` block.

    
      
        ```yaml {3,6}
        api: 
          namespaces:
            v1: 
              - path/to/petstore.yml
              - path/to/plantstore.yml
            v2: 
              - path/to/petstore-v2.yml
              - path/to/plantstore-v2.yml
        ```
      

      
        ```ts
        client.v1.pet.getPetById(1);

        client.v2.plant.getPlantById(1); 
        ```
      
    
  

  
    Fern allows you to import other APIs into your API. This is often useful if:

    * you want to reuse another API’s types in your API
    * you want to combine multiple APIs into one SDK (similar to the AWS SDK)

    
      This feature is only available if you use a Fern Definition.
    

    
      ### Register your API

      The first step is to register the API you want to depend on. To do this, use
      the register command:

      ```bash
      fern register
        [some-dependency]: Uploading definition...
        [some-dependency]: Registered @fern/some-dependency:0.0.1
      ```

      You can set the version of your dependency by using the `--version` flag:

      ```bash
      fern register --version 1.0.0
        [some-dependency]: Uploading definition...
        [some-dependency]: Registered @fern/some-dependency:1.0.0
      ```

      ### Depending on the registered API

      To add a dependency on another API, you simply create a folder in your Fern Definition to
      “house” the dependency.

      ```bash
      fern/
        ├─ fern.config.json
        └─ api/ # <--- your API
          ├─ generators.yml
          └─ definition/
            ├─ api.yml
            ├─ imdb.yml
            └─ my-folder
              └─ __package__.yml
      ```

      In `__package__.yml`, you can specify the API you want to depend on:

      ```yaml
      export:
      name: @fern/some-dependency
      version: 0.0.1
      ```

      At runtime, the `__package__.yml` file will effectively
      be replaced with the API you’re depending on.
    
  



# WebSockets

> Send and receive messages over WebSockets


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.


Fern's SDKs support sending and receiving messages over WebSockets. You can specify
your WebSocket API Definition by using [AsyncAPI](https://www.asyncapi.com/en) or
the Fern Definition.

### How it works


  ### Specify your WebSocket API Definition

  
    
      See below for how to specify the contract for your WebSocket channel
      using AsyncAPI.

      ```yaml maxLines={0}
      asyncapi: 2.6.0
      info:
        title: Chat API
        version: 1.1.2
      servers:
        production:
          host: wss.chat.com
      channels:
        /:
          bindings:
            ws:
              query:
                type: object
                properties:
                  channel_id:
                    type: string
                    description: Unique identifier assigned to the channel
          publish:
            description: Send messages to the WebSocket
            operationId: sendMessage
            message:
              oneOf:
                - $ref: "#/components/messages/SendChat"
          subscribe:
            description: Receive messages from the WebSocket
            operationId: receiveMessage
            message:
              oneOf:
                - $ref: "#/components/messages/ReceiveChat"
      components:
        messages:
          SendChat:
            summary: Action triggered when the channel receives a new reaction-added event
            payload:
              $ref: '#/components/schemas/SendChat'
          ReceiveChat:
            summary: Action triggered when a successful WebSocket connection is established
            payload:
              $ref: '#/components/schemas/ReceiveChat'
        schemas:
          SendChat:
            type: object
            properties:
              message:
                type: string
          ReceiveChat:
            type: object
            properties:
              message:
                type: string
      ```
    

    
      If you have a Fern Definition, you can specify your WebSocket in
      a YML file. See the example in `chat.yml` below:

      
        
          ```yaml maxLines={0}
          channel:
            path: /chat
            auth: false
            query-parameters:
              model_id:
                type: optional
                docs: The unique identifier of the model.
              model_version:
                type: optional
                docs: The version number of the model.
            messages:
              publish:
                origin: client
                body: PublishEvent
              subscribe:
                origin: server
                body: SubscribeEvent
            examples: 
              - query-parameters: 
                  model_id: "123"
                messages: 
                  - type: publish
                    body:
                      text: "Hello, world."
                  - type: subscribe
                    body: 
                      id: "23823049"
                      message: "Hello there, how are you?"
          types:
            PublishEvent:
              docs: The input from the user to send through the WebSocket. 
              properties: 
                text: 
                  type: string
                  docs: The user text to send into the conversation. 
            SubscribeEvent:
              docs: The response from the server sent through the WebSocket.
              properties: 
                id: 
                  type: string
                  docs: The id of the message. 
                message:
                  type: string
                  docs: The message sent through the socket. 
          ```
        
      
    
  

  ### Generate the SDK

  
    
      ```ts maxLines={0}
      import { ChatClient } from "chat";

      const client = new ChatClient();

      const socket = client.chat.connect({
        channelId: "123",
        onOpen: () => {
          console.log("Connected to the WebSocket");
        },
        onMessage: (message) => {
          console.log(message);
        },
      });

      await socket.send("Hello, world!");

      socket.on("close", () => {
        console.log("WebSocket connection closed");
      });

      await socket.send("Bye, world!");

      socket.close();
      ```
    

    
      ```python
      from chat.client import Chat  

      client = Chat()

      async with client.chat.connect(
                    channel_id="123", 
                    on_message: lambda message: print(message)) as socket:
        
          await socket.send("Hello, world!")

          response = await socket.recv()

          await socket.send("Bye, world!");
      ```
    
  



# Model Context Protocol

> Learn how to use the Model Context Protocol (MCP) to integrate AI capabilities with your Fern documentation


  The MCP generator is in development. Interested in offering an MCP server for your API? Reach out via Slack or [support@buildwithfern.com](mailto:support@buildwithfern.com).


[Model Context Protocol (MCP)](https://modelcontextprotocol.io) is an open standard by Anthropic that streamlines how AI applications connect with external data sources and tools, enabling AI agents to directly use your product’s APIs.

A “Built with Fern” MCP server augments your existing TypeScript SDK with MCP capabilities and integrates seamlessly with popular AI-powered tools including Cursor, Claude Desktop, and Windsurf. You can find a full list of MCP clients [here](https://modelcontextprotocol.io/clients).

## How it works

**Fern can build a production-ready MCP server on top of your existing TypeScript SDK.** We maintain the package in its own `git` repository, making it easy for your existing developer community to discover and contribute to the project. We can also automatically publish new versions of the package to `npm` for you.

End users of a “Built with Fern” MCP server can typically get started with a **single config**:

```json
{
  "mcpServers": {
    "": {
      "command": "npx",
      "args": [ "-y", "-mcp-server@latest" ]
    }
  }
}

```

To learn more about Model Context Protocol (MCP) servers, check out the [MCP server docs](https://modelcontextprotocol.io/quickstart/server).

## Case study: Webflow

**We worked with Webflow to launch their [official MCP server](https://www.npmjs.com/package/webflow-mcp-server)** using the existing [Fern-generated TypeScript SDK](https://github.com/webflow/js-webflow-api).

Check out the [source code on GitHub](https://github.com/webflow/mcp-server) and read the announcement from Webflow’s CTO on X:


  
🚢 We just launched our Webflow MCP server! Check out Allan’s thread to learn more, watch the demo video below, then give it a try here: [https://t.co/T2K3OpJ6O8](https://t.co/T2K3OpJ6O8) [https://t.co/bFUfC64pcf](https://t.co/bFUfC64pcf) pic.twitter.com/oonYuyjHiT



  — Webflow (@webflow) 

  April 2, 2025


## Why "Built with Fern"?

There are a few advantages in partnering with Fern to build your MCP server:

* **Keep your MCP server in sync with your API** - our implementation augments your existing TypeScript SDK.
* **Integrate with Fern Docs and AI Chat** - give your users the ability to query your docs directly from inside of Cursor, Claude Desktop, and more.
* **For APIs at scale** - leverage our team’s expertise developing, testing, and deploying MCP servers for products with hundreds of API endpoints.
* **Thought partnership** - the AI ecosystem is changing fast and we’re here to navigate it together with you, from the latest techniques to the tools that power them.

## How else can Fern support my MCP server launch?

We can provide **ready-to-use social media assets** for announcing your MCP support:

* LinkedIn post template
* X (Twitter) post template
* Email announcement template
* Social media graphics

As well as all of the **detailed documentation** that you’ve come to expect from Fern:

* Getting started guide
* API reference
* Usage guidelines and best practices


# SDK Configuration

> Configure your SDK generators in `generators.yml` and publish to registries


  Before you can configure your generators, you must setup your API Definition. Learn more
  [**here**](/learn/api-definition/introduction/what-is-the-fern-folder)


## Top Level Configuration

```yaml title="generators.yml" maxLines=10
default-group: local

readme:
  apiReferenceLink: https://plantstore.dev
  defaultEndpoint: GET /v3/store/inventory

groups:
  node:
    generators:
      - name: fernapi/fern-typescript-node-sdk
        version: 0.x.x
        output:
          location: npm
          package-name: "@plantstore/sdk"
          token: ${NPM_TOKEN}
        config:
          outputSourceFiles: true
        github:
          repository: "plantstore/plantstore-js"
        metadata:
          package-description: JavaScript library for the Plant Store API Service
          license: MIT
  python:
    generators:
      - name: fernapi/fern-python-sdk
        version: 0.x.x
        output:
          location: pypi
          package-name: "plantstore"
          token: ${PYPI_TOKEN}
        config:
          outputSourceFiles: true
        github:
          repository: "plantstore/plantstore-python"
```


  The default group of generators to run when running `fern generate`.



  Learn more about the README configuration [here](#readme-configuration).



  A set of key-value pairs from the group id to the group configuration.


## README Configuration

```yaml generators.yml
readme:
  apiReferenceLink: https://plantstore.dev
  defaultEndpoint: GET /v3/store/inventory
```


  A link to your hosted API Reference. Fern will embed this link into your generated READMEs so that SDK users know to
  navigate to your API Reference.



  The endpoint you want to use in README code samples. If unspecified, Fern will default to the first POST request.


## Specify Package Metadata

```yaml generators.yml
metadata:
  package-description: Python library for the Plant Store API Service
  license: Apache
```


  The description you'd like the package manager, such as NPM or PyPI, to include.



  The license you'd like to apply to the code published to GitHub. Options include `MIT` or `Apache` (Apache 2.0). To
  request a new license, [open a GitHub
  Issue](https://github.com/fern-api/fern/issues/new?assignees=\&labels=\&projects=\&template=feature-request.md\&title=%5BFeature%5D).


## Schema Validation

Add the following as a comment in your `generators.yml` to enable schema validation, ensuring that your configuration is correct. Check out an example in [Cartesia's Fern Folder](https://github.com/cartesia-ai/docs/blob/43b143f66845d90bffbd0ef1951fd812229d95c0/fern/generators.yml#L1).

```yaml
# yaml-language-server: $schema=https://schema.buildwithfern.dev/generators-yml.json
```


# Generate your first SDK

> Use Fern's CLI tool to generate your first SDK.


  Generating SDKs often requires understanding the state of your OpenAPI Specification as well as
  your specific requirements. For the ideal experience, we **strongly recommend** scheduling a
  [demo](https://buildwithfern.com/contact) or [emailing us](mailto:support@buildwithfern.com) to get started.


If you'd rather get started immediately, you can use Fern's CLI tool
to generate your first SDK.


  ### Install the Fern CLI

  First, install the CLI tool by running the following command:

  ```bash
  npm install -g fern-api
  ```

  ### Initialize the Fern Folder

  
    
      If you have an OpenAPI Specification, you can initialize the Fern folder by running the following command:

      ```bash
      fern init --openapi path/to/openapi.yml
      ```

      If your OpenAPI Specification is hosted on the web, you can use the URL:

      ```bash
      fern init --openapi https://api.example.com/openapi.yml
      ```

      This will create a `fern` folder in your current directory with the OpenAPI Specification.

      ```bash
      fern/
        ├─ fern.config.json # root-level configuration
        └─ api/ # your API
          ├─ generators.yml # generators you're using
          └─ openapi/
            ├─ openapi.yml  # API-level configuration
      ```
    

    
      If you'd like to use the Fern Definition, you can initialize the Fern folder
      by running the following command:

      ```bash
      fern init
      ```

      This will create a `fern` folder in your current directory with the Fern Definition.

      ```bash
      fern/
        ├─ fern.config.json # root-level configuration
        ├─ generators.yml # generators you're using
        └─ definition/
          ├─ api.yml  # API-level configuration
          └─ imdb.yml # endpoints, types, and errors
      ```
    
  

  ### Pass `fern check`

  Run `fern check` to ensure that your API Definition is valid. If there are any errors,
  you will need to fix them before proceeding.

  
    If you're using an OpenAPI Specification, check out all of our
    [supported extensions](/learn/api-definition/openapi/extensions).
  

  ### Add the SDK generator

  
    By default, none of the pro features will be enabled.
  

  You can now use the SDK in your application. Here's an example of how
  you can use the SDK:

  
    
      ```sh
      fern add fern-typescript-node-sdk --group sdk
      ```
    

    
      ```sh
      fern add fern-python-sdk --group sdk
      ```
    

    
      ```sh
      fern add fern-java-sdk --group sdk
      ```
    

    
      ```sh
      fern add fern-go-sdk --group sdk
      ```
    

    
      ```sh
      fern add fern-ruby-sdk --group sdk
      ```
    

    
      ```sh
      fern add fern-csharp-sdk --group sdk
      ```
    
  

  ### Run `fern generate --group sdk`

  Next up, run the following command to generate the SDK:

  ```bash
  fern generate --group sdk
  ```

  This will create a `fern` folder in your current directory with the Fern
  Definition. For example, if you're generating a TypeScript SDK, the folder structure
  will look like this:

  ```bash
  sdks/
    typescript/
      src/
        ├─ index.ts
        ├─ Client.ts
        └─ api
        └─ errors   
        └─ serialization   
  ```



# Preview your SDK

> Use Fern's CLI tool to preview your SDK locally.

[Once you configure your SDK](/learn/sdks/getting-started/generate-your-first-sdk), you can preview the generated SDK code using Fern's CLI.

Simply append the `--preview` flag to the command used to generate the SDK and you will see the generated code populated in a `.preview` folder within your `fern` folder.


  [If you have added custom code to your SDK](/learn/sdks/capabilities/augment-with-custom-code), `--preview` will
  preserve those changes.


Here's an example of how you can preview your SDK:


  ### Generator configuration

  ```yaml generators.yml
  api: 
    path: ./path/to/openapi.yml
  groups:
    python-sdk:
      generators:
        - name: fernapi/fern-python-sdk
          version: 3.0.0
          output:
            location: pypi
            package-name: imdb
            token: ${PYPI_TOKEN}
          github:
            repository: imdb/imdb-python
          config:
            client_class_name: imdb
  ```

  ### Invoke the Fern CLI

  ```shell
  fern generate --group python-sdk --preview
  ```

  ### Preview your SDK

  The resulting folder structure will look like this:

  
    
      ```shell {3-5}
      fern/
        ├─ fern.config.json
        ├─ .preview/
          └─ fern-python-sdk/
            └─ ...
        ├─ generators.yml
        └─ openapi/
          └─ openapi.yml
      ```
    

    
      ```shell {3-5}
      fern/
        ├─ fern.config.json
        ├─ .preview/
          └─ fern-python-sdk/
            └─ ...
        ├─ generators.yml
        └─ definition/
          ├─ api.yml
          └─ imdb.yml
      ```
    
  



# Publish a public-facing SDK

> Use Fern to publish a public-facing SDK


  This feature is only available on paid plans. Please schedule a [demo](https://buildwithfern.com/contact)
  or [email us](mailto:support@buildwithfern.com) to get started.



  GitHub Page


This guide will walk you through how to publish public-facing SDKs through Fern.


  
    This guide assumes that you already have an initialized fern folder. If you don't
    please run `fern init`!

    Your `generators.yml` lives inside of the fern folder and contains all
    the configuration for your Fern generators.
  

  
    In order to generate the SDK, we'll need to add the generator to your
    `generators.yml`. You can use the `fern ` command to do this.

    
      ```bash TypeScript
      fern add fern-typescript-node-sdk --group ts-sdk
      ```

      ```bash Python
      fern add fern-python-sdk --group python-sdk
      ```

      ```bash Java
      fern add fern-java-sdk --group java-sdk
      ```

      ```bash Go
      fern add fern-go-sdk --group go-sdk
      ```

      ```bash Ruby
      fern add fern-ruby-sdk --group ruby-sdk
      ```

      ```bash .NET
      fern add fern-csharp-sdk --group csharp-sdk
      ```

      ```bash PHP
      fern add fern-php-sdk --group php-sdk
      ```
    

    Once the command completes, you'll see a new group created in your `generators.yml`.

    
      ```yaml TypeScript 
      groups: 
        ts-sdk:
          generators:
            - name: fernapi/fern-typescript-node-sdk
              version: 1.0.0
              output:
                location: local-file-system
                path: ../sdks/typescript
      ```

      ```yaml Python 
      groups: 
        python-sdk:
          generators:
            - name: fernapi/fern-python-sdk
              version: 4.20.3
              output:
                location: local-file-system
                path: ../sdks/python
      ```

      ```yaml Java 
      groups: 
        java-sdk:
          generators:
            - name: fernapi/fern-java-sdk
              version: 2.36.4
      ```

      ```yaml Go 
      groups:
        go-sdk:
          generators:
            - name: fernapi/fern-go-sdk
              version: 0.36.4
      ```

      ```yaml .NET 
      groups: 
        csharp-sdk:
          generators:
            - name: fernapi/fern-csharp-sdk
              version: 1.17.4
      ```

      ```yaml Ruby 
      groups: 
        ruby-sdk:
          generators:
            - name: fernapi/fern-ruby-sdk
              version: 0.9.0-rc2
      ```

      ```yaml PHP 
      groups: 
        php-sdk:
          generators:
            - name: fernapi/fern-php-sdk
              version: 0.15.0
      ```
    

    Here are the [latest versions of each generator](https://github.com/fern-api/fern?tab=readme-ov-file#-generators).
  

  
    In order to setup publishing your SDK, you'll need to configure
    an output location in your `generators.yml`:

    
      ```yaml title="TypeScript" {6-8}
      groups: 
        ts-sdk:
          generators:
            - name: fernapi/fern-typescript-node-sdk
              version: 1.0.0
              output:
                location: npm
                package-name: imdb
                token: ${NPM_TOKEN} # reads from environment
      ```

      ```yaml title="Python" {6-8}
      groups: 
        python-sdk:
          generators:
            - name: fernapi/fern-python-sdk
              version: 4.20.3
              output:
                location: pypi
                package-name: imdb
                token: ${PYPI_TOKEN} # reads from environment
      ```

      ```yaml title="Java" {6-8}
      groups: 
        java-sdk:
          generators:
            - name: fernapi/fern-java-sdk
              version: 2.36.4
              output:
                location: maven
                artifact: com.imdb:imdb-java
                username: ${MAVEN_USERNAME}
                password: ${MAVEN_PASSWORD}
                signature:
                  keyId: ${MAVEN_CENTRAL_SECRET_KEY_KEY_ID}
                  password: ${MAVEN_CENTRAL_SECRET_KEY_PASSWORD}
                  secretKey: ${MAVEN_CENTRAL_SECRET_KEY}
      ```

      ```yaml title="Go" {6-7}
      groups: 
        go-sdk:
          generators:
            - name: fernapi/fern-go-sdk
              version: 0.36.4
              github: #Go publishes via Git repositories
                repository: imdb/imdb-go
      ```

      ```yaml title=".NET" {6-8}
      groups: 
        csharp-sdk:
          generators:
            - name: fernapi/fern-csharp-sdk
              version: 1.17.4
              output:
                location: nuget
                package-name: Imdb.Net
                api-key: ${NUGET_API_KEY}
      ```

      ```yaml title="Ruby" {6-8}
      groups: 
        ruby-sdk:
          generators:
            - name: fernapi/fern-ruby-sdk
              version: 0.9.0-rc2
              output:
                location: rubygems
                package-name: imdb
                api-key: ${RUBYGEMS_API_KEY}
      ```

      ```yaml title="PHP" {6-7}
      groups: 
        php-sdk:
          generators:
            - name: fernapi/fern-php-sdk
              version: 0.15.0
              github: #PHP publishes via Git repositories
                repository: imdb/imdb-php
      ```

      ```yaml title="OpenAPI" {7-8}
      # Only relevant if using Fern Definition and want OpenAPI spec to use with third-party tools
      groups:
        openapi:
          generators:
            - name: fernapi/fern-openapi
              version: 0.1.6
              github:
                repository: imdb/imdb-openapi
      ```
    
  

  
    To configure the GitHub integration, you must (1) **create a GitHub repository** and (2) **install the [Fern GitHub App](https://github.com/apps/fern-api)**.
  

  
    Once you've created the GitHub repository, you must add it to your `generators.yml`:

    ```yaml title="TypeScript" {10-11}
    groups: 
      ts-sdk:
        generators:
          - name: fernapi/fern-typescript-node-sdk
            version: 0.9.5
            output:
              location: npm
              package-name: imdb
              token: ${NPM_TOKEN} 
            github: 
              repository: your-org/your-repository
    ```
  

  
    At this point, you are ready to go and can run `fern generate --version `.

    
       Make sure that any environment variables like 

      `NPM_TOKEN`

       are present! 
    
  

  
    We strongly advise adding a GitHub Action to trigger SDK releases for each language. Below is
    an example of how you might setup a workflow\_dispatch

    
      ```yaml title="Python" maxLines=0
      name: Publish Python SDK

      on:
        workflow_dispatch:
          inputs:
            version:
              description: "The version of the Python SDK that you would like to release"
              required: true
              type: string

      jobs:
        release:
          runs-on: ubuntu-latest
          steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Fern CLI
              run: npm install -g fern-api

            - name: Release Python SDK
              env:
                FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
                PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
              run: |
                fern generate --group python-sdk --version ${{ inputs.version }} --log-level debug
      ```

      ```yaml title="TypeScript" maxLines=0
      name: Publish TypeScript SDK

      on:
        workflow_dispatch:
          inputs:
            version:
              description: "The version of the TypeScript SDK that you would like to release"
              required: true
              type: string

      jobs:
        release:
          runs-on: ubuntu-latest
          steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Install Fern CLI
              run: npm install -g fern-api

            - name: Release TypeScript SDK
              env:
                FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
                NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                fern generate --group ts-sdk --version ${{ inputs.version }} --log-level debug
      ```
    

    Once these actions are merged in, you can simply release your SDK by navigating to the actions tab:

    GitHub Page
  



# Publish your TypeScript SDK with npm

To make your TypeScript SDK publicly accessible, publish to [npm](https://www.npmjs.com/). Once you've followed the steps below to connect your npm account to your SDK, Fern will automatically publish the latest version of your SDK.

## Creating an npm token


  ### Log In

  Log into [npm](https://www.npmjs.com/).

  ### Navigate to Access Tokens

  Click on your profile picture and select **Access Tokens**.

  ### Generate Token

  Click on **Generate New Token** and select **Classic Token**. Name your token and select **Automation** as the token type. Once finished, click **Generate Token**.

  
    Creating NPM Automation Token
  

  
    Be sure to save the generated token - it won't be displayed after you leave the page.
  


## Adding tokens to your GitHub repository


  Using GitLab? Follow [these steps](/learn/docs/developer-tools/gitlab#add-a-token-to-gitlab).



  ### Open Repository

  Open your Fern repository in GitHub.

  ### Navigate to Actions in Settings

  Click on the **Settings** tab in your repository. Then, under the **Security** section, open **Secrets and variables** > **Actions**.

  
    Adding GitHub Repository Secret
  

  You can also use the url `https://github.com//settings/secrets/actions`.

  ### Add Secret

  Select **New repository secret**. Name your secret (we recommend `NPM_TOKEN`), add the corresponding token, and click **Add secret**.


Once you regenerate your SDK, a GitHub action will run to publish directly to npm!


# Publish your Python SDK with PyPI

To make your Python SDK publicly accessible, publish to [PyPI](https://pypi.org/). Once you've followed the steps below to connect your PyPI account to your SDK, Fern will automatically publish the latest version of your SDK.

## Creating a PyPI token


  ### Log In

  Log into [PyPI](https://pypi.org/).

  ### Navigate to Account Settings

  Click on your profile picture and select **Account settings**.

  ### Create API Token

  Scroll down to **API tokens** and click **Create API token**. Name your token and set the scope to the relevant projects. Once finished, click **Create token**.

  
    Be sure to save the generated token - it won't be displayed after you leave the page.
  


## Adding tokens to your GitHub repository


  Using GitLab? Follow [these steps](/learn/docs/developer-tools/gitlab#add-a-token-to-gitlab).



  ### Open Repository

  Open your Fern repository in GitHub.

  ### Navigate to Actions in Settings

  Click on the **Settings** tab in your repository. Then, under the **Security** section, open **Secrets and variables** > **Actions**.

  
    Adding GitHub Repository Secret
  

  You can also use the url `https://github.com//settings/secrets/actions`.

  ### Add Secret

  Select **New repository secret**. Name your secret (we recommend `PYPI_TOKEN`), add the corresponding token, and click **Add secret**.


Once you regenerate your SDK, a GitHub action will run to publish directly to PyPI!


# Publish your C# SDK with NuGet

To make your C#/.NET SDK publicly accessible, publish to [NuGet](https://www.nuget.org/). Once you've followed the steps below to connect your NuGet account to your SDK, Fern will automatically publish the latest version of your SDK.

## Creating a NuGet API key


  ### Log In

  Log into [NuGet](https://www.nuget.org/users/account/LogOn?returnUrl=%2F).

  ### Navigate to API Keys

  Click on your username in the top-right corner and select **API Keys**.

  ### Generate API Key

  * Click on **Create**.
  * Name your key.
  * Select **Push > Push new packages and package versions** as the **Select Scopes** type.
  * Enter `*` under **Select Packages > Glob Patten**.
    
      If you are overriding an existing package, you can select the relevant package instead of entering `*`.
    
  * Click **Create**.

  
    Be sure to save the generated key - it won't be displayed after you leave the page.
  


## Adding API keys to your GitHub repository


  Using GitLab? Follow [these steps](/learn/docs/developer-tools/gitlab#add-a-token-to-gitlab).



  ### Open Repository

  Open your Fern repository in GitHub.

  ### Navigate to Actions in Settings

  Click on the **Settings** tab in your repository. Then, under the **Security** section, open **Secrets and variables** > **Actions**.

  
    Adding GitHub Repository Secret
  

  You can also use the url `https://github.com//settings/secrets/actions`.

  ### Add Secret

  Select **New repository secret**. Name your secret (we recommend `NUGET_API_KEY`), add the corresponding API key, and click **Add secret**.


Once you regenerate your SDK, a GitHub action will run to publish directly to NuGet!


# Publish your Go SDK with Pkgsite

To publish your Go SDK using [Pkgsite](https://pkg.go.dev/about#adding-a-package):

1. Make sure the repository is set to **public** visibility
2. Make sure you have added a required license (e.g. [MIT](https://opensource.org/license/mit), [Apache](https://www.apache.org/licenses/LICENSE-2.0)) to the repository
3. Send a request to `https://pkg.go.dev/github.com///`

In a few minutes, your SDK should be published to [https://pkg.go.dev/](https://pkg.go.dev/)!


# Publish your Java SDK with Maven

To make your Java SDK publicly accessible, publish to [Maven Central](https://central.sonatype.com/). Once you've followed the steps below to connect your Maven account to your SDK, Fern will automatically publish the latest version of your SDK.


  For more information on the differences between the Central Portal and OSSRH, see the [Maven Central documentation](https://central.sonatype.org/faq/what-is-different-between-central-portal-and-legacy-ossrh/).


## Publish via the Central Portal (recommended)


  ### Log In (or create account) and navigate to your profile

  Log into [https://central.sonatype.com/account](https://central.sonatype.com/account).

  ### Click on `Generate User Token`

  Click on `Generate User Token`.

  
    Select user token
  

  ### Confirm generation

  You will be asked to confirm the generation of the token. This will invalidate any existing token. Click on `Ok`.

  ### Add Maven Central credentials to GitHub Secrets

  You'll need to store two repository secrets in your **fern configuration repository** (**i.e. not the Java SDK repository**),
  one for the username and one for the password.

  
    Adding GitHub Repository Secret
  

  
    For each, select **New repository secret**. Name your secret (we recommend `MAVEN_USERNAME` and `MAVEN_PASSWORD`,
    respectively), add the corresponding value, and click **Add secret**.
  

  ### Sign with GPG

  If you don't have gpg installed, you can download the binary from [https://gnupg.org/download/index.html](https://gnupg.org/download/index.html), or install it via package manager.

  If you already have a GPG key, you can list your keys:

  ```sh
  gpg --list-secret-keys --keyid-format LONG
  ```

  If you don't have a GPG key, you can generate a new one:

  ```sh
  gpg --gen-key
  ```

  To export your secret key, run:

  ```sh
  gpg --export-secret-keys --armor KEY_ID
  ```

  Be sure to replace `KEY_ID` with the key ID of the key you want to export.

  More information is available on [Maven Central's GPG validation page](https://central.sonatype.org/publish/requirements/gpg/).

  ### Add GPG Signature to GitHub Secrets

  You'll need to store repository secrets in your **fern configuration repository**,
  for the GPG key id, secret key, and password.

  
    Adding GitHub Repository Secret
  

  
    For each, select **New repository secret**. Name your secret (we recommend `MAVEN_CENTRAL_SECRET_KEY_KEY_ID`, `MAVEN_CENTRAL_SECRET_KEY`, and `MAVEN_CENTRAL_SECRET_KEY_PASSWORD`, respectively), add the corresponding value, and click **Add secret**.
  


Once you regenerate your SDK, a GitHub action will run to publish directly to Maven!

## Publish via OSSRH (legacy)


  ### Log In (or create account)

  Log into [s01.oss.sonatype.org](https://s01.oss.sonatype.org).

  ### Navigate to your profile

  Click on your username in the top-right corner and select **Profile**.

  
    Profile selection
  

  ### Click on `User Token`

  Expand the dropdown and click on `User Token`.

  
    Select user token
  

  ### Click on `Access User Token`

  There will be a lock icon followed by the text `Access User Token`. Click on `Access User Token`. You may
  need to re-authenticate to see the user token.

  
    View your username and password
  

  ### Add GitHub Secrets

  You'll need to store two repository secrets in your **fern configuration repository** (**i.e. not the Java SDK repository**),
  one for the username and one for the password.

  
    Adding GitHub Repository Secret
  

  
    For each, select **New repository secret**. Name your secret (we recommend `MAVEN_USERNAME` and `MAVEN_PASSWORD`,
    respectively), add the corresponding value, and click **Add secret**.
  


Once you regenerate your SDK, a GitHub action will run to publish directly to Maven!


# Publish your Ruby SDK with RubyGems

To make your Ruby SDK publicly accessible, publish to [RubyGems](https://rubygems.org/). Once you've followed the steps below to connect your Ruby account to your SDK, Fern will automatically publish the latest version of your SDK.

## Creating a RubyGems API key


  ### Log In

  You'll first need to [create an account with RubyGems](https://rubygems.org/sign_up) to register your SDK.

  If you have an account already, [sign in](https://rubygems.org/sign_in).

  ### Navigate to API Keys

  Click on your username in the top-right corner and select **Settings**. Then scroll down and click on [**API Keys**](https://rubygems.org/profile/api_keys).

  ### Create an API key

  When prompted to [create a new API key](https://rubygems.org/profile/api_keys/new):

  * Name your key.
  * Under **Scopes**, select **Push rubygem**
  * Select `All Gems` under **Gem Scope**.
    
      If you are overriding an existing gem, you can select the relevant package instead of entering `All Gems`.
    
  * Set an expiration date.
  * Click **Create API Key**.

  
    Be sure to save the generated key - it won't be displayed after you leave the page.
  


## Adding API keys to your GitHub repository


  Using GitLab? Follow [these steps](/learn/docs/developer-tools/gitlab#add-a-token-to-gitlab).



  ### Open Repository

  Open your Fern repository in GitHub.

  ### Navigate to Actions in Settings

  Click on the **Settings** tab in your repository. Then, under the **Security** section, open **Secrets and variables** > **Actions**.

  
    Adding GitHub Repository Secret
  

  You can also use the url `https://github.com//settings/secrets/actions`.

  ### Add Secret

  Select **New repository secret**. Name your secret (we recommend `RUBYGEMS_API_KEY`), add the corresponding API key, and click **Add secret**.


Once you regenerate your SDK, a GitHub action will run to publish directly to RubyGems!


# Publish your PHP SDK with Packagist

To make your PHP SDK publicly accessible, publish to [Packagist](https://packagist.org/). Follow the steps below to connect your GitHub repository to Packagist.


  ### Create a Packagist account

  You'll first need to [create an account with Packagist](https://packagist.org/register/) to register your SDK.

  If you have an account already, [sign in](https://packagist.org/login/).

  ### Submit the repository URL

  When prompted, input the full URL of the repository where the PHP SDK was generated.

  
    Be sure your repository has **public** visibility. You can configure this in the repository settings.
  

  ### Configure the GitHub Hook

  Once you've submitted your URL, you'll be prompted to set up the GitHub Hook.

  
    
  

  Follow the instructions to [set up your GitHub Hook](https://packagist.org/about#how-to-update-packages):

  1. In to your repository, go to **Settings > Webhooks**.
  2. Select **"Add webhook"**
  3. Set the Payload URL as `https://packagist.org/api/github?username=`
  4. Set the content type as `application/json`
  5. Add your [Packagist API key](https://packagist.org/profile/).
  6. Set the trigger events as **Just the `push` event**
  7. Click **"Add Webhook"**

  
    
  


Once you regenerate your SDK, you will see the publish occur!


# Fern Docs Overview

> Learn about key features of Fern's Docs

Fern Docs provides versatile documentation to support all your content needs, including popular formats like:

* **Landing Pages** - High-level introductions with navigation for different audiences
* **Guides** - Step-by-step tutorials, user guides, and recipes/cookbooks
* **API References** - Auto-generated docs with request/response examples and auto-updating SDK snippets
* **Changelogs** - Release notes for new features and fixes

## Key Features


  
    Match your docs to your brand with customizable colors, fonts, and styles.
  

  
    Auto-generate API docs from OpenAPI and AsyncAPI specs.
  

  
    Version and manage docs with your Git provider using Markdown or MDX.
  

  
    Test APIs directly in the docs with auto-populated credentials.
  

  
    Example code auto-updates as your SDKs evolve.
  

  
    Use pre-built or custom React components for a polished look.
  



# Docs Customer Showcase

Fern Docs is a tool for creating beautiful, customizable developer documentation. Achieve best-in-class docs with a modern and branded look and feel, powered by MDX and your API specification, and integrated seamlessly with CI/CD. Below are some companies building with Fern to elevate their developer experience.


  ***

  ## 
Webflow Webflow


  
    Auto-populated API key
  

  Webflow uses Fern's API Explorer to auto-populate API keys using their custom authentication flow, making it easy for developers to authenticate once and then focus on developing.

  Check out Webflow's API Explorer here:

  
    
      View the Webflow API Explorer
    
  

  ***

  ## 
Cohere Cohere


  

    
      SSE
    

    
      Landing page
    
  


  Cohere uses Fern's out-of-the-box components to create a landing page that orients users and aids in developer experience. Their API Explorer further aids in that developer experience, allowing users to test out endpoints in their API, including server-sent events.

  Check out Cohere's documentation here:

  
    
      View Cohere's landing page
    

    
      View the Cohere API Reference
    
  

  ***

  ## 
Cartesia Cartesia


  

    
      WebSockets
    

    
      Custom styling
    
  


  Cartesia leverages Fern's custom styling capabilities to create modern and branded documentation. They pair these aesthetics with an API Explorer that supports WebSockets, allowing developers to test their Text-To-Speech streaming in real-time.

  Check out Cartesia's documentation here:

  
    
      View Cartesia's documentation overview
    

    
      View the Cartesia API Reference
    
  

  ***

  ## 
Vellum Vellum


  
    SDK documentation
  

  Vellum takes advantage of Fern's adaptable layout and styling capabilities to create custom documentation for their UI SDK, in addition to using Fern's auto-generated API reference for their client libraries (which are generated by Fern, as well).

  Check out their references here:

  
    
      View Vellum's SDK documentation
    

    
      View Vellum's API reference
    
  

  ***

  ## 
Internationalization Internationalization


  

    
      Multi-language
    

    
      Translation
    
  


  CodeCombat uses Fern's internationalization features to serve their global developer community. They offer documentation in Mandarin Chinese, demonstrating how Fern's built-in language switching and translation features help companies reach developers worldwide while maintaining a consistent experience.

  Check out their multi-language documentation:

  
    
      View CodeCombat's documentation
    
  

  ***


Ready to build best-in-class documentation? [Get started with Fern today](https://buildwithfern.com/learn/docs/getting-started/quickstart).


# Quickstart

> Start building beautiful documentation in under 5 minutes

Docs cascade

With Fern, you can build beautiful developer documentation that matches your brand. Fern supports writing pages (written in Markdown) and generating API Reference documentation (from an OpenAPI Specification).

In this guide, we'll show you how to get started with Fern in under 5 minutes.


  ### Initialize your `fern` folder

  All the configurations for your docs live in the `fern` folder. Inside, you'll
  find a `docs.yml` file that contains all the settings for your documentation.

  
    
      Get started by cloning the [starter template](https://github.com/fern-api/docs-starter).

      
        ```bash title="SSH"
        git clone git@github.com:fern-api/docs-starter.git
        ```

        ```bash title="HTTPS"
        git clone https://github.com/fern-api/docs-starter.git
        ```
      

      Next, please update the template settings to use your organization.

      
        Please edit the details `fern.config.json` and `docs.yml` with your organization
        name.

        
          
            ```json {2}
            {
              "organization": "{{YOUR_ORGANIZATION}}",
              "version": "0.x.x"
            }
            ```
          

          
            ```yml {2}
            instances:
              - url: {{YOUR_ORGANIZATION}}.docs.buildwithfern.com
            ```
          
        
      

      Finally, navigate to the docs directory (where the `fern` folder is located) and execute the following command to generate your documentation:

      ```bash
      fern generate --docs
      ```
    

    
      If you prefer, you can use our CLI to create a new project. Install the CLI
      by running

      ```bash
      npm install -g fern-api
      ```

      Then run

      ```bash
      fern init --docs
      ```

      You will see a new `fern` folder in your project with the following structure:

      ```bash
        fern
        ├─ docs.yml
        └─ fern.config.json
      ```

      Finally, navigate to the docs directory (where the `fern` folder is located) and execute the following command to generate your documentation:

      ```bash
      fern generate --docs
      ```
    
  

  ### Update your docs

  
    We provide a white-glove migration service as part of our Enterprise plan. Interested? Request it
    [here](https://buildwithfern.com/contact).
  

  
    
      Add content with MDX files.

      ```markdown
      ---
      title: "Page Title"
      description: "Subtitle (optional)" 
      ---

      Hello world!
      ```

      
        Fern supports [GitHub flavored Markdown (GFM)](https://github.github.com/gfm/) within MDX files, no plugin required.
      

      In order for the Markdown page to show up, you'll need to reference them from your `docs.yml` file. You
      can reference the Markdown page within a section or as a standalone page.

      ```yml
      navigation:
        - page: Hello World
          path: docs/pages/hello-world.mdx
        - section: Overview
          contents:
            - page: QuickStart
              path: docs/pages/hello-world.mdx
      ```
    

    
      Add an API Reference by adding an OpenAPI Specification to your project.

      ```bash
      fern init --openapi /path/to/openapi.yml
      ```

      This will create an `openapi.yml` file in your project. You can reference this file in your
      `docs.yml` file by adding an api block.

      ```yml
      navigation:
        - api: "API Reference"
      ```
    

    
      All of the branding for your docs can be configured in the `docs.yml` file.

      For example, to set the logos, colors, and fonts for your docs, you can
      add the following to your `docs.yml` file:

      
        ```yml
        colors:
          accent-primary:
            dark: "#f0c193"
            light: "#af5f1b"

        logo:
          dark: docs/assets/logo-dark.svg
          light: docs/assets/logo-light.svg
          height: 40
          href: https://buildwithfern.com/

        favicon: docs/assets/favicon.svg
        ```
      
    
  

  ### Publish to production

  
    
      Fern supports hosting your docs website on a custom domain or on a
      custom subpath (e.g. [https://domain.com/docs](https://domain.com/docs)).

      Please reach out to the Fern team at [support@buildwithfern.com](mailto:support@buildwithfern.com) to configure this.
    

    
      Fern supports integrations with a variety of providers such as PostHog, Segment, Intercom,
      Google Tag Manager, etc.
      Find out more on this [page](/learn/docs/integrations/overview).
    
  


Below are some examples of documentation websites that have been published using Fern:


  } />

  
    }
  />

  } />

  } />

  } />

  
    }
  />

  
    }
  />

  
    }
  />



# Global Configuration

> Learn how to configure your Fern documentation site with the docs.yml file. Customize colors, typography, layout, analytics and more.

### YAML Schema Validation

To enable intelligent YAML validation and autocompletion in your editor, add this line at the top of your `docs.yml` file:

```yaml docs.yml
# yaml-language-server: $schema=https://schema.buildwithfern.dev/docs-yml.json
```

This enables real-time schema validation and autocompletion based on our [complete schema](https://github.com/fern-api/fern/blob/09555d587294fd3dc77ceb35f21e8976a5a2b7a2/fern/apis/docs-yml/definition/docs.yml#L110).

## Core configuration

Every Fern documentation website requires a `docs.yml` file that contains the core configuration settings. Here are the essential top-level properties you can configure:

```yaml docs.yml
# yaml-language-server: $schema=https://schema.buildwithfern.dev/docs-yml.json

title: Stripe API Documentation        
favicon: assets/stripe-favicon.ico     
default-language: typescript          # Default code sample language

logo:                                
  href: https://stripe.com
  dark: assets/stripe-logo-dark.svg
  light: assets/stripe-logo-light.svg

colors:                              
  accent-primary:
    light: "#635BFF"                 # Stripe's primary purple
    dark: "#9B90FF"                  # Lighter purple for dark mode
  background:
    light: "#FFFFFF" 
    dark: "#0A2540"                  

navbar-links:                       
  - type: filled
    text: "Dashboard"
    href: "https://dashboard.stripe.com"
  - type: minimal 
    text: "Support"
    href: "https://support.stripe.com"
```


  A string that is used as the tab bar title.



  Learn more about the [`logo` configuration](/learn/docs/getting-started/global-configuration#logo-configuration).



  Relative filepath to the favicon.



  Configure the `primaryAccent` and `background` colors. Learn more about the [`colors` configuration](/learn/docs/getting-started/global-configuration#colors-configuration).



  An array of paths you want to configure to permanently redirect to another path. Learn more about the
  [`redirects` configuration](/learn/docs/getting-started/global-configuration#redirects-configuration).



  Array of names and urls of links you want to include as a call to action. Learn more about the
  [`navbar-links` configuration](/learn/docs/getting-started/global-configuration#navbar-links-configuration).



  Set a custom background image to be displayed behind every page. Learn more about the
  [`background-image` configuration](/learn/docs/getting-started/global-configuration#background-image-configuration).



  Customize the fonts used in your documentation website. Learn more about the [`typography` configuration](/learn/docs/getting-started/global-configuration#typography-configuration).



  Customize the layout of your documentation website. Learn more about the
  [`layout` configuration](/learn/docs/getting-started/global-configuration#layout-configuration).



  Creates a landing page for your documentation website. Learn more about the
  [`landing-page` configuration](/learn/docs/getting-started/global-configuration#landing-page-configuration).



  Sets the default language displayed by code snippets in the API Reference.

  Options include: `typescript`, `python`, `java`, `go`, `ruby`, `csharp`, `curl`



  Configure SEO metadata for your documentation website. Learn more about the
  [`metadata` configuration](/learn/docs/getting-started/global-configuration#metadata-configuration).


## Instances configuration

An `instance` is the backend of a distinct docs website. Each instance is published to a unique domain using the `--instance` flag. It is most common to use instances to configure staging and production docs which publish to separate URLs.

```yaml docs.yml
instances: 
  - url: plantstore.docs.buildwithfern.com
    custom-domain: docs.plantstore.com
```


  Configure one or more documentation websites.



  The URL where your Fern documentation is deployed. Must contain the suffix `docs.buildwithfern.com`.



  The custom domain where your documentation is hosted. Learn more about [setting up a custom domain](/learn/docs/building-your-docs/custom-domain).



  If specified, adds an "Edit this page" link to the bottom of each page that links to the given public GitHub repository. Learn more about the [`edit-this-page` configuration](#github-configuration).


## Colors configuration

```yaml docs.yml
colors:
  accent-primary:
    light: "#418326"  # Primary brand color for light mode
    dark: "#ADFF8C"   # Primary brand color for dark mode
  
  background:
    light: "#ffffff"
    dark: "#0d0e11"
  
  border:
    light: "#e5e7eb"
    dark: "#1f2937"
  
  sidebar-background:
    light: "#f9fafb"
    dark: "#111827"
  
  header-background:
    light: "#ffffff"
    dark: "#0d0e11"
  
  card-background:
    light: "#f3f4f6"
    dark: "#1f2937"
```


  The primary brand color used for interactive elements like links, buttons, and highlighted text.
  Configure separate colors for light and dark modes to ensure proper contrast and visibility.



  The main background color for all documentation pages. Choose colors that provide good contrast with text
  and complement your brand colors. Dark mode colors should reduce eye strain.



  Used for dividing lines, borders around elements, and visual separators. Choose subtle colors that create
  clear boundaries without being too prominent.



  Background color for the navigation sidebar. When specified, includes a 1px border on the right side.
  If omitted, the sidebar uses a transparent background without a border.



  Background color for the top navigation header. When specified, includes a 1px solid border on the bottom.
  If omitted, the header uses a transparent background with a subtle gradient border.



  Background color for cards, code blocks, and other contained elements. Should be slightly different from the
  main background to create visual hierarchy while maintaining readability.


## Logo configuration

```yaml docs.yml
logo: 
  href: https://example.com
  dark: assets/images/logo-dark.svg
  light: assets/images/logo-light.svg
```


  The URL that users will be directed to when clicking the logo. Typically your company's homepage or app.



  Path to your dark mode logo file, relative to the docs root. SVG format is recommended for optimal quality. Example: `assets/images/logo-dark.svg`



  Path to your light mode logo file, relative to the docs root. SVG format is recommended for optimal quality. Example: `assets/images/logo-light.svg`


## Redirects configuration

```yaml docs.yml
redirects:
  - source: "/old-path"
    destination: "/new-path"
  - source: "/old-folder/*"
    destination: "/new-folder/*"
```


  The path that you want to redirect from.



  The path that you want to redirect to.



  Toggle between **permanent** and **temporary** redirect (default `false`). When true, the status code is 308. When false the status code is 307.


## NavBar links configuration

```yaml docs.yml
navbar-links:
  - type: minimal
    text: Contact support
    href: https://example.com/support
  - type: filled
    text: Login
    href: https://example.com/login
    rounded: false
```


  One of `outlined`, `minimal`, or `filled`. This value controls the styling of the button.



  The url once you click on the button. Example: [https://buildwithfern.com/contact](https://buildwithfern.com/contact)



  Text inside the button.



  When `true`, the border radius of the button will be fully rounded.



  The [Font Awesome icon](https://fontawesome.com/icons) to be used in the button. This icon will appear to the **left** of the text content. Pro and Brand Icons from Font Awesome are supported.



  The [Font Awesome icon](https://fontawesome.com/icons) to be used in the button. This icon will appear to the **right** of the text content. Pro and Brand Icons from Font Awesome are supported.

  By default, the `rightIcon` for a `filled` button is set to `arrow-right`.


## Background image configuration

```yaml docs.yml
background-image: 
  light: ./path/to/bg-light.svg
  dark: ./path/to/bg-dark.svg
```


  Relative filepath to the light-mode background image.



  Relative filepath to the dark-mode background image.


## Typography configuration

```yaml docs.yml
typography:
  # Font for headings and titles
  headingsFont:
    name: Inter-Bold
    paths: 
      - path: ./fonts/Inter-Bold.woff2
        weight: 700
        style: normal
  
  # Font for body text
  bodyFont:
    name: Inter-Regular
    path: fonts/Inter-Regular.woff2
    style: normal
  
  # Font for code snippets
  codeFont: 
    name: JetBrains-Mono
    path: ./fonts/JetBrains-Mono-Regular.woff2
```


  The font used for all body text including paragraphs, lists, and general content.
  For optimal performance, use WOFF2 format.



  The font used for headings, titles, and other prominent text elements. Can be the same as your body font
  if you prefer a unified look. Supports multiple weights for different heading levels.



  The font used for code blocks and inline code. Monospace fonts are recommended for better code readability.
  Popular choices include JetBrains Mono, Fira Code, and Source Code Pro.


### Font configuration


  
    ```yaml
    typography:
      bodyFont:
        name: Inter-Regular
        path: fonts/Inter-Regular.woff2
        style: normal
    ```
  

  
    ```yaml
    typography:
      headingsFont:
        name: Inter-Variable
        paths: 
          - path: ./fonts/Inter-Variable.woff2
          weight: 400 700  # Supports range of weights
          style: normal
    ```
  

  
    ```yaml
    typography:
      headingsFont:
        name: Inter
        paths: 
          - path: ./fonts/Inter-Regular.woff2
          weight: 400
          style: normal
        - path: ./fonts/Inter-Bold.woff2
          weight: 700
          style: normal
        - path: ./fonts/Inter-Italic.woff2
          weight: 400
          style: italic
    ```
  



  The name of the font. Defaults to a generated name that will be used to reference your custom font in the eventually injected CSS.



  The path to your font file, relative to your docs folder. Use this when you have a single font file. For multiple font files (like separate files for bold, italic etc), use `paths` instead.



  The weight of the font. Can be a number (400, 700) or a range for variable fonts (400 700).
  Common values: 400 (normal), 700 (bold).



  The font style, either "normal" or "italic". Defaults to "normal" if not specified.



  A list of font files for particular weights. Each element in the list includes a `path`, `weight`, and `style` property.


## Layout configuration

```yaml docs.yml
layout:
  header-height: 70px
  page-width: 1344px
  content-width: 672px
  sidebar-width: 336px
  searchbar-placement: header
  tabs-placement: header
  content-alignment: left
```


  Sets the height of the header. Defaults to `4rem` (`64px`). Valid options are `{number}rem` or `{number}px`.



  Sets the maximum width of the docs layout, including the sidebar and content. Defaults to `88rem` (`1408px`).
  Valid options are `{number}rem`, `{number}px`, or `full`.



  Sets the maximum width of the Markdown article content. Defaults to `44rem` (`704px`).
  Valid options are `{number}rem` or `{number}px`.



  Sets the width of the sidebar in desktop mode. Defaults to `18rem` (`288px`). Valid options are `{number}rem` or `{number}px`.



  Sets the placement of the searchbar. Can be one of `header`, `sidebar` or `header-tabs` (places the searchbar in the header but on the tabs row).
  Defaults to `sidebar`.

  
    This setting is ignored when 

    `disable-header`

     is set to true.
  



  Set the placement of the tabs. Can be one of `header` or `sidebar`.
  Defaults to `sidebar`.

  
    This setting is ignored when 

    `disable-header`

     is set to true.
  



  Set the alignment of the Markdown content. Can be one of `center` or `left`.
  Defaults to `center`.



  If set to true, the header will not be rendered. Instead, the logo will be rendered as part of the sidebar,
  and a 1px border will separate the sidebar from the content.


## GitHub configuration


  
    ```yaml
    instances:
      - url: plantstore.docs.buildwithfern.com
        edit-this-page:
          github: 
            owner: fern
            repo: plant-store-docs
            branch: main
    ```
  

  
    ```yaml
    # Configure edit-this-page per instance
    instances:
      - url: plantstore.docs.buildwithfern.com
        custom-domain: docs.plantstore.com
        edit-this-page:
          github:
            owner: fern
            repo: plant-store-docs
            branch: production
      - url: plantstore-staging.docs.buildwithfern.com
        edit-this-page:
          github:
            owner: fern
            repo: plant-store-docs
            branch: staging
    ```
  



  The GitHub repository must be **public** for the "Edit this page" feature to work correctly.



  The GitHub organization that owns the documentation repository.



  The name of the GitHub repository containing your fern folder.



  The branch of the repository you would like the GitHub editor to open a PR to. Default is `main`.


## Landing page configuration

```yaml docs.yml
landing-page: 
  page: Page Title
  path: path/to/landing-page.mdx
```


  The name of the landing page.



  Relative filepath to the desired landing page Markdown file.


See [Vapi's landing page live](https://docs.vapi.ai/) and the associated [Markdown file](https://github.com/VapiAI/docs/blob/main/fern/quickstart/introduction.mdx?plain=1).

## Metadata configuration

```yaml docs.yml
metadata:
  # Core platform identity
  og:site_name: "Square Developer Documentation"
  og:title: "Square Developer Platform | Payments, Commerce & Banking APIs"
  og:description: "Build with Square's suite of APIs and SDKs. Accept payments, manage inventory, create loyalty programs, and access financial services. Complete documentation for developers building the future of commerce."
  og:url: "https://developer.squareup.com/docs"

  # Social sharing assets
  og:image: "https://developer.squareup.com/images/docs-social-card.png"
  og:image:width: 1200
  og:image:height: 630
  og:locale: "en_US"
  og:logo: "https://developer.squareup.com/images/square-logo.png"

  # Twitter (I mean X) optimization
  twitter:title: "Square Developer Platform Documentation"
  twitter:description: "Integrate payments, point-of-sale, inventory, and financial services into your applications with Square's developer platform. Get started with our APIs, SDKs, and comprehensive guides."
  twitter:handle: "@SquareDev"
  twitter:image: "https://developer.squareup.com/images/twitter-card.png"
  twitter:site: "@Square"
  twitter:card: "summary_large_image"
```


  The name of your website for Open Graph tags.



  The title shown in social media previews.



  The description shown in social media previews.



  The canonical URL of your documentation.



  The image shown in social media previews. Recommended size is 1200x630 pixels.



  The width of your Open Graph image in pixels.



  The height of your Open Graph image in pixels.



  The locale of your content (e.g., "en\_US").



  URL to your company logo.



  The title shown in Twitter Card previews.



  The description shown in Twitter Card previews.



  Your company's Twitter handle.



  The image shown in Twitter Card previews.



  The Twitter handle for your website.



  The Twitter Card type. Options are `summary`, `summary_large_image`, `app`, or `player`.


## Analytics configuration

```yaml docs.yml
analytics:
  ga4:
    measurement-id: "G-XXXXXXXXXX"
  gtm:
    container-id: "GTM-XXXXXX"
  posthog:
    api-key: "phc_xxxxxxxxxxxx"
```


  Your Google Analytics 4 measurement ID. Must start with "G-".



  Your Google Tag Manager container ID. Must start with "GTM-".



  Configuration for PostHog Analytics integration.



  Your PostHog project API key. Defaults to the api-host of "[https://us.i.posthog.com](https://us.i.posthog.com)".



# Project Structure

> An overview of the file and folder structure of a Fern Docs project

This page provides an overview of the file and folder structure of a Fern Docs project. The following structure is recommended for organizing your documentation content, but is customizable to fit your needs.

## Top-level folders


  ```bash
    fern
    ├─ pages
    ├─ assets
    ├─ docs.yml
    ├─ openapi
    └─ fern.config.json
  ```


A Fern Docs project has the following top-level folders:

* `pages`: Contains the Markdown (MDX) files that make up your documentation.
* `assets`: Contains any images or videos used in your documentation.
* `docs.yml`: The configuration file that defines the navigation, theme, and hosting details of your documentation.
* `openapi`: Contains the OpenAPI Specification file (if you have an API Reference section in your documentation).
* `fern.config.json`: The configuration file specifying your organization name and CLI version.

## Pages folder

The `pages` folder contains the Markdown (MDX) files that make up your documentation. Each MDX file represents a page in your documentation.


  ```bash
    pages
    ├─ introduction
    │  ├─ quickstart.mdx
    │  ├─ project-structure.mdx
    │  └─ showcase.mdx
    ├─ building-your-docs
    │  ├─ navigation
    │     ├─ sections.mdx
    │     ├─ tabs.mdx
    │     └─ versions.mdx
    └─ └─ configuration.mdx

  ```


The `pages` folder is organized into subfolders based on the sections of your documentation. Each subfolder contains the MDX files for the pages in that section.

## Assets folder

The `assets` folder contains any images or videos used in your documentation. You can reference these assets in your MDX files using relative paths.


  ```bash
    assets
    ├─ favicon.ico
    ├─ product-screenshot.svg
    ├─ demo-video.mp4
    ├─ logo-dark-mode.png
    └─ logo-light-mode.png
  ```


## `docs.yml`

The `docs.yml` file is the configuration file that defines the navigation, theme, and hosting details of your documentation. You can customize the appearance and behavior of your documentation by editing this file.


  ```yml
  instances:
    - url: fern.docs.buildwithfern.com/learn
      custom-domain: buildwithfern.com/learn

  navigation:
    - section: Introduction
      layout:
        - page: QuickStart
          path: pages/introduction/quickstart.mdx
        - page: Project Structure
          path: pages/introduction/project-structure.mdx
        - page: Showcase
          path: pages/introduction/showcase.mdx

  navbar-links:
    - type: filled
      text: Book a demo
      url: https://buildwithfern.com/contact

  logo:
    light: ./images/logo-primary.svg
    dark: ./images/logo-white.svg

  colors:
    accent-primary:
      dark: "#ADFF8C"
      light: "#209d63"

  favicon: ./images/favicon.ico 

  title: Fern's Documentation
  ```


## API Definitions


  
    The `openapi` folder contains the OpenAPI Specification file for your API Reference section. Fern will read either a YAML or JSON file from this folder to generate the API Reference documentation. If you don't have an API Reference section, you can skip this folder.

    
      ```bash
      openapi
      └─ openapi.yaml # OR openapi.json
      ```
    

    To see this in practice, check out [Fluidstack's Fern configuration](https://github.com/fluidstackio/fern-config/tree/main/fern/openapi).
  

  
    The `definition` folder contains the Fern Definition YAML files used to generate the API Reference section. If you don't have an API Reference section, you can skip this folder.

    
      ```bash
      definition
      ├─ pets.yaml
      ├─ owners.yaml
      ├─ stores.yaml
      └─ api.yaml
      ```
    

    To see this in practice, check out [Cartesia's Fern configuration](https://github.com/cartesia-ai/docs/tree/main/fern/apis/version-2025-04-16/definition).
  

  
    If you have multiple APIs, you can organize them into separate folders within the `apis` folder. Each API should have its own API definition. For example:

    
      ```bash
      apis
      ├─ admin
      │  └─ openapi.json 
      ├─ user
      │  └─ openapi.yaml
      ```
    

    To see this in practice, check out [Vapi's Fern configuration](https://github.com/VapiAI/docs/tree/main/fern/apis).
  


## `fern.config.json`

The `fern.config.json` file specifies your organization name and the version of the Fern CLI used to generate the documentation. You can customize this file to reflect your organization's details.


  ```json
  {
    "organization": "my-organization",
    "version": "0.55.1"
  }
  ```



# Preview changes locally

> View and share updates to your documentation

Fern offers two ways to preview changes to your documentation: a [local development environment](#local-development) and [unique preview links](#generate-a-preview-link).

## Local development

Fern allows you to view changes to your documentation in a locally-hosted environment.


  **Prerequisite**

  : Please install Node.js (version 18 or higher) before proceeding.


Follow these steps to install and run the Fern CLI:

**Step 1**: Install the Fern CLI:


  ```bash npm
  npm i -g fern-api
  ```

  ```bash yarn
  yarn global add fern-api
  ```


**Step 2**: Navigate to the docs directory (where the `fern` folder is located) and execute the following command:

```bash
fern docs dev
```

A local preview of your documentation will be available at `http://localhost:3000`. The functionality is available offline if you have run local development mode online at least once.


  Some features (e.g. search) are disabled in the local development environment, including:

  * Search
  * SEO (favicon, auto-generated meta tags, etc.)
  * Authentication


### Custom ports

By default, Fern uses port 3000. You can customize the port Fern runs on by using the `--port` flag. For example, to run Fern on port 3002,
use this command:

```bash
fern docs dev --port 3333
```

If you attempt to run Fern on a port that's already in use, it will use the next available port:

## Generate a preview link

Fern allows you to generate a shareable preview link displaying the current state of your docs. Each preview link is appended with a UUID and is not indexed. Currently, these links do not expire (this behavior is subject to change in the future).

**Usage**:

```bash
fern generate --docs --preview
```

**Example**:

```bash
fern generate --docs --preview

[docs]: Found 0 errors and 1 warnings. Run fern check --warnings to print out the warnings.
[docs]: Published docs to https://fern-preview-a1da0157-93ca-4b1f-b310-8dd34fb891ca.docs.buildwithfern.com
┌─
│ ✓  docs.example.com
└─
```


# Publishing your docs

When you are ready for your docs to be publicly accessible, you can publish them using the Fern CLI.

## Usage

```bash
fern generate --docs
```

### Example

```bash
fern generate --docs
[docs]: Found 0 errors and 1 warnings. Run fern check --warnings to print out the warnings.
[docs]: ✓ All checks passed
[docs]: Published docs to https://plantstore.docs.buildwithfern.com
┌─
│ ✓  https://plantstore.docs.buildwithfern.com
└─
```

### Usage in GitHub Actions

To automate the publishing process, you can use a GitHub Action workflow to publish your docs when a push is made to the `main` branch. [Be sure to add the `FERN_TOKEN` for your organization to the repository](/learn/cli-api/cli-reference/commands#fern-token).

```yaml .github/workflows/publish-docs.yml
name: Publish Docs

on:
  push:
    branches:
      - main

jobs:
  run:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/heads/main') && github.run_number > 1 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Fern
        run: npm install -g fern-api

      - name: Publish Docs
        env:
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        run: fern generate --docs
```

## Hosting

When you publish your docs, Fern takes care of hosting them for you. To publish your docs to a custom domain, check out our docs [here](/learn/docs/building-your-docs/custom-domain).

### Self-hosting your docs


  This feature is available on the Enterprise plan. [Contact us](https://buildwithfern.com/contact) to learn more.


If you need access to your docs offline or would like to host your docs on your own server, Fern offers that option as well. Self-hosted docs have limited access to certain features (including search).


# June 5, 2025

## Introducing The Product Switcher

Organize your docs by product so developers can find what they need quickly. Perfect for companies with multiple APIs, each with their own references, guides, versions, and changelogs.

Features:

* **Optimized for Search**  with SEO-friendly structure.
* **Keyword and AI Search** functionality works both within and across products.
* **Customizable** to your products with versions and unique icons to reflect your brand identity.


  ![A dropdown of the available products](file:3e4cb2c1-cb72-48a7-af7c-e349dd744210)


To add products to your docs, visit the [product switcher docs](/learn/docs/building-and-customizing-your-docs/product-switching) page to get started.


# May 23, 2025

## Table of contents customization

We've added a `max-toc-depth` frontmatter option to control the depth of the table of contents. Use this to limit the heading ranks included in the table of contents.

You can read more about this feature in the [frontmatter documentation](/learn/docs/content/frontmatter#max-depth).


# May 22, 2025

## Improvements to 404 Pages

We now have themed 404 pages for your docs, using your theme colors, fonts, and buttons. We also maintain the best-effort
navigation state on this page using the 404 page URL, so that users can easily navigate back to your docs.


  ![404 Page](file:556ffd90-5869-450f-b140-bf85740ddd3c)



# May 20, 2025

* feat: improvements to local preview mode, including support for custom javascript and bug fixes for reloading performance issues.
* minor bugfixes and improvements to AI search


# May 13, 2025

* feat: allow response and request in playground to be selectable


# May 2, 2025

* feat(cli): using `fern docs dev` on the latest CLI will now better reflect the docs in production
* feat(search): the search UX now uses infinite scroll and allows for searching based on breadcrumb paths
* fix(ai): small bug fixes to the AI chat experience


# April 29, 2025

* fix(seo): `og` and `twitter` defined in the `docs.yml` config are now respected
* fix(auth): authenticated previews have been restored
* fix(docs): frontmatter titles are now preferred over `
` tags within the MDX file
* fix(search): canonical URLs now differentiate between endpoints that share the same method and endpoint name but are defined in APIs of different names


# April 28, 2025

* chore(local): beta local development mode now refreshes on file changes


# April 27, 2025

* fix(openrpc): openrpc playground params are now an array
* chore(local): beta local development bundle size is decreased by 75%, and now allows users with any machine type to run locally. additionally, custom javascript is now excluded to address bug reports.


# February 4, 2025

## Introducing Global Language Sync: Code Language Preferences That Follow You

Starting today, when you select a programming language in any `` or ``, that preference will automatically sync across all documentation pages. This means no more manually switching languages as you navigate through different sections of our docs. Whether you're viewing implementation examples, debugging guides, or API references, your preferred language follows you. Language preference is kept in client-side local storage.

This behavior is automatically enabled for all ``. To add language preferences to a ``, you can add the `language` property. Check out language sync in the example below:


  
    
      
        This is content specific to TypeScript.
      

      
        This is content specific to Python.
      

      
        This is content specific to Java.
      
    

    
      ```typescript
      console.log("Hello, world!");
      ```

      ```python
      print("Hello, world!")
      ```

      ```java
      System.out.println("Hello, world!");
      ```
    

    
      ```typescript
      console.log("This content is synced!");
      ```

      ```python
      print("This content is synced!");
      ```

      ```java
      System.out.println("This content is synced!");
      ```
    
  

  
    ````md
    
    
    This is content specific to TypeScript. 
    
    
    This is content specific to Python. 
    
    
    This is content specific to Java. 
    
    

    
    ```typescript
    console.log("Hello, world!");
    ```
    ```python
    print("Hello, world!")
    ```
    ```java
    System.out.println("Hello, world!");
    ```
    

    
    ```typescript
    console.log("This content is synced!");
    ```
    ```python
    print("This content is synced!");
    ```
    ```java
    System.out.println("This content is synced!");
    ```
    
    ````
  



# January 21, 2025

## Improvements to the Accordion Component

The accordion component has been upgraded so that you can now use your in-browser `cmd+f` search to look for text that is otherwise hidden.

* Improved accessibility for all of our customers who are leveraging the `` component
* Improved SEO indexing of content (more html is now generated on the server-side instead of client-side)

Try searching for **burst** on this page: [https://dev.hume.ai/docs/expression-measurement/faq](https://dev.hume.ai/docs/expression-measurement/faq)



## Support for embedding local assets

We've added support for embedding local assets in your docs. This is useful for displaying PDFs, images, videos, and other assets into your docs.

To embed an asset, you can use the `embed` tag.

```mdx



```

Read more [here](https://buildwithfern.com/learn/docs/content/write-markdown#embedding-local-assets)


# January 14, 2025

## Support for /llms.txt

API Docs should be for LLMs and Agents too, not just people!

We're excited to announce compatibility with the `/llms.txt` [emerging standard](https://llmstxt.org/), making your documentation accessible and optimized for AI developer tools such as Cursor, Github Copilot, ChatGPT, Perplexity, and Anthropic's Claude.

Both `/llms.txt` and `/llms-full.txt` are designed to be token-efficient, ensuring faster processing and cost-effective LLM interactions without sacrificing valuable info.

If you use Fern Docs, this feature is auto-enabled like /robots.txt and /sitemap.xml. [Learn more](https://buildwithfern.com/learn/docs/developer-tools/llms-txt)

![LLMs.txt Splash Image](file:be25ac9a-7bf0-44af-b1a6-8a2f7476c3c7)

Check out ElevenLabs:


  
    *loads in \< 1 sec*
  

  
    *loads in 5+ sec*
  



# December 30, 2024

## Audio Streaming in API Explorer

Added support for streaming audio directly within the API Explorer. This feature enables testing audio endpoints without leaving the documentation.

Check it out live in ElevenLabs' [API Explorer](https://elevenlabs.io/docs/api-reference/text-to-speech/convert?playground=/docs/api-reference/text-to-speech/convert-as-stream) to let users test text-to-speech endpoints and hear the results instantly.

## Form Data Optimization

Enhanced handling of URL parameters and form data in edge functions. Documentation playground now handles complex data structures more efficiently.

```typescript
const formConfig = {
  encoding: 'application/x-www-form-urlencoded',
  arrayFormat: 'brackets',
  allowNullables: true,
  sanitize: true,
  maxDepth: 5
}
```


# November 27, 2024

## Auto-Populate Credentials in API Explorer

Save developers the hassle of finding and copying their API key. When authenticated, their API credentials will be automatically filled into the API Playground. This way, they can make their first API call even faster.

![API Explorer Splash Image](file:2f94b58b-379f-405e-a63a-af645037a0d2)

Check it out live in [Webflow's API Explorer](https://developers.webflow.com/data/reference/sites/list?playground=/data/reference/sites/list).

## Card Component System

Enhanced documentation card components for better visual organization. Information can now be presented in a more structured and appealing way.

```typescript
interface CardProps {
  title: string;
  description: string;
  icon?: IconName;
  variant?: 'default' | 'bordered' | 'filled';
  actions?: CardAction[];
}

interface CardAction {
  label: string;
  href?: string;
  onClick?: () => void;
}
```


# October 31, 2024

## JWT API Key Integration

Implemented automatic API key extraction from JWT tokens in the documentation playground. Users can now test authenticated endpoints more easily with automatic credential handling.



## Query Parameter Enhancement

Improved handling of query parameters in documentation middleware. Complex query parameters are now properly handled and displayed in the documentation.


# September 24, 2024

# September 2024

## Environment Testing Interface

Created an editable playground environment system for testing API endpoints. Users can now switch between different API environments seamlessly within the documentation.

```yaml openapi.yml
servers:
  - url: https://api.example.com
    x-fern-server-name: Production
  - url: https://sandbox.example.com
    x-fern-server-name: Sandbox
```


# August 20, 2024

# August 2024

## Anchor Link System

Redesigned anchor link handling for improved navigation within documentation pages. Links now account for fixed headers and maintain proper scroll position when opened.

## WCAG Contrast Improvements

Enhanced color contrast throughout the documentation platform for better accessibility. All text and interactive elements now meet WCAG AA standards by default and warnings are shown for any elements that do not meet WCAG AA standards.

## API Page Center Updates

Improved center element positioning and updates for API documentation pages. Content now flows more naturally and maintains position during navigation.

## Streaming Toggle Enhancement

Improved visibility and behavior of streaming response toggles in API playground. Users can now better control and monitor streaming responses.


# July 30, 2024

# July 2024

## Meta Image System

Implemented comprehensive meta image support for better social sharing. Documentation pages now display properly when shared on social media platforms.

```yaml
og:image: /assets/og-image.png
og:type: documentation
twitter:card: summary_large_image
twitter:image: /assets/twitter-card.png
```


# June 25, 2024

# June 2024

## RSS Feed Integration

Added support for RSS feeds to keep users updated on documentation changes. Teams can now offer automated notifications for their documentation.

## JSON-LD Enhancement

Implemented structured data support through JSON-LD for improved SEO. Documentation pages now provide richer information to search engines and social platforms.

```json
{
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": "API Authentication Guide",
  "datePublished": "2024-06-15",
  "technicalAudience": "Software Developers"
}
```

## Image Zoom Controls

Added configurable image zoom functionality with custom triggers and behaviors. Users can now better examine diagrams and technical illustrations in documentation.

```mdx page.mdx
--- 
no-image-zoom: true
---
```

## Syntax Extension Support

Added support for additional syntax highlighting languages including BAML and Jinja. Documentation can now properly display a wider range of code examples.

```html

    
Available Products

    {% if products %}
        

            {% for product in products %}
                

                    
{{ product.name }}

                    
${{ product.price }}


                    
{{ product.description }}


                    {% if product.in_stock %}
                        
Status: In Stock


                    {% else %}
                        
Status: Out of Stock


                    {% endif %}
                

            {% endfor %}
        

    {% else %}
        
No products are available at the moment.


    {% endif %}

```


# May 22, 2024

## Advanced Redirects

Implemented a powerful redirects system supporting pattern matching and parameter preservation. Teams can now manage documentation URL structure while maintaining backwards compatibility.

```yaml
redirects:
  - source: /v1/api/*
    destination: /v2/api/:splat
    permanent: true
  - source: /guides/:name
    destination: /tutorials/:name
```

## API Authorization Handling

Enhanced API authorization handling in the documentation platform. Developers can now test authenticated endpoints more easily with improved token management.


# April 20, 2024

## Sidebar Navigation Enhancement

Improved sidebar padding and visual hierarchy with refined spacing and typography. The documentation navigation now provides clearer visual structure and better readability.

## Base Path Configuration

Added flexible base path configuration for documentation routing. Organizations can now host documentation under custom paths while maintaining proper navigation.

```yaml docs.yml
instances:
  - url: your-site.docs.buildwithfern.com
    custom-domain: your-site.com/docs
```


# March 24, 2024

# March 2024

## Virtualized Syntax Highlighting

Implemented performance-optimized code rendering that handles large code blocks efficiently without impacting page performance. Long code samples now load instantly and scroll smoothly.

## Mobile Search Experience

Redesigned the mobile search interface with a sticky search bar and improved results display. Users can now easily search documentation on mobile devices with a native-feeling interface.

## Scrollbar Refinement

Enhanced scrollbar design and behavior across all documentation sections for a more polished look and feel. Scrollbars now adapt to both light and dark themes while maintaining usability.


# February 22, 2024

## WebSocket Support in API Playground

Added real-time WebSocket testing capabilities to the API playground, enabling developers to test streaming and real-time endpoints directly in the documentation. WebSocket connections can now be established, tested, and debugged without leaving the docs.

## Enhanced Code Highlighting

Implemented a new code highlighting system using Shiki for improved syntax highlighting accuracy and performance. The system now supports more languages and provides better dark mode compatibility.

## Feedback System

Introduced a new feedback collection system using Radix UI components for improved accessibility. Users can now provide structured feedback about documentation quality and usefulness directly within the interface.

## Layout Configuration System

Implemented a flexible layout configuration system that allows for custom header, footer, and sidebar arrangements. Documentation can now be customized to match your brand and preferences.

```yaml
layout: 
  page-width: full
  tabs-placement: header
  searchbar-placement: header
```

## Custom Styling Support

Added support for custom CSS and scripts, enabling deep customization of documentation appearance and behavior. Organizations can now apply their branding consistently across their documentation.

```yaml docs.yml
  css: ./assets/styles.css
```

```css styles.css
/* Custom styles */
.custom-class {
  background-color: #f0f0f0;
}
```


# January 24, 2024

## API Playground Launch

Enable interactive API testing directly in the documentation.

* Added full API request testing capability
* Improved error handling and status code display
* Added support for recursive property rendering

## Enhanced Dark Mode

Multiple improvements to dark mode readability for syntax highlighting, dropdowns, and search results.

```css
/* Dark mode improvements */
[data-theme='dark'] {
  --syntax-bg: #1a1a1a;
  --dropdown-bg: #2d2d2d;
  --search-highlight: #ffd700;
}
```

## Mobile-Friendly Navigation

Comprehensive updates to mobile navigation experience with collapsible and scrolling.

## Search Enhancements

Multiple improvements to the search experience.

* Default and configurable keyboard shortcuts (`Cmd+A`, `/`) for search
* Improved search box sizing
* Added auto-focus functionality

## Performance Optimization

Several performance improvements across the platform.

* Moved FontAwesome to CDN
* Improved search dialog loading
* Optimized static props loading
* Added polyfill DOM parser for server-side TOC rendering


# Configure your site navigation

> Set up the navigation for your documentation site built with Fern Docs using the docs.yml file, including tabs, sections, pages, and more.

## Use `docs.yml`

Every Fern Docs website has a special configuration file called `docs.yml`. Use this file to configure the navigation for your documentation site.

### Example Configuration

Here's a complete example of a `docs.yml` file:


  ```yaml
  # yaml-language-server: $schema=https://schema.buildwithfern.dev/docs-yml.json
  navigation:
    - section: Home
      contents:
        - page: Introduction
          path: ./intro.mdx
        - page: Authentication
          path: ./auth.mdx
    - api: API Reference
  navbar-links:
    - type: secondary
      text: Contact support
      url: https://example.com/support
    - type: primary
      text: Login
      url: https://example.com/login
  ```


## Sections, contents, and pages

The navigation organizes your documentation in the left-side nav bar. You can create sections for grouping related content. Each `section` has a name and a list of `contents`. The sections appear in the left-side nav bar in the order that they are listed in `docs.yml`.

In `contents`, list your pages with names and corresponding file paths. The supported file types for pages are `.md` or `.mdx`.

A basic navigation configuration with two sections is shown below. The first section is called `Introduction` and contains a single page called `My Page`. The second section is called **API Reference**. This is a special type of section that's automatically generated by Fern, and you do not need to add any pages to it by hand. For more information, see the [Generate API Reference](/learn/docs/api-references/generate-api-ref) page.

```yaml Example navigation config
navigation:
  - section: Introduction
    contents:
      - page: My Page
        path: ./pages/my-page.mdx
  - api: API Reference
```

If you want to add another page to an existing section, create an `.md` or `.mdx` file. Then in `docs.yml`, create a new `page` in the `contents` list for that section, providing the path to the `.md` or `.mdx` file you created. Example:

```yaml Example navigation config
navigation:
  - section: Introduction
    contents:
      - page: My Page
        path: ./pages/my-page.mdx
      - page: Another Page
        path: ./pages/another-page.mdx
  - api: API Reference
```

To add another section, add another `section` to the `navigation`. Example:

```yaml Example navigation config with additional section
navigation:
  - section: Introduction
    contents:
      - page: My Page
        path: ./pages/my-page.mdx
  - api: API Reference
  - section: Help Center
    contents:
      - page: Contact Us
        path: contact-us.mdx
```

### Hiding content

To hide a page or an entire section of your docs, add `hidden: true`. A hidden page or section will still be discoverable using the exact URL, but it will be excluded from search and will not be indexed.

```yaml Example navigation config with additional section {7, 10}
navigation:
  - section: Introduction
    contents:
      - page: My Page
        path: ./pages/my-page.mdx
      - page: Hidden Page
        hidden: true
        path: ./pages/my-hidden-page.mdx
  - section: Hidden Sections
    hidden: true
    contents:
      - page: Another Hidden Page
        path: ./pages/also-hidden.mdx
```

## Section overviews

To add an overview page to a section, add a `path` property to the section.

```yaml Example section with an overview {7}
navigation:
  - section: Introduction
    contents:
      - page: My Page
        path: ./pages/my-page.mdx
      - section: Guides
        path: ./pages/guide-overview.mdx
        contents:
          - page: Simple Guide
            path: ./pages/guides/simple.mdx
          - page: Complex Guide
            path: ./pages/guides/complex.mdx
```

## Nested sections

If you'd like a section to toggle into more sections and pages, you can nest sections within sections. Here's an example:

```yaml Example navigation config with nested sections
navigation:
  - tab: guides
    layout:
      - section: Learn
        contents:
          - section: Key Concepts
            contents:
              - page: Embeddings
                path: ./docs/pages/embeddings.mdx
              - page: Prompt Engineering
                path: ./docs/pages/prompts.mdx
          - section: Generation
            contents:
              - page: Command Nightly
                path: ./docs/pages/command.mdx
              - page: Likelihood
                path: ./docs/pages/likelihood.mdx
```


  ![Result of above docs.yml example](https://fern-image-hosting.s3.amazonaws.com/fern/nested-sections.png)


## Sidebar icons

For icons to appear next to sections and pages, add the `icon` key. The value should be a valid [Font Awesome icon](https://fontawesome.com/icons) name. Pro and Brand Icons from Font Awesome are supported.

```yaml Example navigation config with icons
navigation:
  - section: Home
    icon: fa-regular fa-home
    contents:
      - page: My Page
        icon: fa-regular fa-file
        path: ./pages/my-page.mdx
  - api: API Reference
    icon: fa-regular fa-puzzle
```

## Links

You can add a link to an external page within your sidebar navigation with the following configuration:

```yaml title="docs.yml"
navigation:
  - section: Home
    contents:
      - page: Introduction
        path: ./intro.mdx
      - link: Our YouTube Channel
        href: https://www.youtube.com/
```


  An external link within navigation


## Tabs

Within the navigation, you can add `tabs`. Tabs are used to group sections together. The example below shows tabs for `Help Center`, `API Reference`, and an external link to `Github`. Each tab has a `title` and `icon`. [Browse the icons available](https://fontawesome.com/icons) from Font Awesome. Pro and Brand Icons are supported.


  ```yaml
  tabs: 
    api: 
      display-name: API Reference
      icon: puzzle
    help:
      display-name: Help Center
      icon: home
    github:
      display-name: GitHub
      icon: brands github
      href: https://github.com/fern-api/fern
      
   navigation: 
    - tab: api
      layout: 
        - section: Introduction
            contents: 
              - page: My Page
                  path: my-page.mdx
          - api: API Reference   
    - tab: help
      layout: 
        - section: Help Center
          contents: 
            - page: Contact Us
                path: contact-us.mdx
    - tab: github
  ```


Here's an example of what the Tabs implementation looks like:


  ![Screenshot showing two vertically stacked tabs labeled API Reference and Help
  Center](https://fern-image-hosting.s3.amazonaws.com/fern/tabs.png)


## Versions

If you have multiple versions of your documentation, you can introduce a dropdown version selector by specifying the `versions`. For more information, check out our [documentation on versioning](/learn/docs/building-your-docs/versioning).


# Product Switching

> Allow users to seamlessly navigate between different products you offer.


  




  

    Webflow

    Webflow

    

      View Webflow's Product Switcher
    

  



Each product can contain its own distinct versions, tabs, sections, pages, and API references. Products can share content as well.

## Add Products to Your Docs


  ### Define your products

  Create a `products` folder inside of your `fern` folder. To specify a product's contents and navigational structure, add a `.yml` file to the `products` folder for each product.
  Make sure to include the `navigation` and `tabs` properties, if applicable.

  ```bash
  fern/
    ├─ fern.config.json
    ├─ generators.yml
    ├─ docs.yml
    └─ products/
      ├─ ...
      ├─ product-a.yml
      └─ product-b.yml
  ```

  
    
      ```yaml
      navigation: 
        - section: Introduction
          contents:
            - page: Shared Resource
              path: ../pages/shared-resource.mdx
        - api: API Reference
      ```
    

    
      ```yaml
      tabs: 
        api: 
          title: API Reference
          icon: puzzle
        help:
          title: Help Center
          icon: home
          
       navigation:
        - tab: api
           contents:
              - section: Introduction
                 contents: 
                    - page: My Page
                      path: ./latest/pages/my-page.mdx # relative path to the file
                    - page: Shared Resource
                      path: ../pages/shared-resource.mdx
              - api: API Reference
         - tab: help
            contents: 
               - section: Help Center
                 contents: 
                    - page: Contact Us
                       path: contact-us.mdx
      ```
    
  

  ### Add your product configuration

  To define a product, add an item to the `products` list in `docs.yml`, specifying the `display-name` and `path`.

  The optional parameters are: `image`, `icon`, `subtitle`, `slug`, and `versions`.

  
    If you provide both an 

    `image`

     and an 

    `icon`

    , the 

    `image`

     will take precedence.
  

  
    Products can be versioned or unversioned. The following is an example of how more complex products might be organized:

    ```bash
    fern/
      ├─ fern.config.json
      ├─ generators.yml
      ├─ docs.yml
      ├─ pages/
        ├─ ...
      └─ products/
        ├── product-a.yml # basic unversioned product
        ├── product-b/ # unversioned product with product-specific pages
        │   ├─ pages/...
        │   └─ product-with-pages.yml
        └── product-c/ # versioned product
            ├─ product-c.yml
            └─ versions/
              ├─ v1/
              │  ├─ v1.yml
              │  └─ pages/...
              └─ v2/
                ├─ v2.yml
                └─ pages/...
    ```

    For more information on setting up versions, follow our [versioning docs](/learn/docs/building-and-customizing-your-docs/versioning).
  

  
    ```yaml
    products:
      - display-name: Product A
        path: ./products/product-a.yml
        icon: fa-solid fa-leaf # optional
        slug: product-a # optional
        subtitle: Product A subtitle # optional

      - display-name: Product B
        path: ./products/product-b/latest.yml # <-- default showing latest
        image: ./images/product-b.png # optional
        slug: product-b # optional
        subtitle: Product B subtitle # optional
        versions: # optional
          - display-name: Latest
            path: ./products/product-b/latest.yml
          - display-name: V2
            path: ./products/product-b/v2.yml
    ```
  

  ### Remove extra `navigation` from `docs.yml`

  If your `docs.yml` file includes a `navigation` field or a `tabs` field, be sure to remove. Those fields should now belong in the product-specific `.yml` files.


## Customizing Selector Styling

You can directly customize the appearance of the product and version selectors by targeting their CSS classes:

* `fern-product-selector` - Controls the styling of the product selector
* `fern-version-selector` - Controls the styling of the version selector


  Example of a styled product selector


### Common Styling Adjustments

**Adjusting positioning:**
Use `transform: translateY(Npx)` to adjust the vertical positioning of the selectors. This ensures that the product and version selectors match the line height of your logo for better visual alignment.

**Enhancing visual prominence:**
You can modify the border radius and add borders to make the selectors more prominent and better integrated with your site's design aesthetic.

```css
.fern-product-selector {
  transform: translateY(2px);
  border-radius: 8px;
  border: 1px solid var(--border);
}

.fern-version-selector {
  transform: translateY(1px);
  border-radius: 1000px;
  border: 1px solid var(--border);
}
```

## Customizing Dropdown Styling

The dropdown menus for product and version selectors can be customized using these specific CSS classes:

* `fern-product-selector-radio-group` - Controls the styling of the product dropdown
* `fern-version-selector-radio-group` - Controls the styling of the version dropdown


  
    
      Example of a styled product selector
    

    ### Common Styling Adjustments

    **Enable a grid layout for the dropdown:**

    ```css
    .fern-product-selector-radio-group {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 8px;
    }  
    ```
  

  
    
      Example of a styled version selector
    
  



# Versioning

> Allow users to navigate between different versions of your docs.


  ![A dropdown of the available versions](file:78ba5e37-732a-40e5-b732-5fa7da8712bc)


Each version of your docs can contain its own distinct tabs, sections, pages, and API references. Versions can share content, as well.

**To add versions to your docs:**


  ### Define your versions

  Create a `versions` folder inside of your `fern` folder. TO specify the contents of each version, add a `.yml` file to the `versions` folder to define the navigational structure of that version. Make sure to include the `navigation` and `tabs` properties, if applicable.

  ```bash
  fern/
    ├─ fern.config.json
    ├─ generators.yml
    ├─ docs.yml
    ├─ pages/
      ├─ ...
    └─ versions/
      ├─ v2-1/pages/...
      ├─ v2-1.yml
      ├─ v2-2/pages/...
      └─ v2-2.yml
  ```

  
    
      ```yaml
      navigation: 
        - section: Introduction
          contents: 
            - page: My Page
              path: ./v2-1/pages/my-page.mdx  # relative path to the file
            - page: Shared Resource
              path: ../shared-pages/shared-resource.mdx
        - api: API Reference
      ```
    

    
      ```yaml
      tabs: 
        api: 
          title: API Reference
          icon: puzzle
        help:
          title: Help Center
          icon: home
          
       navigation:
        - tab: api
           contents:
              - section: Introduction
                 contents: 
                    - page: My Page
                      path: ./v2-2/pages/my-page.mdx # relative path to the file
                    - page: Shared Resource
                      path: ../shared-pages/shared-resource.mdx
              - api: API Reference
         - tab: help
            contents: 
               - section: Help Center
                 contents: 
                    - page: Contact Us
                       path: contact-us.mdx
      ```
    
  

  ### Add your version configuration

  To define a version, in `docs.yml`, add an item to the `versions` list, specifying the `display-name` and `path`.

  ```bash
  fern/
    ├─ fern.config.json
    ├─ generators.yml
    ├─ docs.yml
    └─ versions/
      ├─ ...
      ├─ v2-1.yml
      └─ v2-2.yml
  ```

  
    ```yaml
    versions: 
      - display-name: v2.2          # shown in the dropdown
        path: ./versions/v2-2.yml   # relative path to the version file
      - display-name: v2.1
        path: ./versions/v2-1.yml
    ```
  

  ### Remove extra `navigation` from `docs.yml`

  If your `docs.yml` file includes a `navigation` field or a `tabs` field, be sure to remove. Those fields should now belong in the version-specific `.yml` files.



# Add an announcement banner to your docs

> Prominently highlight new features, updates, or important information

An announcement banner is a great way to draw attention to new features and product launches. When configured, the announcement bar appears at the top of your docs site. After the user dismisses the bar, it will reappear the next time you update the announcement.

```yaml docs.yml
announcement:
    message: "🚀 New feature: Announcements are available! (Learn more) 🚀"
```

Markdown and HTML is supported in the announcement message. You can include links, images, and other formatting. [Custom css](/learn/docs/building-your-docs/custom-css-global-js#custom-css) can be used to customize the style of the announcement.


# Configure links and redirects for your site

> Set up the navigation for your documentation site built with Fern Docs using the docs.yml file

## Redirects

The `redirects` object allows you to redirect traffic from one path to another. You can also use [`regex`](https://www.npmjs.com/package/path-to-regexp) within redirects.


  
    ```yml title="docs.yml"
    redirects:
      - source: "/old-path"
        destination: "/new-path"
      - source: "/incorrect/path"
        destination: "/correct/path"
    ```
  

  
    ```yml title="docs.yml"
      - source: "/old-folder/:slug" # <- /old-folder/foo, /old-folder/bar, etc.
        destination: "/new-folder/:slug"
      - source: "/incorrect/:slug*" # <- /incorrect, /incorrect/foo/bar/baz, etc.
        destination: "/correct/:slug*" 
    ```

    
      Parameters suffixed with an asterisk (`*`) denote a match with zero or more.
    
  


By default, the redirects implement temporary (302) redirects. If you would like to implement permanent (301) redirects, you can set `permanent: true`.


  ```yml
  redirects:
    - source: "/old-subdomain"
      destination: "/new-subdomain"
      permanent: true
  ```



  If your docs are hosted on a subpath (like `buildwithfern.com/learn`), be sure to include the subpath in the redirect.


## Links

You can add a link to an external page within your sidebar navigation with the following configuration:

```yaml title="docs.yml"
navigation: 
  - section: Home
    contents:
      - page: Introduction
        path: ./intro.mdx
      - link: Our YouTube Channel
        href: https://www.youtube.com/
```


  An external link within navigation



# Customizing slugs within your site

By default, Fern generates the slug of a page based on the navigation structure in the `docs.yml` file.


  
    ```yaml docs.yml {5, 7}
    instances:
      - url: plantstore.docs.buildwithfern.com
      
    navigation:
      - section: Get Started
        contents: 
          - page: Welcome 
            path: ./docs/pages/welcome.mdx
    ```

    In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/get-started/welcome`.
  

  
    ```yaml docs.yml {5, 13, 15}
    instances:
      - url: plantstore.docs.buildwithfern.com
      
    tabs: 
      docs:
        display-name: Docs
      reference: 
        display-name: API Reference
      
    navigation:
      - tab: docs
        layout: 
          - section: Get Started
            contents: 
              - page: Welcome 
                path: ./docs/pages/welcome.mdx
    ```

    In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/docs/get-started/welcome`.
  


### Renaming slugs

#### Modify a page or section slug

To modify the slug used for a page or section, you can set the `slug` within the `navigation` object.

```yaml {3, 6}
navigation:
  - section: Get Started
    slug: start
    contents: 
      - page: Welcome 
        slug: intro
        path: ./docs/pages/welcome.mdx
```

In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/start/intro`.

#### Modify a tab slug

To modify the slug used for a tab, you can set the `slug` within the `tabs` object.

```yaml {4}
tabs: 
  docs:
    display-name: Docs
    slug: guides
  reference: 
    display-name: API Reference
  
navigation:
  - tab: docs
    layout: 
      - section: Get Started
        contents: 
          - page: Welcome 
            path: ./docs/pages/welcome.mdx
```

In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/guides/get-started/welcome`.

#### Override a page's slug

You can set the exact slug of a page within its frontmatter. [You can read more about the frontmatter configuration here](/learn/docs/content/frontmatter#slug).

```yaml title="docs.yml"
navigation:
  - section: Get Started
    slug: start
    contents: 
      - page: Quick Start 
        path: ./docs/pages/quick-start.mdx
```

You can set the slug in the frontmatter of `./docs/pages/quick-start.mdx` to `start-up`:

```markdown title="quick-start.mdx" {2}
---
slug: start-up
---
```

The page then becomes available at `plantstore.docs.buildwithfern.com/start-up`.

#### Renaming slugs for subheadings

By default, deep links to subheadings are generated by appending a `#` and the subheading title (converted to `kebab-casing-convention`) onto the page URl.

```yaml docs.yml
navigation:
  - section: Get Started
    contents: 
      - page: Welcome 
        path: ./docs/pages/welcome.mdx
```

```markdown welcome.mdx
...

## Frequently Asked Questions 
...
```

The link to this section will be available at `plantstore.docs.buildwithfern.com/get-started/welcome#frequently-asked-questions`.

To rename the slug of the subheading, add the desired slug

```markdown welcome.mdx
## Frequently Asked Questions [#faqs]
```

The link to this section will now be available at `plantstore.docs.buildwithfern.com/get-started/welcome#faqs`.

### Skipping slugs

To ignore a tab or section when generating the slug, simply indicate `skip-slug: true`.


  
    ```yaml docs.yml {6}
    instances:
      - url: plantstore.docs.buildwithfern.com
      
    navigation:
      - section: Get Started
        skip-slug: true
        contents: 
          - page: Welcome 
            path: ./docs/pages/welcome.mdx
    ```

    In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/welcome`.
  

  
    ```yaml docs.yml {7, 15}
    instances:
      - url: plantstore.docs.buildwithfern.com
      
    tabs: 
      docs:
        display-name: Docs
        skip-slug: true
      reference: 
        display-name: API Reference
      
    navigation:
      - tab: docs
        layout: 
          - section: Get Started
            skip-slug: true
            contents: 
              - page: Welcome 
                path: ./docs/pages/welcome.mdx
    ```

    In the example above, the **Welcome** page would be hosted at `plantstore.docs.buildwithfern.com/welcome`.
  



# Hiding content in your site

If you would like to *hide* a section or a page, you can add `hidden: true` to its configuration. Hidden sections and pages are accessible by URL only.


  
    ```yaml title="docs.yml"
    navigation: 
      - section: Introduction
        contents: 
          - page: My Page
            path: ./pages/my-page.mdx
          - page: Hide and Seek
            hidden: true
            path: ./pages/hide-and-seek.mdx
      - api: API Reference
    ```

    
      A site with a hidden page
    
  

  
    ```yaml title="docs.yml"
    navigation: 
      - section: Introduction
        contents: 
          - page: My Page
            path: ./pages/my-page.mdx
      - api: API Reference
      - section: Hidden Section
        hidden: true
        contents: 
          - page: Hide and Seek
            path: ./pages/hide-and-seek.mdx
    ```

    
      A site with a hidden section
    
  



# Fully customize your docs

> Add brand-specific styling, user interactions. and components to make your docs your own.


  Custom CSS & JS are available on the Basic plan.
  Adding Custom Components is available on the Pro plan.


## Custom CSS

You can add custom CSS to your docs to further customize the look and feel. The defined class names are applied across all MDX files.

Here's an example of what you can do with custom CSS:


  ```css maxLines=10

  .petstore-table {
      background-color: white;
      border: 1px solid #DEDEE1;
      border-radius: 4px;
  }

  .dark .petstore-table { 
      background-color: #1e1e1e;
      border: 1px solid #2e2e2e;
  }

  .petstore-table thead {
      position: sticky;
      top: 0;
  }

  .petstore-table thead tr {
      background-color: #edecee;
      border: 1px solid #DEDEE1;
      border-radius: 4px 4px 0px 0px;
  }

  .dark .petstore-table thead tr {
      background-color: #2e2e2e;
      border: 1px solid #2e2e2e;
  }

  .petstore-table th {
      padding: 6px;
  }

  .petstore-table tbody td {
      padding: 6px;
  }

  .petstore-table tbody tr:nth-child(odd) {
      border: 1px solid #DEDEE1;
  }
  .petstore-table tbody tr:nth-child(even) {
      border: 1px solid #DEDEE1;
      background-color: #f7f6f8;
  }

  .dark .petstore-table tbody tr:nth-child(odd) {
      border: 1px solid #2e2e2e;
  }

  .dark .petstore-table tbody tr:nth-child(even) {
      border: 1px solid #2e2e2e;
      background-color: #2e2e2e;
  }
  ```



  ### Create `styles.css`

  Add a `styles.css` file and include it in your `fern/` project:

  
    ```bash {5}
      fern/
      ├─ openapi/
      ├─ pages/
      ├─ images/
      ├─ styles.css
      ├─ docs.yml
      └─ fern.config.json
    ```
  

  ### Edit `docs.yml`

  In `docs.yml`, specify the path to the `styles.css` file:

  
    ```yaml
    css: ./styles.css
    ```
  

  ### Add multiple custom CSS files (optional)

  You can specify any number of custom CSS files:

  
    ```yaml
    css:
      - ./css/header-styles.css
      - ./css/footer-styles.css
    ```
  



  For customizing the background, logo, font, and layout of your Docs via Fern's built-in styling,
  check out the [Global Configuration](/learn/docs/getting-started/global-configuration).


## Custom JavaScript

Customize the behavior of your Docs site by injecting custom JavaScript globally. Add a `custom.js` file and include it in your `fern/` project:


  ```bash {5}
    fern/
    ├─ openapi/
    ├─ pages/
    ├─ images/
    ├─ custom.js
    ├─ docs.yml
    └─ fern.config.json
  ```


In `docs.yml`, specify the path to the `custom.js` file:


  ```yaml
  js: ./custom.js
  ```


You can also specify multiple custom JS files stored locally and remote:


  ```yaml
  js:
    - path/to/js/file.js
    - path: path/to/another/js/file.js
      strategy: beforeInteractive
    - url: https://example.com/path/to/js/file.js
  ```



  We use `path` for local sources and `url` for remote sources.


### Strategy

Optionally, specify the strategy for each custom JavaScript file. Choose from `beforeInteractive`, `afterInteractive` (default), and `lazyOnload`.


  ```yaml
  js:
    - path: path/to/another/js/file.js
      strategy: beforeInteractive
  ```


## Custom components

You can use custom CSS and JS to replace Fern's default UI components with your own. The `header` and `footer`
are the most commonly replaced components. You can replace any component in the docs,
including the sidebar, tabs, search bar, and more.

To implement your own components in Fern Docs, write JavaScript to render your
custom components in the DOM. Build to CSS and JavaScript files that
are stored in `fern/` and referenced in `docs.yml`:


  
    ```bash {5-7}
      fern/
      ├─ openapi/
      ├─ pages/
      ├─ images/
      ├─ dist/
        └─ output.css
        └─ output.js
      ├─ docs.yml
      └─ fern.config.json
    ```
  

  
    ```yaml
    css: ./dist/output.css
    js: ./dist/output.js
    ```
  


### Example custom components

See this [GitHub repo](https://github.com/fern-api/docs-custom-js-example)
and its [generated docs page](https://custom-js-example.docs.buildwithfern.com/get-started/welcome)
for an example of how to replace the Fern `header` and `footer` with custom React components.

#### Example custom header


  Custom header


```JavaScript
ReactDOM.render(
  React.createElement(NavHeader),
  document.getElementById('fern-header'),
)
```

#### Example custom footer


  Custom footer


```JavaScript
ReactDOM.render(
  React.createElement(NavFooter),
  document.getElementById('fern-footer'),
)
```

### Important notes

* `ReactDOM.render()` may need to be called multiple times to prevent it from unmounting (this side-effect will be removed in the future).
* `yarn build` or `npm build` must generate files with deterministic names to be referenced in `docs.yml`. The above example uses a [`vite` config](https://github.com/fern-api/docs-custom-js-example/blob/main/custom-app/vite.config.ts) to accomplish this.
* For your hosted Docs site, you may need to update your CD steps to include building the react-app.
* Custom components are not supported in local development. They are supported in preview links.


  This approach is subject to change, with notice, as we make improvements to the plugin architecture.



# Pull request previews

> Fern's PR previews feature lets you preview changes to your docs from pull requests before merging to the live docs site. Use manually or in GitHub Actions.

`PR previews` offer a way to preview changes from pull requests (PRs) before merging code to a production branch. This is useful for reviewing documentation changes before publishing them to your live documentation site. Use manually or in GitHub Actions.

## Usage

```bash
fern generate --docs --preview
```

## Example

```bash
fern generate --docs --preview

[docs]: Found 0 errors and 1 warnings. Run fern check --warnings to print out the warnings.
[docs]: Published docs to https://fern-preview-a1da0157-93ca-4b1f-b310-8dd34fb891ca.docs.buildwithfern.com
┌─
│ ✓  docs.example.com
└─
```

## Usage in GitHub Actions

The following is a GitHub Action workflow that generates a preview URL for every pull request. [Be sure to add the `FERN_TOKEN` for your organization to the repository](/learn/cli-api/cli-reference/commands#fern-token).


  ```yaml
  name: Preview Docs

  on:
    pull_request

  jobs:
      run:
          runs-on: ubuntu-latest
          permissions: write-all
          steps:
              - name: Checkout repository
                uses: actions/checkout@v4

              - name: Install Fern
                run: npm install -g fern-api

              - name: Generate preview URL
                id: generate-docs
                env:
                    FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
                run: |
                    OUTPUT=$(fern generate --docs --preview 2>&1) || true
                    echo "$OUTPUT"
                    URL=$(echo "$OUTPUT" | grep -oP 'Published docs to \K.*(?= \()')
                    echo "Preview URL: $URL"
                    echo "🌿 Preview your docs: $URL" > preview_url.txt

              - name: Comment URL in PR
                uses: thollander/actions-comment-pull-request@v2.4.3
                with:
                    filePath: preview_url.txt
  ```



  Fern's PR previews GitHub Action requires a Fern token to run. Depending on your repository's permissions, you may need to use the following workflow to allow PR previews from forks to access this token.

  
    ```yaml .github/workflows/preview-docs.yml
    name: preview-docs

    on:
      pull_request_target:
        branches:
          - main

    jobs:
      run:
        runs-on: ubuntu-latest
        permissions:
          pull-requests: write  # Only for commenting
          contents: read        # For checking out code
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Install Fern
            run: npm install -g fern-api

          - name: Checkout PR
            if: github.event_name == 'pull_request_target'
            run: |
              git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-${{ github.event.pull_request.number }}
              git checkout pr-${{ github.event.pull_request.number }}    

          - name: Generate preview URL
            id: generate-docs
            env:
              FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
            run: |
              OUTPUT=$(fern generate --docs --preview 2>&1) || true
              echo "$OUTPUT"
              URL=$(echo "$OUTPUT" | grep -oP 'Published docs to \K.*(?= \()')
              echo "Preview URL: $URL"
              echo "🌿 Preview your docs: $URL" > preview_url.txt

          - name: Comment URL in PR
            uses: thollander/actions-comment-pull-request@v2.4.3
            with:
              filePath: preview_url.txt
    ```
  


## Link expiration

Preview links do not expire. However, the time to live (TTL) is subject to change in the future.


# Bring your custom domain

> Learn how to set up your Fern-generated documentation site to use a custom subdomain or subpath.

Bring Fern Docs to your custom domain.

You can use:

* A subdomain on your custom domain, such as `docs.example.com`
* A subpath on your custom domain, such as `example.com/docs`
* A root domain, such as `example.com`


  This feature is available on the Basic plan and above. 

  [Contact us](https://buildwithfern.com/contact)

   to get set up.



  
    To host your documentation on a subdomain, i.e. `docs.mydomain.com`, you need to create a CNAME record in your DNS settings.

    
      ### Update the domain in `docs.yml`

      ```yaml
      instances:
       - url: example.docs.buildwithfern.com
         custom-domain: docs.mydomain.com
      ```

      Merge your changes into `main`. [Here's an example](https://github.com/octoml/fern-config/blob/389b67679953856ba0716537981a6d749635556f/fern/docs.yml#L1-L3).

      ### Create a CNAME record

      1. Log in to your domain registrar's dashboard.
      2. Navigate to the DNS settings for your domain.
      3. Add a new CNAME record with the following details:
         * **Type**: `CNAME`
         * **Name**: `docs` (or any subdomain you want to use)
         * **Value**: `cname.vercel-dns.com.`

      ### Reach out to us

      Once you've completed the steps above, reach out via your dedicated Slack channel or [email](mailto:support@buildwithfern.com).

      You may need to create a TXT record to verify your domain. If you do, we'll provide you with the record to add.

      ### Verify the setup

      Once we've completed the setup on our end, you should be able to access your documentation at `docs.mydomain.com`. SSL will be automatically provisioned for your domain, but it may take a few minutes to propagate globally.

      
        It's helpful to check that you can access your new docs site from a mobile device or incognito browser.
      
    
  

  
    To host your documentation on a subpath, i.e. `mydomain.com/docs`, you need to edit your `docs.yml` configuration and then get provider-specific instructions for setting up the subpath. Common providers include Cloudflare, AWS Route53 and Cloudfront, Netlify, and Vercel.

    
      ### Configure the `url` in `docs.yml`

      Append that subpath to the end of the `url`. This example use `docs` for the subpath, but you can use any word you like, such as `reference` or `developer`.

      
        ```yaml
        instances: 
          - url: example.docs.buildwithfern.com/docs
        ```
      

      ### Configure the `custom-domain`

      Below the `url`, add a `custom-domain` key as shown in the examples below.

      
        ```yaml
        instances: 
          - url: example.docs.buildwithfern.com/docs
            custom-domain: example.com/docs
        ```
      

      [Here's an example.](https://github.com/fern-api/fern/blob/7d8631c6119787a8aaccb4ba49837e73c985db28/fern/docs.yml#L1-L3)

      ### Update the Fern Docs site

      If you created your Fern Docs site using one of our [Docs Quickstarts](/learn/docs/getting-started/quickstart), push the changes you made to your GitHub repository. This runs a GitHub Action to update the site with your new configuration.

      If you need to update your Fern Docs site manually, run `fern generate --docs`.

      ### Reach out to us

      This feature is available on the Fern Docs Basic plan and above. Reach out to [sales@buildwithfern.com](mailto:sales@buildwithfern.com) to set up your subscription and obtain the configuration for setting up your custom subpath.
    
  

  
    To host your documentation on a root domain, i.e. `mydomain.com`, you need to edit your `docs.yml` configuration and then get provider-specific instructions for setting up the domain. Common providers include Cloudflare, AWS Route53 and Cloudfront, Netlify, and Vercel.

    
      ### Configure the `url` in `docs.yml`

      
        ```yaml
        instances:
          - url: example.docs.buildwithfern.com
            custom-domain: www.example.com
        ```
      

      [Here's an example.](https://github.com/dannysheridan/katiedanny/blob/2fcf5769e2994af29e31d00904e04788b188a18b/fern/docs.yml#L3-L5)

      ### Configure your DNS settings

      You'll need two DNS records configured for your root domain.

      
        ```
        Type    Name    Value
        CNAME   www     cname.vercel-dns.com.
        ```
      

      
        ```
        Type    Name    Value
        A       @       76.76.21.21
        ```
      

      This redirects `mydomain.com` to `www.mydomain.com`.

      Contact Fern Support after adding these records and we will provision a SSL certificate.

      ### Verify the setup

      Once we've completed the setup re-generate your docs by running `fern generate --docs`. Within two minutes, you should be able to access your documentation at `mydomain.com`.
    
  



# Collecting feedback and suggestions from users

Fern offers a variety of ways to track feedback and suggested improvements from users.

## On-page feedback

By default, every Markdown page of your docs contains a feedback component at the bottom of the page:


  



  This feature is available on the Basic plan and above. 

  [Contact us](https://buildwithfern.com/contact)

   to get set up.


The feedback can be sent to you in real-time via the method of your choosing (e.g. Slack, email).

To disable this feature on a page, set `hide-feedback: true` in the frontmatter of that page. You can read more about the frontmatter configuration [here](/learn/docs/content/frontmatter#on-page-feedback).

## Edit this page

Allow users to open directly to the current page in your GitHub repository and suggest changes.


  


You can configure this feature for the entire site in the [global configuration](/learn/docs/getting-started/global-configuration#instances-configuration), or for an individual page in the [frontmatter of that page](/learn/docs/content/frontmatter#edit-this-page).


  This feature works in preview links but does not work in local development.



# Role-based access control

> Learn how to restrict access to your documentation using role-based access control (RBAC)


  Configuring RBAC is part of the pro plan.


Fern allows you to restrict parts of your navigation to individuals with specific roles. Below, we walk through each of the steps
required to configure RBAC.


  ### Define all the `roles` in your docs.yml

  Start by defining all the different roles in your `docs.yml`. You can simply specify this under a `roles` key:

  ```yml docs.yml
  roles:
    - everyone # every user is given this role
    - partners
    - beta-users
    - admins
  ```

  
    The 

    `everyone`

     role is a special role. Every user has this role.
  

  ### Define viewers on parts of the navigation

  Every navigation item (`sections`, `pages`, `api references`) can have a set of designated viewers. If you don't
  specify viewers, then it defaults to `everyone` and the page is public.

  ```yml docs.yml {7-8,14-16}
  navigation:
    - tab: Documentation
      layout:
        - page: Overview
          path: pages/overview.mdx
        - section: Beta Release
          viewers:
            - beta-users
    - tab: API Reference
      layout:
        - page: Overview
          path: pages/overview.mdx
        - section: Beta Release
          viewers:
            - partners
            - admin
  ```

  The viewers are inherited by nested pieces of content. For example, if a section can only be viewed by `admins`, then all its
  pages and nested sections can also only be viewed by admins.

  ### Configure authentication via a `fern_token`

  In this step, we will configure authentication so that Fern can understand what roles a particular user has. Fern expects the user's
  browser session to have a cookie called `fern_token`. If the cookie is not present, the user will be redirected to your company's
  login page.

  Upon login, you must set a JWT for the user using a secret key that we will provide you with. The JWT must have a `fern` claim
  with a key called roles.

  ```json
  {
    "fern": {
      "roles": ["partners"]
    }
  }
  ```

  
    Please reach out to 

    [support@buildwithfern.com](mailto:support@buildwithfern.com)

     when you are on this step so we can provide you with a secret key.
  



# Search

Fern uses [Algolia DocSearch](https://docsearch.algolia.com/) to power search for your documentation.
DocSearch is designed specifically for documentation sites to help users quickly find what they need.

## How search works

DocSearch scans your Fern site's content and builds an index to generate search results.
It includes built-in filters that let users refine their searches by content type:

* **Versions:** For sites with separate documentation for different API versions.
* **Endpoints:**  Filters results by API reference documentation.
* **Guides:** Filters results by non-API reference documentation.
* **Changelog:** Filters results by changelog updates.

If you are using the AI Search feature, the search box also functions as your site’s chat window.


  **Note:** If an article includes the `nofollow` or `noindex` [frontmatter](/learn/docs/content/frontmatter#indexing-properties), it will not be indexed by Algolia DocSearch and won't appear in search results.


## Using an alternative search

You can override Fern's search with your own solution.
[Here](https://github.com/deepgram/deepgram-docs/blob/main/fern/assets/component.js) is an example of custom JavaScript a customer used to replace the default search with their own implementation and additional features.
To learn more, see [Custom JavaScript](/learn/docs/building-and-customizing-your-docs/custom-css-global-js#custom-javascript).


# Write docs content using Markdown

> Use Markdown and MDX to add content to your Fern documentation site, including Fern's built-in component library.

## Add Markdown or MDX pages

Add pages manually to your documentation by creating Markdown (`.md`) or MDX (`.mdx`) files. New to Markdown? See [Markdown Guide: Getting started](https://www.markdownguide.org/getting-started/).


  NOTE: Throughout our documentation, we refer to both Markdown and MDX as Markdown. [MDX](https://mdxjs.com/) is a version of Markdown, extended to allow the use of JSX components.


Place your pages inside your `fern/` folder and link to them from your [navigation settings](/learn/docs/building-your-docs/navigation) in the `docs.yml` file.

In the example below, the MDX files are inside a folder named `pages/`.


  ```bash
  fern/
  ├─ fern.config.json
  ├─ docs.yml
  └─ pages/
    ├─ welcome.mdx
    └─ quickstart.mdx
  ```



  ```yml
  navigation:
    - section: Overview
      contents: 
        - page: Welcome 
          path: ./pages/welcome.mdx
        - page: Quickstart
          path: ./pages/quickstart.mdx
  ```


## Page header

Fern automatically generates the `
` page header for each page from `docs.yml`. For example, here's the `docs.yml` entry that maps the page you are reading now:

```yml
          - page: Write Markdown content
            path: ./docs/pages/fern-docs/content/write-markdown.mdx
```

The value for `page` is used as the content of the top `
` element of this page. Thus, when adding content to your Markdown pages, begin with `
` instead of `
`.

## Fern components

Fern has a built-in component library you can use in Markdown. [Explore the components.](/learn/docs/content/components/overview)

## Links in Markdown

### Link target

When clicked, links to relative URLs open in the same tab, whereas links to absolute URLs open in a new browser tab.

### Link format

Use a `/` character to begin a relative URL to another page on your docs site. This routes to the `url` defined in your `docs.yml` file, such as `example-docs.buildwithfern.com`. For example, if you want to link to `https://example-docs.buildwithfern.com/overview/introduction`, you can write the link in Markdown as follows:


  ```mdx
  Read the [Introduction](/learn/overview/introduction).
  ```


## Images

You can use locally stored images or URLs to include images in your Markdown pages. Use either [Markdown syntax](https://www.markdownguide.org/basic-syntax/#images-1) or the [`` HTML tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) to insert the image.


  
    ```markdown
    ![Alt text](./path/to/image.png "Optional title")
    ```
  

  
    ```html
    
    ```
  


Common image attributes:

| Attribute            | Description                        |
| -------------------- | ---------------------------------- |
| `src`                | URL or path to the image file      |
| `alt`                | Alternative text for accessibility |
| `title`              | Tooltip text shown on hover        |
| `width` and `height` | Dimensions of the image in pixels  |


  For more details about the HTML image element and its attributes, see the [MDN documentation on the img element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img).


## Embedding local assets

You can embed local assets in your Markdown pages using the [`` component](/learn/docs/content/components/embed). This is useful for displaying PDFs, images, videos, OpenAPI files, and other assets into your docs.

For example, to embed a video, use the following Markdown:

```mdx

```



### Local videos

You can embed videos in your documentation using the HTML `
